<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>将Hexo静态博客部署到阿里云Centos7(转)</title>
    <url>/Hexo/Centos7_hexo.html</url>
    <content><![CDATA[<br>
<a id="more"></a>

<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p> 此文参考网络上的文章以及自己在实际操作过程中,记录自己如何将Hexo静态博客部署到阿里云Centos7上的过程。</p>
<!-- more -->

<h1 id="环境的配置"><a href="#环境的配置" class="headerlink" title="环境的配置"></a>环境的配置</h1><blockquote>
<p>本地环境配置</p>
</blockquote>
<blockquote>
<p>服务器环境配置</p>
</blockquote>
<h2 id="本地环境配置"><a href="#本地环境配置" class="headerlink" title="本地环境配置"></a>本地环境配置</h2><ol>
<li><a href="https://www.jianshu.com/p/414ccd423efc" target="_blank" rel="noopener">Git安装</a></li>
<li><a href="https://blog.csdn.net/zjh_746140129/article/details/80460965" target="_blank" rel="noopener">Nodejs安装</a></li>
<li>Hexo安装<br>第一步和第二步安装完成后,进行一些操作<br>生成ssh公钥(<font color="#FF5722">公钥作用：设置SSH公钥认证，pull,push不需要每次都输入密码</font>)<br>桌面右键点击<font color="#FF5722">Git Bash Here</font>,在打开的页面输入<font color="#FF5722">ssh-keygen -t rsa</font>连续敲击回车三次</li>
</ol>
<p><img src="/blog/hexo/hexo_01.jpg" alt="hexo_01.jpg"><br>出现如下内容就证明就是成功<br><img src="/blog/hexo/hexo_02.jpg" alt="hexo_02.jpg"></p>
<h2 id="阿里云Centos环境配置"><a href="#阿里云Centos环境配置" class="headerlink" title="阿里云Centos环境配置"></a>阿里云Centos环境配置</h2><p>安装git</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">yum <span class="keyword">install</span> git</span><br></pre></td></tr></table></figure>

<p>创建Git账户</p>
<figure class="highlight armasm"><table><tr><td class="code"><pre><span class="line"><span class="keyword">adduser </span>git</span><br></pre></td></tr></table></figure>

<p>添加账户权限</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">chmod <span class="number">740</span> <span class="regexp">/etc/</span>sudoers</span><br><span class="line">vim <span class="regexp">/etc/</span>sudoers</span><br></pre></td></tr></table></figure>

<p>找到</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="comment">## Allow root to run any commands anywhere</span></span><br><span class="line"><span class="attribute">root</span>    <span class="literal">ALL</span>=(<span class="literal">ALL</span>)     <span class="literal">ALL</span></span><br></pre></td></tr></table></figure>

<p>添加以下内容、</p>
<figure class="highlight ada"><table><tr><td class="code"><pre><span class="line">git     <span class="keyword">ALL</span>=(<span class="keyword">ALL</span>)     <span class="keyword">ALL</span></span><br></pre></td></tr></table></figure>

<p>按ESC进入Command模式，然后输入<font color="#FF5722">:wq</font>回车保存并退出。</p>
<p>修改权限</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">chmod <span class="number">400</span> <span class="regexp">/etc/</span>sudoers</span><br></pre></td></tr></table></figure>

<p>切换至git用户</p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">su git</span></span><br></pre></td></tr></table></figure>

<p>创建 ~/.ssh 文件</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> ~/.ssh</span><br></pre></td></tr></table></figure>

<p>编辑~/.ssh/authorized_keys 文件,然后将生成的id_rsa.pub文件中的公钥复制到authorized_keys</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">vim ~<span class="regexp">/.ssh/</span>authorized_keys</span><br></pre></td></tr></table></figure>

<p>赋予权限</p>
<figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line">chmod <span class="number">755</span> ~</span><br><span class="line">chmod <span class="number">700</span> ~/.ssh</span><br><span class="line">chmod <span class="number">600</span> ~/.ssh/authorized_keys</span><br></pre></td></tr></table></figure>

<p>在本地git测试是否能免密登录git,其中server为填写自己的云主机IP，执行输入yes后不用密码就说明好了</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">ssh</span> -v git<span class="variable">@server</span></span><br></pre></td></tr></table></figure>

<p>创建目录</p>
<p>切换到到root账户,以catablog作为Git仓库目录</p>
<figure class="highlight maxima"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> /<span class="built_in">var</span>/catablog</span><br></pre></td></tr></table></figure>

<p>仓库所属用户改为git</p>
<figure class="highlight excel"><table><tr><td class="code"><pre><span class="line">chown -R g<span class="symbol">it:gi</span><span class="built_in">t</span> /<span class="built_in">var</span>/catablog</span><br><span class="line">chmod -R <span class="number">755</span> /<span class="built_in">var</span>/catablog</span><br></pre></td></tr></table></figure>

<p>blog作为网站根目录</p>
<figure class="highlight excel"><table><tr><td class="code"><pre><span class="line">mkdir /<span class="built_in">var</span>/www/blog</span><br><span class="line">chown -R g<span class="symbol">it:gi</span><span class="built_in">t</span> /<span class="built_in">var</span>/www/blog</span><br><span class="line">chmod -R <span class="number">755</span> /<span class="built_in">var</span>/www/blog</span><br></pre></td></tr></table></figure>

<p>然后创建一个裸的 Git 仓库</p>
<figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line"><span class="keyword">cd</span> var/catablog</span><br><span class="line">git init <span class="params">--bare</span> blog.git</span><br></pre></td></tr></table></figure>

<p>创建一个新的 Git 钩子,进入cd /var/catablog/blog.git/。新建一个新的钩子文件 post-receive。</p>
<p>创建新的钩子文件 <font color="#FF5722">post-receive</font></p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">touch post-receive</span></span><br></pre></td></tr></table></figure>

<p>编辑这文件</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">vim <span class="regexp">/var/</span>catablog<span class="regexp">/blog.git/</span>hooks<span class="regexp">/post-receive</span></span><br></pre></td></tr></table></figure>

<p>进入文件的编辑模式，在该文件中添加以下代码</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">git --work-tree=/var/www/blog --git-dir=/var/catablog/blog.git checkout -f</span><br></pre></td></tr></table></figure>

<p>按 Esc 键退出编辑模式，输入”:wq” 保存退出。</p>
<p>修改文件权限，为可执行权限</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">chown -R <span class="string">git:</span>git <span class="regexp">/var/</span>catablog<span class="regexp">/blog.git/</span>hooks/post-receive</span><br><span class="line">chmod +x <span class="regexp">/var/</span>catablog<span class="regexp">/blog.git/</span>hooks/post-receive</span><br></pre></td></tr></table></figure>

<p>Git 仓库搭建完成。</p>
<h3 id="配置Nginx"><a href="#配置Nginx" class="headerlink" title="配置Nginx"></a>配置Nginx</h3><p>使用宝塔面板来部署Nginx<br><a href="https://www.bt.cn/bbs/portal.php" target="_blank" rel="noopener">宝塔Linux官网</a></p>
<p>Linux面板6.0安装命令(暂时仅兼容Centos7.x，其它系统版本请安装5.9稳定版)</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">yum <span class="keyword">install</span> -y wget &amp;&amp; wget -O <span class="keyword">install</span>.sh http://download.bt.cn/<span class="keyword">install</span>/install_6.<span class="number">0</span>.sh &amp;&amp; bash <span class="keyword">install</span>.sh</span><br></pre></td></tr></table></figure>

<p>Linux面板6.0升级专业版:</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">curl http:<span class="regexp">//</span>download.bt.cn<span class="regexp">/install/u</span>pdate6.sh|bash</span><br></pre></td></tr></table></figure>

<p>稍等一会，等待升级<br>初次访问需要安装nginx<br>在页面中会出现访问地址、账户和密码，此处需要去云服务器中，在防火墙中将8888端口加入到规则中，否则会出现无法访问。<br>复制网址到浏览器中进行登录，登录成功后，选择Nginx的部署方案，静静等待部署。<br><img src="/blog/hexo/hexo_03.jpg" alt="hexo_03.jpg"><br>部署完成</p>
<p>点击网站-添加站点&gt;输入域名&gt;底部的PHP版本选择”纯静态”&gt;提交。<br><img src="/blog/hexo/hexo_04.jpg" alt="hexo_04.jpg"><br>网站创建完成后点击设置-配置文件</p>
<figure class="highlight axapta"><table><tr><td class="code"><pre><span class="line"><span class="keyword">server</span></span><br><span class="line">&#123;</span><br><span class="line">    listen <span class="number">80</span>;</span><br><span class="line">    <span class="meta"># server_name 填写自己的域名</span></span><br><span class="line">    server_name ali6.cn blog.ali6.cn;</span><br><span class="line">    <span class="keyword">index</span> <span class="keyword">index</span>.php <span class="keyword">index</span>.html <span class="keyword">index</span>.htm <span class="keyword">default</span>.php <span class="keyword">default</span>.htm <span class="keyword">default</span>.html;</span><br><span class="line">    <span class="meta"># 这里root填写自己的网站根目录，修改为/var/www/blog</span></span><br><span class="line">    root /var/www/blog;</span><br></pre></td></tr></table></figure>

<p>-保存<br><img src="/blog/hexo/hexo_05.png" alt="hexo_05.jpg"><br>点击设置-网站目录，修改为/var/www/blog ，保存<br><img src="/blog/hexo/hexo_06.jpg" alt="hexo_06.jpg"><br>重启宝塔面板服务</p>
<figure class="highlight armasm"><table><tr><td class="code"><pre><span class="line"><span class="symbol">service</span> <span class="keyword">bt </span>restart</span><br></pre></td></tr></table></figure>

<p>此时Centos7环境已经配置完整,然后Hexo的配置</p>
<h1 id="在本地环境安装部署Hexo"><a href="#在本地环境安装部署Hexo" class="headerlink" title="在本地环境安装部署Hexo"></a>在本地环境安装部署Hexo</h1><h2 id="Hexo部署"><a href="#Hexo部署" class="headerlink" title="Hexo部署"></a>Hexo部署</h2><p><a href="https://hexo.io/zh-cn/" target="_blank" rel="noopener">Hexo官网</a><br>建议去官网了解一下Hexo搭建的基本信息,如果已经了解可跳过</p>
<p>在自己的盘符下，创建一个blog文件夹，打开blog文件夹，在这个文件夹内右键点击Git Bash Here打开命令行终端。<br>执行如下命令</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">npm install hexo-cli -g</span><br><span class="line">hexo init </span><br><span class="line">npm install hexo server</span><br><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>

<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line"><span class="comment">#定义邮箱</span></span><br><span class="line">git<span class="built_in"> config </span>--global user.email <span class="string">"邮箱"</span> #更换为你的邮箱地址</span><br><span class="line"><span class="comment">#定义名称</span></span><br><span class="line">git<span class="built_in"> config </span>--global user.name <span class="string">"名称"</span> #自定义一个名称就行</span><br></pre></td></tr></table></figure>

<p>说明<br>用户名和邮箱地址的作用<br>用户名和邮箱地址是本地git客户端的一个变量</p>
<p>每次commit都会用用户名和邮箱纪录。<br>github的contributions统计就是按邮箱来统计的</p>
<h2 id="配置-config-yml"><a href="#配置-config-yml" class="headerlink" title="配置_config.yml"></a>配置_config.yml</h2><p>打开blog文件夹，打开_config.yml, 找到deploy</p>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="attribute">deploy</span>:</span><br><span class="line">  <span class="attribute">type</span>: git</span><br><span class="line">  #server改为你的服务IP地址或解析后的域名</span><br><span class="line">  <span class="attribute">catablog</span>: git<span class="variable">@server</span>:/var/catablog/blog.git</span><br><span class="line">  <span class="attribute">branch</span>: master</span><br></pre></td></tr></table></figure>

<p>进行保存。</p>
<p>在blog文件夹，在这个文件夹内右键点击<br><font color="#FF5722">Git Bash Here</font><br>打开命令行终端<br>执行如下命令</p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">hexo clean</span> </span><br><span class="line"><span class="attribute">hexo g -d</span></span><br></pre></td></tr></table></figure>

<p>等待部署，如果页面不出错显绿表示部署完成，浏览器输入域名或ip地址后就可以看到刚刚部署的Hexo博客了</p>
<h1 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h1><p>部署过程中，执行 hexo d发现部署出现如下图问题<br><img src="/blog/hexo/hexo07.png" alt="hexo07.png"><br>可能是因为权限问题,需要检查我们在上述的git操作部署是否使用了git用户操作，若是没有，需要给相应的目录更改用户组<br>使用</p>
<figure class="highlight excel"><table><tr><td class="code"><pre><span class="line">chown -R g<span class="symbol">it:gi</span><span class="built_in">t</span> /<span class="built_in">var</span>/catablog/</span><br></pre></td></tr></table></figure>

<p>这条命令递归的将repo目录及其子目录用户组设置为git。<br>同时使用</p>
<figure class="highlight excel"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">chown -R g<span class="symbol">it:gi</span><span class="built_in">t</span> /<span class="built_in">var</span>/www/blog</span><br></pre></td></tr></table></figure>

<p>这样即可解决此类问题</p>
<h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>我也是初次搭建接触Hexo和搭建，在网上也查询了很多的资料，此篇文章单纯的将自己的搭建步骤记录下来，防止以后忘记.</p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://www.jianshu.com/p/0f9dfa9c141b" target="_blank" rel="noopener">https://www.jianshu.com/p/0f9dfa9c141b</a></p>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL使用</title>
    <url>/Database/mysql.html</url>
    <content><![CDATA[ <br>
<a id="more"></a>

<p> 记录MySQL使用过程中的问题以及解决方法</p>
<h1 id="Mysql的varchar的排序"><a href="#Mysql的varchar的排序" class="headerlink" title="Mysql的varchar的排序"></a>Mysql的varchar的排序</h1><p> 有时候需要对varchar类型进行排序,则会失效,因为没有对varchar类型进行排序的操作,需要进行类型的转换即转换为int类型如下:<br> <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">	*</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">	<span class="keyword">table</span> </span><br><span class="line">	</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> (code+<span class="number">0</span>) <span class="keyword">DESC</span></span><br></pre></td></tr></table></figure></p>
<p>也可以使用Mysql的类型转换函数:CAST、CONVERT,函数可用来获取一个类型的值，并产生另一个类型的值。 </p>
<figure class="highlight excel"><table><tr><td class="code"><pre><span class="line">CAST(<span class="built_in">value</span> as <span class="built_in">type</span>);  </span><br><span class="line"><span class="built_in">CONVERT</span>(<span class="built_in">value</span>, <span class="built_in">type</span>); </span><br><span class="line"></span><br><span class="line">SELECT</span><br><span class="line">	*</span><br><span class="line">FROM</span><br><span class="line">	table </span><br><span class="line">	</span><br><span class="line"><span class="built_in">CONVERT</span> (<span class="built_in">code</span>, SIGNED) DESC</span><br></pre></td></tr></table></figure>

<p>这两函数的转换的类型是有限制的,可以使用以下值的其中一个</p>
<figure class="highlight ada"><table><tr><td class="code"><pre><span class="line">二进制，同带binary前缀的效果 : <span class="type">BINARY</span>    </span><br><span class="line">字符型，可带参数 : <span class="type">CHAR</span>()     </span><br><span class="line">日期 : <span class="type">DATE</span>     </span><br><span class="line">时间: TIME     </span><br><span class="line">日期时间型 : <span class="type">DATETIME</span>     </span><br><span class="line">浮点数 : <span class="type">DECIMAL</span>      </span><br><span class="line">整数 : <span class="type">SIGNED</span>     </span><br><span class="line">无符号整数 : <span class="type">UNSIGNED</span></span><br></pre></td></tr></table></figure>


<h1 id="mybatis中传入String类型参数的问题"><a href="#mybatis中传入String类型参数的问题" class="headerlink" title="mybatis中传入String类型参数的问题"></a>mybatis中传入String类型参数的问题</h1><p> 按照名称去查询,传入的是一个String类型的参数,查询的时候回出现错误</p>
<figure class="highlight vhdl"><table><tr><td class="code"><pre><span class="line">There <span class="keyword">is</span> no getter <span class="keyword">for</span> <span class="keyword">property</span> named <span class="symbol">'name</span>' <span class="keyword">in</span> <span class="symbol">'class</span> java.lang.<span class="built_in">String</span>'。</span><br></pre></td></tr></table></figure>

<p>原始的代码展示:</p>
<p>Dao层为</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"> <span class="comment"><span class="markdown">/**</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">     * </span>根据名称查询</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">     * </span>@param name</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">     * </span>@return</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="code">     */</span></span></span></span><br><span class="line"><span class="built_in">String</span> getName(<span class="built_in">String</span> name);</span><br></pre></td></tr></table></figure>

<p>Xml层</p>
<figure class="highlight vbnet"><table><tr><td class="code"><pre><span class="line">&lt;<span class="keyword">select</span> id=<span class="string">"getName"</span>  resultType=<span class="string">"String"</span>&gt;</span><br><span class="line">    <span class="keyword">SELECT</span></span><br><span class="line">    *</span><br><span class="line">    <span class="keyword">FROM</span> table a</span><br><span class="line">    <span class="keyword">where</span> a.name = <span class="meta">#&#123;name&#125;</span></span><br><span class="line">&lt;/<span class="keyword">select</span>&gt;</span><br></pre></td></tr></table></figure>

<p>错误原因:MyBatis不能解析String类型的参数,<br>解决的方法:在Dao层中给方法的参数添加@Param注解<br>修改后的Dao层</p>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据名称查询</span></span><br><span class="line"><span class="comment">     * @param name</span></span><br><span class="line"><span class="comment">     * @return</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="selector-tag">String</span> <span class="selector-tag">getName</span>(<span class="variable">@Param</span>(<span class="string">"name"</span>)String name);</span><br></pre></td></tr></table></figure>

<p>注意的是@Param(“name”)的参数必须和xml的参数要一致</p>
]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>mysql大数据量导入</title>
    <url>/Database/mysql_import_db.html</url>
    <content><![CDATA[ <br>
<a id="more"></a>

<h1 id="mysql大数据量导入"><a href="#mysql大数据量导入" class="headerlink" title="mysql大数据量导入"></a>mysql大数据量导入</h1><p>　　使用 <code>SQLDumpSplitter3</code>将sql文件进行切割</p>
<p>　　第一种 使用mysql workbench 工具进行导入</p>
<p>　　第二种 通过命令导入</p>
<p>　　步骤2：打开CMD命令</p>
<p>　　打开Windows的命令提示符（CMD）命令，方法是依次点击“开始”、“运行”、“CMD”。</p>
<p>　　步骤3：登录到MySQL服务器</p>
<p>　　在CMD中，使用如下命令登录到MySQL服务器：</p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">mysql -u username -p</span></span><br></pre></td></tr></table></figure>

<p>　　其中，“username”是MySQL服务器的用户名。输入此命令后，系统将提示输入密码，用户需要输入正确的密码才能登录到服务器。</p>
<p>　　步骤4：选择要使用的数据库</p>
<p>　　在登录到MySQL服务器后，用户需要选择要使用的数据库。可以使用如下命令选择“mydatabase”数据库：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">USE</span> <span class="title">mydatabase</span>;</span><br></pre></td></tr></table></figure>

<p>　　该命令将使MySQL使用“mydatabase”数据库，以便用户可以执行各种数据库操作。</p>
<p>　　步骤5：导入数据文件</p>
<p>　　在选择了要使用的数据库后，用户可以通过如下命令导入数据文件：</p>
<figure class="highlight haskell"><table><tr><td class="code"><pre><span class="line"><span class="type">SOURCE</span> <span class="type">C</span>:\<span class="class"><span class="keyword">data</span>.sql</span></span><br></pre></td></tr></table></figure>

<p>　　其中，“C:\data.sql”是数据文件的完整路径。执行此命令后，MySQL将读取并执行数据文件中的SQL语句。如果有任何错误，MySQL将在输出中显示错误信息。</p>
<p>　　运行代码：</p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">mysql -u root -p</span></span><br></pre></td></tr></table></figure>

<p>　　在下面的例子中，我们假设要将数据文件保存到“C:\data.sql”中。可以执行如下命令导入数据文件：</p>
<figure class="highlight fortran"><table><tr><td class="code"><pre><span class="line"><span class="keyword">USE</span> mydatabase;</span><br><span class="line">SOURCE C:\<span class="keyword">data</span>.sql</span><br></pre></td></tr></table></figure>

<p>　　这将读取并执行“C:\data.sql”文件中的SQL语句，并将数据导入到“mydatabase”数据库中。如果成功，用户可以使用其他命令查询和管理导入的数据</p>
<p>　　‍</p>
<p>　　‍</p>
<p>　　‍</p>
]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo静态博客搭建</title>
    <url>/Hexo/Hexo.html</url>
    <content><![CDATA[ <br>
<a id="more"></a>

<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p> 记录Hexo搭建过程以及后期修改,主题使用的是NexT 5.1.4</p>
<h1 id="Hexo搭建和NexT主题的修改"><a href="#Hexo搭建和NexT主题的修改" class="headerlink" title="Hexo搭建和NexT主题的修改"></a>Hexo搭建和NexT主题的修改</h1><h2 id="添加网页标题崩溃特效"><a href="#添加网页标题崩溃特效" class="headerlink" title="添加网页标题崩溃特效"></a>添加网页标题崩溃特效</h2><p> 在next\source\js\src\路径下增加collapse.js，创建完成后的路径为next\source\js\src\collapse.js然后在collapse.js中增加以下代码<br> <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 离开当前页面时修改网页标题，回到当前页面时恢复原来标题 */</span></span><br><span class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> OriginTitile = <span class="built_in">document</span>.title;</span><br><span class="line">  <span class="keyword">var</span> titleTime;</span><br><span class="line">  <span class="built_in">document</span>.addEventListener(<span class="string">'visibilitychange'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">document</span>.hidden) &#123;</span><br><span class="line">      $(<span class="string">'[rel="icon"]'</span>).attr(<span class="string">'href'</span>, <span class="string">"/favicon.ico"</span>);</span><br><span class="line">      $(<span class="string">'[rel="shortcut icon"]'</span>).attr(<span class="string">'href'</span>, <span class="string">"/favicon.ico"</span>);</span><br><span class="line">      <span class="built_in">document</span>.title = <span class="string">'╭(°A°`)╮ 页面崩溃啦 ~'</span>;</span><br><span class="line">      clearTimeout(titleTime);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      $(<span class="string">'[rel="icon"]'</span>).attr(<span class="string">'href'</span>, <span class="string">"/favicon.ico"</span>);</span><br><span class="line">      $(<span class="string">'[rel="shortcut icon"]'</span>).attr(<span class="string">'href'</span>, <span class="string">"/favicon.ico"</span>);</span><br><span class="line">      <span class="built_in">document</span>.title = <span class="string">'咦，页面又好了！'</span>;</span><br><span class="line">      titleTime = setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">document</span>.title = OriginTitile;</span><br><span class="line">      &#125;, <span class="number">2000</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p> 其中favicon.ico为个人站点的图标图标路径为next\source\images</p>
<p> ###如何引用<br> 在路径为next\layout\中找到_layout.swig文件中添加如下内容<br> <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"> <span class="comment">&lt;!--崩溃欺骗--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"/js/src/collapse.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<h1 id="增加相册"><a href="#增加相册" class="headerlink" title="增加相册"></a>增加相册</h1><h1 id="自定义排序-倒叙"><a href="#自定义排序-倒叙" class="headerlink" title="自定义排序(倒叙)"></a>自定义排序(倒叙)</h1><p>修改Hexo文件夹下的node_modules/hexo-generator-index/lib/generator.js<br>需要添加的代码：</p>
<figure class="highlight coq"><table><tr><td class="code"><pre><span class="line">posts.data = posts.data.sort(function(a, b) &#123;</span><br><span class="line">    <span class="keyword">if</span> (a.<span class="built_in">top</span> &amp;&amp; b.<span class="built_in">top</span>) &#123; // 两篇文章<span class="built_in">top</span>都有定义</span><br><span class="line">      <span class="keyword">if</span> (a.<span class="built_in">top</span> == b.<span class="built_in">top</span>) <span class="keyword">return</span> b.date - a.date; // 若<span class="built_in">top</span>值一样则按照文章日期降序排</span><br><span class="line">      <span class="keyword">else</span> <span class="keyword">return</span> b.<span class="built_in">top</span> - a.<span class="built_in">top</span>; // 否则按照<span class="built_in">top</span>值降序排</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (a.<span class="built_in">top</span> &amp;&amp; !b.<span class="built_in">top</span>) &#123; // 以下是只有一篇文章<span class="built_in">top</span>有定义，那么将有<span class="built_in">top</span>的排在前面（这里用异或操作居然不行<span class="number">233</span>）</span><br><span class="line">      <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!a.<span class="built_in">top</span> &amp;&amp; b.<span class="built_in">top</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">return</span> b.date - a.date; // 都没定义按照文章日期降序排</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure>

<p> generator.js全部内容</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="meta">'use strict'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> pagination = <span class="built_in">require</span>(<span class="string">'hexo-pagination'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span>(<span class="params">locals</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> config = <span class="keyword">this</span>.config;</span><br><span class="line">  <span class="keyword">var</span> posts = locals.posts.sort(config.index_generator.order_by);</span><br><span class="line">  <span class="keyword">var</span> paginationDir = config.pagination_dir || <span class="string">'page'</span>;</span><br><span class="line">  <span class="keyword">var</span> path = config.index_generator.path || <span class="string">''</span>;</span><br><span class="line">  posts.data = posts.data.sort(<span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (a.top &amp;&amp; b.top) &#123; <span class="comment">// 两篇文章top都有定义</span></span><br><span class="line">      <span class="keyword">if</span> (a.top == b.top) <span class="keyword">return</span> b.date - a.date; <span class="comment">// 若top值一样则按照文章日期降序排</span></span><br><span class="line">      <span class="keyword">else</span> <span class="keyword">return</span> b.top - a.top; <span class="comment">// 否则按照top值降序排</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (a.top &amp;&amp; !b.top) &#123; <span class="comment">// 以下是只有一篇文章top有定义，那么将有top的排在前面（这里用异或操作居然不行233）</span></span><br><span class="line">      <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!a.top &amp;&amp; b.top) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">return</span> b.date - a.date; <span class="comment">// 都没定义按照文章日期降序排</span></span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> pagination(path, posts, &#123;</span><br><span class="line">    perPage: config.index_generator.per_page,</span><br><span class="line">    layout: [<span class="string">'index'</span>, <span class="string">'archive'</span>],</span><br><span class="line">    format: paginationDir + <span class="string">'/%d/'</span>,</span><br><span class="line">    data: &#123;</span><br><span class="line">      __index: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>








]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Oracle之memory_target、memory_max_target、sga_target、sga_max_size学习</title>
    <url>/Database/oracle.html</url>
    <content><![CDATA[ <br>
<a id="more"></a>

<h1 id="Oracle之memory-target、memory-max-target、sga-target、sga-max-size学习"><a href="#Oracle之memory-target、memory-max-target、sga-target、sga-max-size学习" class="headerlink" title="Oracle之memory_target、memory_max_target、sga_target、sga_max_size学习"></a>Oracle之memory_target、memory_max_target、sga_target、sga_max_size学习</h1><p>　　一、MEMORY_MAX_TARGET<br>1、表示oracle实例的可以达到的最大内存大小（即可以使用操作系统内存的最大值）；<br>2、静态参数，修改后需重启生效；<br>3、如果没有设置memory_max_target参数，那么会自动取memory_target的参数值；<br>4、默认值为系统的shm的值，而shm值为系统物理内存的一半。</p>
<p>　　二、MEMORY_TARGET<br>1、表示oracle实例使用的实际内存大小，不能大于memory_max_target;<br>2、动态参数，可以随时修改；<br>3、如果memory_target设为非0，则表示启用AMM。如设为0，则表示不启用自动内存管理(AMM)；<br>4、要改大memory_target需要先调整shm的值，然后修改memory_max_target，最后调整memory_target。</p>
<p>　　三、SGA_MAX_SIZE<br>1、表示SGA可以达到的最大内存大小；<br>2、静态参数，修改后需重启生效。</p>
<p>　　四、SGA_TARGET<br>1、表示SGA实际使用的实际内存大小，不能大于sga_max_size;<br>2、动态参数，可以随时修改；<br>3、如果sga_target设为0，则表示不启用自动共享内存管理（ASMM)，所有相关的内存组件需要手动设定大小（前提，在也不开启AMM的情况下）</p>
<p>　　五、memory_target设置和不设置对SGA/PGA的影响<br>1、如果memory_target设置为非0值（则表示启动用自动内存管理AMM）</p>
<p>　　情况1：sga_target和pga_aggregate_target已经设置大小，则这两个参数自动调整的值将不小于设置的大小<br>memory_target = sga_target + pga_aggregate_target</p>
<p>　　情况2：sga_target设置大小，pga_aggregate_target没有设置大小<br>那么pga_aggregate_target初始化值=memory_target-sga_target</p>
<p>　　情况3：sga_target没有设置大小，pga_aggregate_target设置大小<br>那么sga_target初始化值=memory_target-pga_aggregate_target</p>
<p>　　情况4：sga_target和pga_aggregate_target都没有设置大小<br>Oracle将根据数据库运行状况进行分配大小。但在数据库启动时会有默认比例：<br>sga_target = memory_target60%<br>pga_aggregate_target = memory_target40%</p>
<p>　　2、如果memory_target没有设置或 = 0(在11g中默认为0)<br>情况1：sga_target设置大小(ASMM)<br>自动调节SGA中的shared pool、buffer cache、redo log buffer、java pool、larger pool等内存大小。<br>PGA则由pga_aggregate_target的大小决定。<br>sga和pga不能自动增长和自动缩小。</p>
<p>　　情况2：sga_target和pga_aggregate_target都没有设置<br>SGA中的各组件大小都要明确设定，不能自动调整各组件大小。<br>PGA不能自动增长和收缩。</p>
<p>　　六、AMM与ASMM区别<br>区别：<br>AMM (Automatic Memory Management)自动内存管理；(11G才有的特性）<br>ASMM(Automatic shared Memory Management）自动共享内存管理；（10G有的特性）<br>AMM不支持HugePage，而ASMM支持HugePage；<br>AMM让数据库完全管理SGA、PGA的大小；<br>ASMM只能管理SGA的大小。</p>
<p>　　启用AMM：<br>将MEMORY_TARGET设为非0值，则启用。会自动调整SGA、PGA。<br>注：如果手动也设置了SGA、PGA，则表示自动调整时不小于手动设定的值。</p>
<p>　　启用ASMM:<br>将MEMORY_TARGET设为0，SGA_TARGET设为非0，STATISTICS_LEVEL参数设置为TYPICAL（默认值）或者ALL才能启用ASMM功能。</p>
<p>　　七、修改/dev/shm大小<br>ORACLE 从11g 版本开始，引入了一个自动内存管理(Automatic Memory Management)特性，该特性需要更多的共享内存(/dev/shm)，因此如果决定应用该特性的话， 必须要确保共享内存大于ORACLE 中初始化参数MEMORY_MAX_TARGET 和MEMORY_TARGET(特别提示，这两个参数即自动内存管理特性对应的初始化参数)的值。<br>如果memory_max_target/memory_target设置过大，可能导致instance无法启动，报ORA-00845错误。</p>
<p>　　修改/etc/fstab中tmpfs对应的行；将原来的<br>tmpfs /dev/shm tmpfs defaults,size=1024M 0 0<br>改成tmpfs /dev/shm tmpfs default,size=80g 0 0<br>这样tmpfs增大为1G,<br>重新mount /dev/shm使之生效。<br>mount -o remount /dev/shm</p>
<p>　　—1. 永久<br>vi /etc/fstab</p>
<p>　　1)查看大小<br>df -h /dev/shm<br> 2)修改大小<br>vi /etc/fstab<br>tmpfs /dev/shm tmpfs defaults,size=4096M 0 0<br>3)重新挂载<br>umount /dev/shm</p>
<p>　　mount /dev/shm<br>4)查看修改后的大小<br>df -h /dev/shm</p>
<p>　　–临时<br>vi /etc/fstab</p>
<p>　　mount -o remount,size=85g /dev/shm<br>mount -t tmpfs shmfs -o size=85g /dev/shm</p>
<p>　　八、其他相关<br>/etc/sysctl.conf<br>SHMMAX参数：Linux进程可以分配的单独共享内存段的最大值。一般设置为内存总大小的一半。这个值的设置应该大于SGA_MAX_TARGET或MEMORY_MAX_TARGET的值，因此对于安装Oracle数据库的系统，shmmax的值应该比内存的二分之一大一些。</p>
<p>　　shmall参数：是全部允许使用的共享内存大小，shmmax 是单个段允许使用的大小。这两个可以设置为内存的 90%。例如 16G 内存，16 * 1024 * 1024 * 1024 * 90% = 15461882265，shmall 的大小为 15461882265/4k(getconf PAGESIZE可得到) = 3774873。</p>
<p>　　九、总结<br>10G时，可以将ORACLE开启ASMM，自动管理SGA；11G时，可以将ORACLE开启AMM,自动调整SGA、PGA。当然也该可以改回AMM。如果需要使用HugePage，则需开启ASMM。配合一些ORACLE自带的建议表（如v$sga_target_advice等)，可以更好的分配内存。</p>
]]></content>
      <categories>
        <category>Oracle</category>
      </categories>
      <tags>
        <tag>Oracle</tag>
      </tags>
  </entry>
  <entry>
    <title>即时通讯-生产环境的部署(完结)</title>
    <url>/IM/Im_Deploy.html</url>
    <content><![CDATA[ <br>
<a id="more"></a>

<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p> 即时通讯的基础功能开发完成后,最终是需要部署到生产环境中的，但是在实际的部署过程后经过测试后是无法进行通讯,通过对问题的分析后发现，原来在生产环境中前后端服务无法进行握手操作。<br> 因为服务端启动的时候配置IP地址为本机的IP地址(服务器的IP地址)，而客户端Websocket是IP地址映射后的互联网地址,由于在开发环境测试的时候是在同一个局域网中，不存在影响。<br> 但是部署到线上,会存在前后端服务无法进行握手操作,经过资料的查询得知可以用Nginx进行解决,<br> 经过具体实践操作后解决了上述问题，本篇文章就做一个记录。</p>
<h1 id="解决过程"><a href="#解决过程" class="headerlink" title="解决过程"></a>解决过程</h1><p> Websocket握手操作之前的请求是http请求,经过协议升级将http协议升级到websocket协议,根据可以看出来WebSocket是基于Http协议的<br> <figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">Accept-Encoding:</span><span class="string">gzip,</span> <span class="string">deflate,</span> <span class="string">br</span></span><br><span class="line"><span class="attr">Accept-Language:</span><span class="string">zh-CN,zh;q=0.9</span></span><br><span class="line"><span class="attr">Cache-Control:</span><span class="literal">no</span><span class="bullet">-cache</span></span><br><span class="line"><span class="attr">Connection:</span><span class="string">Upgrade</span></span><br><span class="line"><span class="attr">Host:</span><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:8089</span></span><br><span class="line"><span class="attr">Origin:</span><span class="attr">http://localhost:8085</span></span><br><span class="line"><span class="attr">Pragma:</span><span class="literal">no</span><span class="bullet">-cache</span></span><br><span class="line"><span class="attr">Sec-WebSocket-Extensions:</span><span class="string">permessage-deflate;</span> <span class="string">client_max_window_bits</span></span><br><span class="line"><span class="attr">Sec-WebSocket-Key:</span><span class="string">x0VGUzvDx0sckOzd7fjdTw==</span></span><br><span class="line"><span class="attr">Sec-WebSocket-Version:</span><span class="number">13</span></span><br><span class="line"><span class="attr">Upgrade:</span><span class="string">websocket</span></span><br><span class="line"><span class="attr">User-Agent:</span><span class="string">Mozilla/5.0</span> <span class="string">(Windows</span> <span class="string">NT</span> <span class="number">10.0</span><span class="string">;</span> <span class="string">WOW64)</span> <span class="string">AppleWebKit/537.36</span> <span class="string">(KHTML,</span> <span class="string">like</span> <span class="string">Gecko)</span> <span class="string">Chrome/63.0.3239.132</span> <span class="string">Safari/537.36</span></span><br></pre></td></tr></table></figure></p>
<p>观察上面的请求头(Request Headers)发现这段类似HTTP协议的握手请求中，多了几个东西。</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">Upgrade: websocket</span><br><span class="line">Connection: Upgrade</span><br><span class="line">Sec-WebSocket-Key: <span class="attribute">x0VGUzvDx0sckOzd7fjdTw</span>==</span><br><span class="line">Sec-WebSocket-Protocol: chat, superchat</span><br><span class="line">Sec-WebSocket-Version: 13</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>字段名</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>Upgrade：Upgrade</td>
<td>协议升级为WebSocket协议</td>
</tr>
<tr>
<td>Connection：Upgrade</td>
<td>标识该HTTP请求是一个协议升级请求</td>
</tr>
</tbody></table>
<p>Sec-WebSocket-Key: x0VGUzvDx0sckOzd7fjdTw== | 客户端采用base64编码的24位随机字符序列<br>Sec-WebSocket-Protocol: chat, superchat | 协议扩展类型<br>Sec-WebSocket-Version: 13 |     客户端支持WebSocket的版本<br>response headers响应头</p>
<figure class="highlight avrasm"><table><tr><td class="code"><pre><span class="line"><span class="symbol">connection:</span>Upgrade</span><br><span class="line">content-length:<span class="number">0</span></span><br><span class="line"><span class="symbol">date:</span>Wed, <span class="number">18</span> <span class="keyword">Dec</span> <span class="number">2019</span> <span class="number">14</span>:<span class="number">49</span>:<span class="number">36</span> GMT</span><br><span class="line"><span class="keyword">sec</span>-websocket-accept:NVOpSRay3PH8WXv7nkfFOsi15i4=</span><br><span class="line"><span class="symbol">server:</span>t-io</span><br><span class="line"><span class="symbol">upgrade:</span>websocket</span><br></pre></td></tr></table></figure>

<p>sec-websocket-accept：服务器接受客户端HTTP协议升级的证明。<br>表示已经接受到请求协议切换成功，成功建立Websocket。HTTP已经完成了它的任务,后面就按照Websocket协议进行。<br>关于HTTP协议和Websocket协议搞清楚后,下面就进入到Nginx的配置中啦。</p>
<h1 id="Nginx配置"><a href="#Nginx配置" class="headerlink" title="Nginx配置"></a>Nginx配置</h1><p>对于Nginx的教程网上有很多的，可以自行百度查询，此处我贴出自己的配置</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="attribute">location</span> / &#123;</span><br><span class="line">			 <span class="attribute">proxy_pass</span> http://127.0.0.1:8089;</span><br><span class="line">			 <span class="attribute">proxy_http_version</span> <span class="number">1</span>.<span class="number">1</span>;</span><br><span class="line">			 <span class="attribute">proxy_set_header</span> Upgrade <span class="variable">$http_upgrade</span>;</span><br><span class="line">			<span class="attribute">proxy_set_header</span> X-Real-IP <span class="variable">$remote_addr</span>;</span><br><span class="line">			 <span class="attribute">proxy_set_header</span> Connection <span class="string">"Upgrade"</span>;</span><br><span class="line">			</span><br><span class="line">         &#125;</span><br></pre></td></tr></table></figure>

<p>Nginx 代理 WebSocket 的要点是设置Upgrade和Connection响应头</p>
<p>proxy_pass 要代理到的url<br>proxy_http_version  代理时使用的http版本<br>proxy_set_header 如果请求头中有Upgrade，就直接设置到响应头中，并把Connection设置为upgrade。<br>proxy_set_header X-Real-IP 给代理设置原http请求的ip,填写$remote_addr 即可<br>proxy_set_header Connection 因为代理的ws协议,所以http请求头的Connection设置为Upgrade<br>至此,Nginx反向代理WebSocket的配置就完成了,重启Nginx,用Websocket连接试试，<br>如果Websocket成功连接,说明Nginx反向代理Websocket已经成功了。<br>说明:<br>客户端的Websocket地址填写上解析后的域名 ws://xxxx/ xxxx为解析后的域名不需要http://</p>
<p>比如连接Websocket的IP地址和端口为8089为xxxx:8089,那么我在使用Sunny-Ngrok做内网穿透的时候的配置如下<br>dream.xxxxx.com为外网访问的域名也可以看作是解析后的域名。<br>客户端配置Websocket的配置中直接填写http://后面的就可以。</p>
<h1 id="本机电脑上测试"><a href="#本机电脑上测试" class="headerlink" title="本机电脑上测试"></a>本机电脑上测试</h1><p>由于本机电脑为局域网,需要模拟真实的生产环境的话就需要需要内网穿透服务<br>我使用了两个内网穿透服务<br>一个绑定的是项目本身,一个绑定Websocket的IP和端口。<br><a href="http://www.ngrok.cc/" target="_blank" rel="noopener">Sunny-Ngrok</a><br><a href="https://www.u.tools/" target="_blank" rel="noopener">utools</a>中的提供的内网穿透服务<br>使用utools工具提供的内网穿透服务绑定项目<br>截图<br>Sunny-Ngrok绑定Websocket的IP和端口<br>截图<br>内网穿透完成后,启动Nginx服务,域名访问项目,登录账户,进行测试，如果可以收到消息,证明没有问题。</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p> 关于即时通讯项目已经完成了,后续如果有修改的会进行更新</p>
]]></content>
      <categories>
        <category>IM</category>
      </categories>
      <tags>
        <tag>IM</tag>
      </tags>
  </entry>
  <entry>
    <title>即时通讯-LayIM(二)</title>
    <url>/IM/Im_Layim.html</url>
    <content><![CDATA[ <br>
<a id="more"></a>

<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p> 前端展示页面我选择了<a href="http://layim.layui.com/" target="_blank" rel="noopener">LayIM</a>,原因嘛 好看的UI页面,完善的文档,完成度非常高的封装,不需要考虑前端的东西,将重心放在后端的业务实现。<br> 以下是对LayIM的部分展示,已经文档的一些我自己的见解,部分内容来自于<a href="http://layim.layui.com/" target="_blank" rel="noopener">LayIM官网</a>和<a href="https://www.layui.com/doc/modules/layim.html" target="_blank" rel="noopener">开发文档</a><br> 特别说明:LayIM是收费的</p>
<h1 id="LayIM的体验"><a href="#LayIM的体验" class="headerlink" title="LayIM的体验"></a>LayIM的体验</h1><p> 这是LayIM加载完成后的页面<br><img src="/blog/im/layim01.jpg" alt></p>
<h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><p>前端页面的引入</p>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">layui</span><span class="selector-class">.use</span>(<span class="string">'layim'</span>, function(layim)&#123;</span><br><span class="line">  <span class="comment">//基础配置</span></span><br><span class="line">  <span class="selector-tag">layim</span><span class="selector-class">.config</span>(&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="attribute">init</span>: &#123;&#125; <span class="comment">//获取主面板列表信息，下文会做进一步介绍</span></span><br><span class="line"> </span><br><span class="line">    <span class="comment">//获取群员接口（返回的数据格式见下文）</span></span><br><span class="line">    ,<span class="attribute">members</span>: &#123;</span><br><span class="line">      <span class="attribute">url</span>: <span class="string">''</span> <span class="comment">//接口地址（返回的数据格式见下文）</span></span><br><span class="line">      ,<span class="attribute">type</span>: <span class="string">'get'</span> <span class="comment">//默认get，一般可不填</span></span><br><span class="line">      ,<span class="attribute">data</span>: &#123;&#125; <span class="comment">//额外参数</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//上传图片接口（返回的数据格式见下文），若不开启图片上传，剔除该项即可</span></span><br><span class="line">    ,<span class="attribute">uploadImage</span>: &#123;</span><br><span class="line">      <span class="attribute">url</span>: <span class="string">''</span> <span class="comment">//接口地址</span></span><br><span class="line">      ,<span class="attribute">type</span>: <span class="string">'post'</span> <span class="comment">//默认post</span></span><br><span class="line">    &#125; </span><br><span class="line">    </span><br><span class="line">    <span class="comment">//上传文件接口（返回的数据格式见下文），若不开启文件上传，剔除该项即可</span></span><br><span class="line">    ,<span class="attribute">uploadFile</span>: &#123;</span><br><span class="line">      <span class="attribute">url</span>: <span class="string">''</span> <span class="comment">//接口地址</span></span><br><span class="line">      ,<span class="attribute">type</span>: <span class="string">'post'</span> <span class="comment">//默认post</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//扩展工具栏，下文会做进一步介绍（如果无需扩展，剔除该项即可）</span></span><br><span class="line">    ,<span class="attribute">tool</span>: [&#123;</span><br><span class="line">      <span class="attribute">alias</span>: <span class="string">'code'</span> <span class="comment">//工具别名</span></span><br><span class="line">      ,<span class="attribute">title</span>: <span class="string">'代码'</span> <span class="comment">//工具名称</span></span><br><span class="line">      ,<span class="attribute">icon</span>: <span class="string">'&amp;#xe64e;'</span> <span class="comment">//工具图标，参考图标文档</span></span><br><span class="line">    &#125;]</span><br><span class="line">    </span><br><span class="line">    ,<span class="attribute">msgbox</span>: layui.cache.dir + <span class="string">'css/modules/layim/html/msgbox.html'</span> <span class="comment">//消息盒子页面地址，若不开启，剔除该项即可</span></span><br><span class="line">    ,<span class="attribute">find</span>: layui.cache.dir + <span class="string">'css/modules/layim/html/find.html'</span> <span class="comment">//发现页面地址，若不开启，剔除该项即可</span></span><br><span class="line">    ,<span class="attribute">chatLog</span>: layui.cache.dir + <span class="string">'css/modules/layim/html/chatlog.html'</span> <span class="comment">//聊天记录页面地址，若不开启，剔除该项即可</span></span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>返回的数据格式为JSON格式</p>
<figure class="highlight 1c"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"code"</span>: <span class="number">0</span> <span class="comment">//0表示成功，其它表示失败</span></span><br><span class="line">  ,<span class="string">"msg"</span>: <span class="string">""</span> <span class="comment">//失败信息</span></span><br><span class="line">  ,<span class="string">"data"</span>: &#123;</span><br><span class="line">  </span><br><span class="line">    <span class="comment">//我的信息</span></span><br><span class="line">    <span class="string">"mine"</span>: &#123;</span><br><span class="line">      <span class="string">"username"</span>: <span class="string">"纸飞机"</span> <span class="comment">//我的昵称</span></span><br><span class="line">      ,<span class="string">"id"</span>: <span class="string">"100000"</span> <span class="comment">//我的ID</span></span><br><span class="line">      ,<span class="string">"status"</span>: <span class="string">"online"</span> <span class="comment">//在线状态 online：在线、hide：隐身</span></span><br><span class="line">      ,<span class="string">"sign"</span>: <span class="string">"在深邃的编码世界，做一枚轻盈的纸飞机"</span> <span class="comment">//我的签名</span></span><br><span class="line">      ,<span class="string">"avatar"</span>: <span class="string">"a.jpg"</span> <span class="comment">//我的头像</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//好友列表</span></span><br><span class="line">    ,<span class="string">"friend"</span>: [&#123;</span><br><span class="line">      <span class="string">"groupname"</span>: <span class="string">"前端码屌"</span> <span class="comment">//好友分组名</span></span><br><span class="line">      ,<span class="string">"id"</span>: <span class="number">1</span> <span class="comment">//分组ID</span></span><br><span class="line">      ,<span class="string">"list"</span>: [&#123; <span class="comment">//分组下的好友列表</span></span><br><span class="line">        <span class="string">"username"</span>: <span class="string">"贤心"</span> <span class="comment">//好友昵称</span></span><br><span class="line">        ,<span class="string">"id"</span>: <span class="string">"100001"</span> <span class="comment">//好友ID</span></span><br><span class="line">        ,<span class="string">"avatar"</span>: <span class="string">"a.jpg"</span> <span class="comment">//好友头像</span></span><br><span class="line">        ,<span class="string">"sign"</span>: <span class="string">"这些都是测试数据，实际使用请严格按照该格式返回"</span> <span class="comment">//好友签名</span></span><br><span class="line">        ,<span class="string">"status"</span>: <span class="string">"online"</span> <span class="comment">//若值为offline代表离线，online或者不填为在线</span></span><br><span class="line">      &#125;, …… ]</span><br><span class="line">    &#125;, …… ]</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//群组列表</span></span><br><span class="line">    ,<span class="string">"group"</span>: [&#123;</span><br><span class="line">      <span class="string">"groupname"</span>: <span class="string">"前端群"</span> <span class="comment">//群组名</span></span><br><span class="line">      ,<span class="string">"id"</span>: <span class="string">"101"</span> <span class="comment">//群组ID</span></span><br><span class="line">      ,<span class="string">"avatar"</span>: <span class="string">"a.jpg"</span> <span class="comment">//群组头像</span></span><br><span class="line">    &#125;, …… ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol>
<li>code:返回的状态，其中0表示成功，其它表示失败</li>
<li>msg:返回的消息</li>
<li>data:返回的数据</li>
<li>mine:当前登录人的个人信息,包括签名、头像等信息</li>
<li>friend:好友列表</li>
<li>group:群组列表</li>
</ol>
<p>详细的解释可以官网的文档，写的真的很详细。<br>而且还有移动端的展示<br><img src="/blog/im/layim02.jpg" alt></p>
<h1 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h1><p>仅仅为了展示LayIM的魅力，就不进行具体的展示效果了,有基础的看看文档就一目了然。<br>推荐一个前端 UI 框架<a href="https://www.layui.com/" target="_blank" rel="noopener">Layui</a>, LayIM是<a href="https://www.layui.com/" target="_blank" rel="noopener">Layui</a>中的一个收费模块<br>更多的<a href="https://fly.layui.com/jie/3244/" target="_blank" rel="noopener">LayIM接入案例</a></p>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="http://layim.layui.com/" target="_blank" rel="noopener">LayIM官网</a><br><a href="https://www.layui.com/doc/modules/layim.html#start" target="_blank" rel="noopener">LayIM开发文档</a></p>
]]></content>
      <categories>
        <category>IM</category>
      </categories>
      <tags>
        <tag>IM</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL Workbench报错问题解决</title>
    <url>/Database/MySQL%20Workbench.html</url>
    <content><![CDATA[  <br>
<a id="more"></a>

<h1 id="MySQL-Workbench-8-0-点击Server-Status面板Could-not-acquire-management-access-for-administration报错问题解决"><a href="#MySQL-Workbench-8-0-点击Server-Status面板Could-not-acquire-management-access-for-administration报错问题解决" class="headerlink" title="MySQL Workbench 8.0 点击Server Status面板Could not acquire management access for administration报错问题解决"></a>MySQL Workbench 8.0 点击Server Status面板Could not acquire management access for administration报错问题解决</h1><p>　　‍</p>
<p>　　‍</p>
<p>　　win10安装MySQL Workbench 8.0后连接MySQL服务器后，点击Server Status状态面板报错，<br>错误如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Could not acquire management access <span class="keyword">for</span> administration</span><br><span class="line">TRuntimeError: Target host is configured as Windows, but seems to be a different OS. Please review the connection settings.</span><br></pre></td></tr></table></figure>

<p>　　<img src="https://iops.top/usr/uploads/2022/08/196930969.png" alt="error.png" title="error.png"></p>
<p>　　解决方法：<br>是因为windows中文桌面默认编码问题，<br>修改安装目录C:\Program Files\MySQL\MySQL Workbench 8.0 CE\workbench下的os_utils.py文件约356行，<br>默认是：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">process = subprocess.Popen(command, stdin = subprocess.PIPE, encoding=<span class="string">"utf-8"</span>, stdout = subprocess.PIPE, stderr = subprocess.STDOUT, shell=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure>

<p>　　修改为如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">process = subprocess.Popen(command, stdin = subprocess.PIPE, encoding=<span class="string">"gbk"</span>, stdout = subprocess.PIPE, stderr = subprocess.STDOUT, shell=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure>

<p>　　即把utf-8修改为gbk保存即可，重新打开 MySQL Workbench即可查看Server Status。</p>
]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>Oracle初始化参数之memory_target</title>
    <url>/Database/oracle_memory_target.html</url>
    <content><![CDATA[ <br>
<a id="more"></a>

<h1 id="Oracle初始化参数之memory-target"><a href="#Oracle初始化参数之memory-target" class="headerlink" title="Oracle初始化参数之memory_target"></a>Oracle初始化参数之memory_target</h1><p>　　‍</p>
<p>　　<strong>一、引言：</strong></p>
<p>　　Oracle 9i引入pga_aggregate_target，可以自动对PGA进行调整；</p>
<p>　　Oracle 10g引入sga_target，可以自动对SGA进行调整；</p>
<p>　　Oracle 11g则对这两部分进行综合，引入memory_target，可以自动调整所有的内存，这就是新引入的自动内存管理特性。</p>
<p>　　<strong>二、本文说明：</strong></p>
<p>　　操作系统：rhel 5.4 x32</p>
<p>　　数据库：oracle 11g r2</p>
<p>　　<strong>三、memory_target的介绍：</strong></p>
<p>　　**  3.1、下面通过示例了解一下memory_target的设置与PGA和SGA关系：**</p>
<p>　　‍</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">SQL&gt; show parameter memory_target;</span><br><span class="line"> </span><br><span class="line">NAME                    <span class="built_in"> TYPE </span>    VALUE</span><br><span class="line">------------------------------------ ----------- ------------------------------</span><br><span class="line">memory_target                 big integer 316M</span><br><span class="line">SQL&gt; show sga;</span><br><span class="line"> </span><br><span class="line">Total<span class="built_in"> System </span>Global<span class="built_in"> Area </span> 330600448 bytes</span><br><span class="line">Fixed Size            1336344 bytes</span><br><span class="line">Variable Size          247466984 bytes</span><br><span class="line">Database Buffers       75497472 bytes</span><br><span class="line">Redo Buffers            6299648 bytes</span><br><span class="line">SQL&gt; alter<span class="built_in"> system </span><span class="builtin-name">set</span> <span class="attribute">memory_target</span>=200m <span class="attribute">scope</span>=spfile;</span><br><span class="line"> </span><br><span class="line">System altered.</span><br><span class="line"> </span><br><span class="line">SQL&gt; alter<span class="built_in"> system </span><span class="builtin-name">set</span> <span class="attribute">sga_target</span>=0 <span class="attribute">scope</span>=spfile;</span><br><span class="line"> </span><br><span class="line">System altered.</span><br><span class="line"> </span><br><span class="line">SQL&gt; alter<span class="built_in"> system </span><span class="builtin-name">set</span> <span class="attribute">pga_aggregate_target</span>=0 <span class="attribute">scope</span>=spfile;</span><br><span class="line"> </span><br><span class="line">System altered.</span><br><span class="line"> </span><br><span class="line">SQL&gt; shutdown immediate;</span><br><span class="line">Database closed.</span><br><span class="line">Database dismounted.</span><br><span class="line">ORACLE<span class="built_in"> instance </span>shut down.</span><br><span class="line">SQL&gt; startup</span><br><span class="line">ORACLE<span class="built_in"> instance </span>started.</span><br><span class="line"> </span><br><span class="line">Total<span class="built_in"> System </span>Global<span class="built_in"> Area </span> 209235968 bytes</span><br><span class="line">Fixed Size            1335528 bytes</span><br><span class="line">Variable Size          201330456 bytes</span><br><span class="line">Database Buffers        4194304 bytes</span><br><span class="line">Redo Buffers            2375680 bytes</span><br><span class="line">Database mounted.</span><br><span class="line">Database opened.</span><br></pre></td></tr></table></figure>

<p>　　设置memory_target参数后，实际上Oracle会自动设置并调整一下两个参数来分配SGA和PGA的内存，这和Oracle 10g自动设置sga_target后分配db_cache_size和shared_pool_size的机制是一样的。</p>
<p>　　‍</p>
<figure class="highlight sqf"><table><tr><td class="code"><pre><span class="line">SQL&gt; col ksppinm <span class="keyword">for</span> a20;</span><br><span class="line">SQL&gt; col ksppstvl <span class="keyword">for</span> a20;</span><br><span class="line">SQL&gt; <span class="built_in">select</span> a.ksppinm <span class="built_in">name</span>,b.ksppstvl value</span><br><span class="line">  <span class="number">2</span>     <span class="keyword">from</span> x$ksppi a,x$ksppcv b</span><br><span class="line">  <span class="number">3</span>   where a.indx = b.indx</span><br><span class="line">  <span class="number">4</span>      <span class="built_in">and</span> (a.ksppinm like <span class="string">'%sga_target%'</span></span><br><span class="line">  <span class="number">5</span>  <span class="built_in">or</span> a.ksppinm like <span class="string">'%pga_aggregate_target%'</span>);</span><br><span class="line"> </span><br><span class="line"><span class="built_in">NAME</span>                                VALUE</span><br><span class="line">-----------------------     -------------------</span><br><span class="line">sga_target                           <span class="number">0</span></span><br><span class="line"><span class="variable">__sga_target</span>                     <span class="number">142606336</span></span><br><span class="line">pga_aggregate_target                 <span class="number">0</span></span><br><span class="line"><span class="variable">__pga_aggregate_target</span>            <span class="number">67108864</span></span><br></pre></td></tr></table></figure>

<p>　　<strong>3.2、讨论一下11g中memory_target设置和不设置对SGA/PGA的影响：</strong></p>
<p>　　<strong>3.2.1、如果memory_target设置为非0值</strong></p>
<p>　　(下面有四种情况来对SGA和PGA的大小进行分配)</p>
<p>　　** 3.2.1.1、sga_target和pga_aggregate_target已经设置大小**</p>
<p>　　如果Oracle中已经设置了参数sga_target和pga_aggregate_target，则这两个参数将各自被分配为最小值为他们的目标值。</p>
<p>　　memory_target = sga_target + pga_aggregate_target，大小和memory_max_size一致。</p>
<p>　　<strong>3.2.1.2、sga_target设置大小，pga_aggregate_target没有设置大小</strong></p>
<p>　　那么pga_aggregate_target初始化值=memory_target-sga_target</p>
<p>　　** 3.2.1.3、sga_target没有设置大小，pga_aggregate_target设置大小**</p>
<p>　　那么sga_target初始化值=memory_target-pga_aggregate_target</p>
<p>　　<strong>3.2.1.4、sga_target和pga_aggregate_target都没有设置大小</strong></p>
<p>　　Oracle 11g中对这种sga_target和pag_aggregate_target都没有设定大小的情况下，Oracle将对这两个值没有最小值和默认值。Oracle将根据数据库运行状况进行分配大小。但在数据库启动是会有一个固定比例来分配：</p>
<p>　　sga_target = memory_target*60%</p>
<p>　　pga_aggregate_target = memory_target*40%</p>
<p>　　3.2.2、如果memory_target没有设置或 = 0(在11g中默认为0)</p>
<p>　　11g中默认为0则初始状态下取消了memory_target的作用，完全和10g在内存管理上一致，完全向下兼容。(也有三种情况来对SGA和PGA的大小进行分配)</p>
<p>　　<strong>3.2.2.1、sga_target设置值，则自动调节SGA中的shared pool,buffer cache,redo log buffer,java pool,larger pool等内存空间的大小。PGA则依赖pga_aggregate_target的大小。sga和pga不能自动增长和自动缩小。</strong></p>
<p>　　**      3.2.2.2、sga_target和pga_aggregate_target都没有设置**</p>
<p>　　SGA中的各组件大小都要明确设定，不能自动调整各组件大小。PGA不能自动增长和收缩。</p>
<p>　　*<em>3.2.2.3、memory_max_target设置而memory_target = 0这种情况先和10g一样，不做说明。 *</em></p>
<p>　　<strong>三、ORA-00845</strong></p>
<p>　　最后谈一下ORA-00845的由来和解决方案：</p>
<p>　　如果memory_max_target/memory_target设置过大，可能导致instance无法启动，报ORA-00845错误。</p>
<p>　　‍</p>
<figure class="highlight smali"><table><tr><td class="code"><pre><span class="line">[oracle@yft bin]$ oerr ora 00845</span><br><span class="line">00845, 00000, <span class="string">"MEMORY_TARGET not supported on this system"</span></span><br><span class="line">// *Cause: The MEMORY_TARGET parameter was<span class="built_in"> not </span>supported on this operating<span class="keyword"> system</span><span class="built_in"> or </span>/dev/shm was<span class="built_in"> not </span>sized</span><br><span class="line">// *Action: Refer to documentation for a list of supported operating<span class="keyword"> system</span>s. Or, size /dev/shm to be at leacle<span class="built_in"> instance </span>running on the<span class="keyword"> system</span>.</span><br><span class="line"> </span><br><span class="line">SQ<span class="class">L&gt; alter system set memory_max_target=400m scope=spfile;</span></span><br><span class="line"> </span><br><span class="line">System altered.</span><br><span class="line"> </span><br><span class="line">SQ<span class="class">L&gt; shutdown immediate;</span></span><br><span class="line">Database closed.</span><br><span class="line">Database dismounted.</span><br><span class="line">ORACLE<span class="built_in"> instance </span>shut down.</span><br><span class="line">SQL&gt; startup</span><br><span class="line">ORA-00845: MEMORY_TARGET<span class="built_in"> not </span>supported on this<span class="keyword"> system</span></span><br></pre></td></tr></table></figure>

<p>　　这个错误有点误导，实际上这并不是说该平台版本上不支持AMM特性，只是设置的memory_max_target超过了系统中设置的share memory(/dev/shm)而已。</p>
<p>　　‍</p>
<figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line">[oracle@yft bin]$ df -h</span><br><span class="line">Filesystem            Size  Used Avail Use% Mounted on</span><br><span class="line">tmpfs                 <span class="number">395</span>M     <span class="number">0</span>  <span class="number">395</span>M   <span class="number">0</span>% /dev/shm</span><br></pre></td></tr></table></figure>

<p>　　在Oracle 11g for linux中似乎是用了一种新的机制来管理共享内存段，而不是传统的sys /dev/shm了。在alert.ora中可以找到更准确的错误描述：</p>
<p>　　‍</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">Mon Feb 25 12:13:21 2013</span><br><span class="line">Starting ORACLE<span class="built_in"> instance </span>(normal)</span><br><span class="line">WARNING: You are trying <span class="keyword">to</span> use the MEMORY_TARGET feature. This feature requires the /dev/shm file<span class="built_in"> system </span><span class="keyword">to</span> be mounted <span class="keyword">for</span> at least 419430400 bytes. /dev/shm is either <span class="keyword">not</span> mounted <span class="keyword">or</span> is mounted with available space less than this size. Please fix this so that MEMORY_TARGET can work as expected. Current available is 413466624 <span class="keyword">and</span> used is 0 bytes. Ensure that the mount point is /dev/shm <span class="keyword">for</span> this directory.</span><br><span class="line">memory_target needs larger /dev/shm</span><br></pre></td></tr></table></figure>

<p>　　解决的办法之一是增加tmpfs文件系统的容量:</p>
<p>　　修改/etc/fstab中tmpfs对应的行；将原来的tmpfs   /dev/shm  tmpfs defaults 0 0 改成tmpfs /dev/shm tmpfs default,size=1024M 0 0,这样tmpfs增大为1G，重新mount /dev/shm使之生效。</p>
<p>　　‍</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">[root@yft ~]# vi /etc/fstab</span><br><span class="line">tmpfs                   /dev/shm                tmpfs   defaults,<span class="attribute">size</span>=420m        0 0</span><br><span class="line"> </span><br><span class="line">[root@yft ~]# mount -o remount /dev/shm</span><br><span class="line">[root@yft ~]# df -h</span><br><span class="line">Filesystem            Size  Used Avail Use% Mounted on</span><br><span class="line">tmpfs                 420M     0  420M   0% /dev/shm</span><br><span class="line"> </span><br><span class="line">SQL&gt; startup</span><br><span class="line">ORACLE<span class="built_in"> instance </span>started.</span><br><span class="line"> </span><br><span class="line">Total<span class="built_in"> System </span>Global<span class="built_in"> Area </span> 418484224 bytes</span><br><span class="line">Fixed Size            1336932 bytes</span><br><span class="line">Variable Size          406849948 bytes</span><br><span class="line">Database Buffers        4194304 bytes</span><br><span class="line">Redo Buffers            6103040 bytes</span><br><span class="line">Database mounted.</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Oracle</category>
      </categories>
      <tags>
        <tag>Oracle</tag>
      </tags>
  </entry>
  <entry>
    <title>Markdown语法</title>
    <url>/Markdown/markdown_grammar.html</url>
    <content><![CDATA[<br>
<a id="more"></a>

<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p> 暂无</p>
]]></content>
      <categories>
        <category>Markdown</category>
      </categories>
      <tags>
        <tag>Markdown</tag>
      </tags>
  </entry>
  <entry>
    <title>CentOs7部署JAVA程序</title>
    <url>/Java/Centos7_deploy.html</url>
    <content><![CDATA[<br>
<a id="more"></a>

<blockquote>
<p>一直都是在Windows系统上部署JAVA的程序,还未曾在Linux上部署过JAVA程序,就想尝试一次，由于是第一次部署，想记录一下全过程，所以文章有些冗长<br>有些详细操作过程需要读者自己去参照相关文档，有些文档链接也会给出<br>会尽量减少文字描述，提炼经典的内容，部署过程也是通过网络查询，文章内会给出参考的连接，如有不对的地方还望指正，准备好了咱就开始吧</p>
</blockquote>
<h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><p>我选择的是CentOs7系统，这个测试过程是虚拟机上进行的,为了节省篇幅,如何在VMware安装CentosOS7系统的安装可以参考这篇文章<a href="https://blog.csdn.net/q2158798/article/details/80550626" target="_blank" rel="noopener">VMware安装最新版CentOS7图文教程</a></p>
<h1 id="Centos7安装宝塔面板"><a href="#Centos7安装宝塔面板" class="headerlink" title="Centos7安装宝塔面板"></a>Centos7安装宝塔面板</h1><p><a href="https://www.bt.cn/bbs/portal.php" target="_blank" rel="noopener">宝塔Linux官网</a><br>使用Xshell 6连接CentOs7系统，连接成功后进行以下操作<br>Linux面板6.0安装命令(暂时仅兼容Centos7.x，其它系统版本请安装5.9稳定版)</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">yum <span class="keyword">install</span> -y wget &amp;&amp; wget -O <span class="keyword">install</span>.sh http://download.bt.cn/<span class="keyword">install</span>/install_6.<span class="number">0</span>.sh &amp;&amp; bash <span class="keyword">install</span>.sh</span><br></pre></td></tr></table></figure>

<p>Linux面板6.0升级专业版:</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">curl http:<span class="regexp">//</span>download.bt.cn<span class="regexp">/install/u</span>pdate6.sh|bash</span><br></pre></td></tr></table></figure>

<p>稍等一会，等待升级<br>初次访问需要安装nginx时间可能会久一点。<br>在页面中会出现访问地址、账户和密码，<code>如何选择的是阿里云或者腾讯云服务器的话需要去云服务器中，在防火墙中将8888端口加入到规则中，否则会出现无法访问</code>。<br>将网址复制到浏览器中进行登录，登录成功后，选择Nginx的部署方案，静静等待部署。<br><img src="/coverimg/hexo_03.jpg" alt="hexo_03.jpg"><br>部署完成后如下图<br><img src="/coverimg/deploy00.jpg" alt="deploy00.jpg"><br>至此宝塔面板已经配置完成。</p>
<h1 id="卸载自带的jdk-安装jdk8"><a href="#卸载自带的jdk-安装jdk8" class="headerlink" title="卸载自带的jdk 安装jdk8"></a>卸载自带的jdk 安装jdk8</h1><p><warning>以下步骤通过在Xshell工具进行操作完成</warning><br> Centos7默认安装的openjdk，而平时使用的是Oracle的JDK，所以就需要将原来自带的JDK卸载。</p>
<h2 id="查看系统是否带有JDK"><a href="#查看系统是否带有JDK" class="headerlink" title="查看系统是否带有JDK"></a>查看系统是否带有JDK</h2> <figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line">java -<span class="built_in">version</span></span><br></pre></td></tr></table></figure>

<h2 id="卸载已安装的JDK"><a href="#卸载已安装的JDK" class="headerlink" title="卸载已安装的JDK"></a>卸载已安装的JDK</h2> <figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">rpm</span> <span class="selector-tag">-e</span> <span class="selector-tag">--nodeps</span> <span class="selector-tag">java-1</span><span class="selector-class">.8</span><span class="selector-class">.0-openjdk-1</span><span class="selector-class">.8</span><span class="selector-class">.0</span><span class="selector-class">.131-11</span><span class="selector-class">.b12</span><span class="selector-class">.el7</span><span class="selector-class">.x86_64</span></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">rpm</span> <span class="selector-tag">-e</span> <span class="selector-tag">--nodeps</span> <span class="selector-tag">java-1</span><span class="selector-class">.7</span><span class="selector-class">.0-openjdk-1</span><span class="selector-class">.7</span><span class="selector-class">.0</span><span class="selector-class">.141-2</span><span class="selector-class">.6</span><span class="selector-class">.10</span><span class="selector-class">.5</span><span class="selector-class">.el7</span><span class="selector-class">.x86_64</span></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">rpm</span> <span class="selector-tag">-e</span> <span class="selector-tag">--nodeps</span> <span class="selector-tag">java-1</span><span class="selector-class">.8</span><span class="selector-class">.0-openjdk-headless-1</span><span class="selector-class">.8</span><span class="selector-class">.0</span><span class="selector-class">.131-11</span><span class="selector-class">.b12</span><span class="selector-class">.el7</span><span class="selector-class">.x86_64</span></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">rpm</span> <span class="selector-tag">-e</span> <span class="selector-tag">--nodeps</span> <span class="selector-tag">java-1</span><span class="selector-class">.7</span><span class="selector-class">.0-openjdk-headless-1</span><span class="selector-class">.8</span><span class="selector-class">.0</span><span class="selector-class">.131-11</span><span class="selector-class">.b12</span><span class="selector-class">.el7</span><span class="selector-class">.x86_64</span></span><br></pre></td></tr></table></figure>

<h2 id="验证一下是还有jdk"><a href="#验证一下是还有jdk" class="headerlink" title="验证一下是还有jdk"></a>验证一下是还有jdk</h2><figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">rpm -<span class="keyword">qa</span>|<span class="keyword">grep</span> java</span><br><span class="line"></span><br><span class="line">java -<span class="keyword">version</span></span><br></pre></td></tr></table></figure>

<p>没有内容证明已经卸载干净了</p>
<h2 id="安装Oracle的JDK"><a href="#安装Oracle的JDK" class="headerlink" title="安装Oracle的JDK"></a>安装Oracle的JDK</h2><p>Oracle官网下载JDK<a href="http://www.oracle.com/technetwork/java/javase/downloads/index.html" target="_blank" rel="noopener">下载地址</a><br><code>登录宝塔面板,在usr文件夹底下创建目录java文件夹，将下载的JDK上传到java文件夹中，然后进行解压。
解压完成后进行环境的配置。打开etc文件夹中的&quot;profile&quot;文件，进行环境变量的配置</code>(此步骤是通过宝塔面板中操作完成)</p>
<figure class="highlight crystal"><table><tr><td class="code"><pre><span class="line">export JAVA_HOME=<span class="regexp">/usr/java</span><span class="regexp">/jdk1.8.0_60</span></span><br><span class="line"><span class="regexp">export CLASSPATH=.:$JAVA_HOME/jre</span><span class="regexp">/lib/rt</span>.<span class="symbol">jar:</span>$JAVA_HOME/<span class="class"><span class="keyword">lib</span>/<span class="title">dt</span>.<span class="title">jar</span>:$<span class="title">JAVA_HOME</span>/<span class="title">lib</span>/<span class="title">tools</span>.<span class="title">jar</span></span></span><br><span class="line">export PATH=$<span class="symbol">PATH:</span>$JAVA_HOME/bin</span><br></pre></td></tr></table></figure>

<p><warning>(此步骤通过在Xshell工具进行操作完成)</warning><br>以上内容放到profile文件最后面<br>让配置好的环境变量生效</p>
<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line"><span class="keyword">source</span> <span class="regexp">/etc/</span>profile</span><br></pre></td></tr></table></figure>

<p><warning>(此步骤通过在Xshell工具进行操作完成)</warning><br>生效成功好输入  java -version  验证环境变量配置是否成功。</p>
<h1 id="Centos7安装MySQL"><a href="#Centos7安装MySQL" class="headerlink" title="Centos7安装MySQL"></a>Centos7安装MySQL</h1><p>MySQL的安装推荐使用宝塔面板工具进行安装<br>宝塔面板登录成功后，点击软件商店，寻找MySQL数据库，进行安装<br>稍等片刻后会MySQL就安装成功了，还有一种方式是通过命令进行安装,<a href="https://blog.csdn.net/qq_36582604/article/details/80526287" target="_blank" rel="noopener">CentOS7安装MySQL</a>，<br>MySQL安装完成后的密码是随机的，必须修改密码之后才能操作数据库，点击宝塔面板的数据库进行密码的修改,密码修改完成后为了操作方便，选择使用navicat进行链接,就需要开启MySQL的远程访问。<br>使用命令进入数据库</p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="attribute">mysql -uroot -p</span></span><br></pre></td></tr></table></figure>

<p>开启远程访问限制（注意：下面IP地址指定链接的IP，如要开启所有的，用%代替IP）</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">grant</span> <span class="keyword">all</span> <span class="keyword">privileges</span> <span class="keyword">on</span> *.* <span class="keyword">to</span> <span class="string">'root'</span>@<span class="string">'IP地址'</span> <span class="keyword">identified</span> <span class="keyword">by</span> <span class="string">'数据库密码'</span> <span class="keyword">with</span> <span class="keyword">grant</span> <span class="keyword">option</span>;</span><br></pre></td></tr></table></figure>

<p>生效</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">flush</span> <span class="keyword">privileges</span>;</span><br></pre></td></tr></table></figure>

<p>退出</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="keyword">exit</span></span><br></pre></td></tr></table></figure>

<p><code>远程访问开启后,需要开启3306的端口才会链接成功,点击宝塔面板中的安全，查看防火墙一栏中3306端口是否出去放行状态,如果是则不用执行以下命令，反之使用命令开放33006端口</code></p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">firewall-cmd <span class="attribute">--zone</span>=public <span class="attribute">--add-port</span>=3306/tcp --permanent</span><br></pre></td></tr></table></figure>

<p>重新载入</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line">firewall-<span class="keyword">cmd</span><span class="bash"> --reload</span></span><br></pre></td></tr></table></figure>

<p>☝<warning>(以上骤通过在Xshell工具进行操作完成)</warning><br>以上工作做完后，通过navicat进行链接就行了</p>
<h1 id="运行SpringBoot项目部署"><a href="#运行SpringBoot项目部署" class="headerlink" title="运行SpringBoot项目部署"></a>运行SpringBoot项目部署</h1><p>CentOS7上可以运行war包和jar包,此处只写jar包的部署方式<br><code>在/www/web/目录底下新建&quot;java&quot;文件夹，将打包好的项目进行上传,我选择存放在&quot;/www/web/java&quot;下</code>&gt;&gt;&gt;&gt;&gt;&gt;(此步骤是在宝塔面板中操作完成)<br>通过宝塔面板进入到服务文件目录</p>
<p><code>路径:/etc/systemd/system/</code><br>新建一个文件 xxx.service, xxx建议设置为你项目的名称。<br>我新建的文件为 im.service<br>新建成功后进行编辑添加内容</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="section">[Unit]</span>  </span><br><span class="line"><span class="attr">Description</span>=im.service </span><br><span class="line"><span class="attr">After</span>=syslog.target</span><br><span class="line"><span class="section">[Service]</span>  </span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="attr">ExecStart</span>=/usr/java/jdk1.<span class="number">8.0</span>_60/bin/java -jar /www/web/java/im.jar </span><br><span class="line"></span><br><span class="line"><span class="attr">ExecStop</span>=/bin/kill -<span class="number">15</span> <span class="variable">$MAINPID</span>   </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="section">[Install]</span>  </span><br><span class="line"><span class="attr">WantedBy</span>=multi-user.target</span><br></pre></td></tr></table></figure>

<p>需要修改的部分为Description和ExecStart<br>Description 为开启服务的名称<br>ExecStart的前一部分代表jdk的安装的bin目录 ,后一部分代表你的jar包存放的位置,其他的固定<br>设置完成后还需要开启相关的端口</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">firewall-cmd <span class="attribute">--zone</span>=public <span class="attribute">--add-port</span>=8080/tcp --permanent</span><br></pre></td></tr></table></figure>

<p>重启生效</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line">firewall-<span class="keyword">cmd</span><span class="bash"> --reload</span></span><br></pre></td></tr></table></figure>

<p>以下命令为项目的开启<br>注册为开机启动</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">systemctl <span class="builtin-name">enable</span> im</span><br></pre></td></tr></table></figure>

<p>开启项目</p>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><span class="line">systemctl <span class="literal">start</span> im</span><br></pre></td></tr></table></figure>

<p>查看项目启动的状态</p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">systemctl status im</span></span><br></pre></td></tr></table></figure>

<p>查看项目的日志</p>
<figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line"><span class="keyword">journalctl </span>-u im <span class="keyword">or </span><span class="keyword">journalctl </span>-u im.service</span><br></pre></td></tr></table></figure>

<p>停止项目</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">systemctl <span class="keyword">stop</span> <span class="keyword">im</span></span><br></pre></td></tr></table></figure>

<p>取消开机启动的service</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">systemctl <span class="builtin-name">disable</span> im</span><br></pre></td></tr></table></figure>

<h1 id="域名映射IP地址和端口"><a href="#域名映射IP地址和端口" class="headerlink" title="域名映射IP地址和端口"></a>域名映射IP地址和端口</h1><p> 服务部署成功后，项目通过IP地址和端口可以进行访问，但是正式部署的时候是不会讲IP和断开暴露出来，都是通过域名进行访问的，但是如果项目的端口非80端口的话，就需要使用反向代理来进行解决了。<br> 推荐使用Nginx,以下是我自己域名映射IP和端口的过程<br> 使用的是宝塔控制面板,<br> 步骤为:点击网站&gt;&gt;&gt;进行站点的添加&gt;&gt;&gt;值填写域名、备注、根目录&gt;&gt;&gt;其中根目录选择jar包所在的路径,进行创建。<br> 创建完成后,点击创建的网站名称，打开后如图<br><img src="/blog/deploy/deploy01.jpg" alt><br> 点击配置文件主要修改server_name、root，这两个后面的值<br> <img src="/blog/deploy/deploy02.jpg" alt><br> server_name:域名，可以为多个<br> root:jar运行包所在的文件夹路径<br> 修改完成后点击保存<br> 随后点击反向代理进行添加，填写代理名称和目标的URl(目标的URl:指的是服务器的IP地址+端口),其他的不用修改，点击保存。<br> <img src="/blog/deploy/deploy03.jpg" alt><br> 以上内容填写完成后，重启Nginx后就可以了。</p>
]]></content>
      <categories>
        <category>Centos7</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>流水单号的生产</title>
    <url>/Java/Flow_code.html</url>
    <content><![CDATA[<br>
<a id="more"></a>

<blockquote>
<p>一般的流水单号格式为YYYYMMDDXXXX,其中XXXX为0001开始自动生成,生成单号之前需要去数据库进行查询,如果存在则进行加一的操作,不存在则为初始值,具体的代码如下:</p>
</blockquote>
<figure class="highlight haxe"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 自动生成单号</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   @PostMapping(<span class="string">"/automatic"</span>)</span><br><span class="line">   @ResponseBody</span><br><span class="line">   <span class="keyword">public</span> AjaxResult automatic()&#123;</span><br><span class="line">       <span class="keyword">String</span> <span class="keyword">new</span><span class="type">Number</span> = <span class="literal">null</span>;</span><br><span class="line">       <span class="comment">//获得年月日时分秒</span></span><br><span class="line">       <span class="keyword">String</span> numberDate=DateUtils.getnew<span class="type">Date</span>();</span><br><span class="line">       <span class="comment">//数据库进行查询获得最新的单号</span></span><br><span class="line">       <span class="keyword">String</span> number=invoiceService.getMaxNumber(numberDate);</span><br><span class="line"></span><br><span class="line">       <span class="comment">//判断是否存在</span></span><br><span class="line">       <span class="keyword">if</span>(number!=<span class="literal">null</span>&amp;&amp;!number.equals(<span class="string">""</span>))&#123;</span><br><span class="line">           <span class="comment">// 对最后四位进行截取</span></span><br><span class="line">           <span class="keyword">String</span> endnum = number.substring(<span class="number">8</span>, number.length());</span><br><span class="line">           <span class="comment">// 把String类型转化为int类型</span></span><br><span class="line">           int endNum = Integer.parseInt(endnum);</span><br><span class="line">           <span class="comment">//工具类中进行转换</span></span><br><span class="line">           <span class="keyword">new</span><span class="type">Number</span>=numberDate+ DepotUtils.getFlowCode(endNum);</span><br><span class="line"></span><br><span class="line">       &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">           <span class="keyword">new</span><span class="type">Number</span>=numberDate+<span class="string">"0001"</span>;</span><br><span class="line">       &#125;</span><br><span class="line">       AjaxResult ajax=AjaxResult.success();</span><br><span class="line">       ajax.put(<span class="string">"num"</span>,<span class="keyword">new</span><span class="type">Number</span>);</span><br><span class="line"></span><br><span class="line">       <span class="keyword">return</span> ajax;</span><br><span class="line"></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight haxe"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 工具类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DepotUtils</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> final Logger log = LoggerFactory.getLogger(DepotUtils.class);</span><br><span class="line">    <span class="comment">//静态变量存储最大值</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> final AtomicInteger atomicNum = <span class="keyword">new</span> <span class="type">AtomicInteger</span>();</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 生成流水单号</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">String</span> getFlowCode(int num)&#123;</span><br><span class="line">        <span class="keyword">String</span> format=<span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            atomicNum.<span class="keyword">set</span>(num);</span><br><span class="line">            <span class="comment">//线程安全的原子操作，所以此方法无需同步</span></span><br><span class="line">            int <span class="keyword">new</span><span class="type">Num</span> = atomicNum.incrementAndGet();</span><br><span class="line">            <span class="comment">//数字长度为4位，长度不够数字前面补0</span></span><br><span class="line">             format = <span class="keyword">String</span>.format(<span class="string">"%04d"</span>, <span class="keyword">new</span><span class="type">Num</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">            log.error(<span class="string">"初始化获取分组编号异常"</span>,e);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> format;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>此处使用了原子操作类<code>AtomicInteger</code>,防止多线程问题的出现。<br><a href="https://www.cnblogs.com/zhaoyan001/p/8885360.html" target="_blank" rel="noopener">AtomicInteger类的分析</a></p>
]]></content>
      <categories>
        <category>记录</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>百度地图-地理围栏</title>
    <url>/Map/baidu_map.html</url>
    <content><![CDATA[<br>
<a id="more"></a>

 <div class="note info"><p>地理围栏（Geo-fencing）是LBS的一种新应用，就是用一个虚拟的栅栏围出一个虚拟地理边界。当手机进入、离开某个特定地理区域，或在该区域内活动时，手机可以接收自动通知和警告。简单来说就是判断一个点是否在某区域内。</p></div>

 <!-- more -->

<h2 id="百度地图"><a href="#百度地图" class="headerlink" title="百度地图"></a>百度地图</h2><p>百度地图Api中提供了GeoUtils_min.js这个工具类,主要用到的是<font color="#FF5722">BMapLib.GeoUtils.isPointInPolygon</font>方法判断用户是否在预设区域，如果在则返回<font color="#FF5722">true</font>,控制太输出：“在监控方位内”；如果不在预设区域则返回<font color="#FF5722">false</font>，弹出警告框：“你已经逃离监控区域”</p>
<h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">&lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">xmlns</span>=<span class="string">"http://www.w3.org/1999/xhtml"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Content-Type"</span> <span class="attr">content</span>=<span class="string">"text/html; charset=utf-8"</span> /&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"initial-scale=1.0, user-scalable=no"</span> /&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">title</span>&gt;</span>百度地图-电子围栏<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.bootcss.com/jquery/1.9.1/jquery.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"http://api.map.baidu.com/api?v=3.0&amp;ak=I9k7FGkhRfEg2UGG19DacuuB"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"http://api.map.baidu.com/library/GeoUtils/1.2/src/GeoUtils_min.js"</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!--百度地图容器--&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"width:100%;height:100%;position: absolute;"</span> <span class="attr">id</span>=<span class="string">"map"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="actionscript">	<span class="comment">//创建地图</span></span></span><br><span class="line"><span class="actionscript">	<span class="keyword">var</span> map = <span class="keyword">new</span> BMap.Map(<span class="string">"map"</span>);</span></span><br><span class="line"><span class="actionscript">	<span class="keyword">var</span> point = <span class="keyword">new</span> BMap.Point(<span class="number">108.953439</span>,<span class="number">34.265657</span>); <span class="comment">//设置地图的中心</span></span></span><br><span class="line"><span class="actionscript">	map.centerAndZoom(point, <span class="number">17</span>); <span class="comment">//设置地图的层级</span></span></span><br><span class="line"><span class="actionscript">	map.addControl(<span class="keyword">new</span> BMap.MapTypeControl()); <span class="comment">//设置地图的类型控件</span></span></span><br><span class="line"><span class="actionscript">	map.enableScrollWheelZoom(<span class="literal">true</span>);	<span class="comment">//滚轮滑动缩放地图</span></span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">	<span class="comment">//添加多边形地理围栏</span></span></span><br><span class="line"><span class="actionscript">	<span class="keyword">var</span> polygon = <span class="keyword">new</span> BMap.Polygon([</span></span><br><span class="line"><span class="actionscript">		<span class="keyword">new</span> BMap.Point(<span class="number">108.953331</span>,<span class="number">34.267134</span>),</span></span><br><span class="line"><span class="actionscript">		<span class="keyword">new</span> BMap.Point(<span class="number">108.952163</span>,<span class="number">34.265299</span>),</span></span><br><span class="line"><span class="actionscript">		<span class="keyword">new</span> BMap.Point(<span class="number">108.95351</span>,<span class="number">34.26415</span>),</span></span><br><span class="line"><span class="actionscript">		<span class="keyword">new</span> BMap.Point(<span class="number">108.95572</span>,<span class="number">34.265881</span>),</span></span><br><span class="line"><span class="actionscript">		<span class="keyword">new</span> BMap.Point(<span class="number">108.953546</span>,<span class="number">34.26679</span>)	</span></span><br><span class="line">	], &#123;</span><br><span class="line"><span class="actionscript">		strokeColor: <span class="string">"blue"</span>,<span class="comment">//边线颜色</span></span></span><br><span class="line"><span class="actionscript">		 fillColor: <span class="string">""</span>, <span class="comment">//填充颜色</span></span></span><br><span class="line"><span class="actionscript">		strokeWeight: <span class="number">2</span>, <span class="comment">//边线的宽度，以像素为单位。</span></span></span><br><span class="line"><span class="actionscript">		strokeOpacity: <span class="number">0.5</span> <span class="comment">//填充的透明度，取值范围0 - 1。</span></span></span><br><span class="line">		</span><br><span class="line"><span class="actionscript">	&#125;); <span class="comment">//创建多边形</span></span></span><br><span class="line">	map.addOverlay(polygon);</span><br><span class="line"><span class="actionscript">	<span class="comment">//鼠标点击获取坐标</span></span></span><br><span class="line"><span class="actionscript">	map.addEventListener(<span class="string">"click"</span>, <span class="function"><span class="keyword">function</span> <span class="params">(e)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">		<span class="keyword">var</span> lng = e.point.lng;</span></span><br><span class="line"><span class="actionscript">		<span class="keyword">var</span> lat = e.point.lat;</span></span><br><span class="line"><span class="actionscript">		<span class="keyword">var</span> myPoint = <span class="keyword">new</span> BMap.Point(lng, lat)</span></span><br><span class="line"><span class="actionscript">		<span class="keyword">if</span> (BMapLib.GeoUtils.isPointInPolygon(myPoint, polygon)) &#123;</span></span><br><span class="line"><span class="javascript">			<span class="built_in">console</span>.log(<span class="string">"在监控方位内"</span>)</span></span><br><span class="line"><span class="actionscript">		&#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">			<span class="built_in">console</span>.log(<span class="string">"你已经逃离监控区域"</span>)</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>百度地图</category>
      </categories>
      <tags>
        <tag>百度地图</tag>
      </tags>
  </entry>
  <entry>
    <title>派单算法</title>
    <url>/Other/dispatch_algorithm.html</url>
    <content><![CDATA[ <br>

<a id="more"></a>

 <div class="note info"><p>派单规则:核心的是”就近分配”原则,将离运营人员得到最近的订单分配给他<br>但是如果考虑了每一个运营人员都符合”就近分配”原则,就会增加用户的等待时间,导致部分用户的需求无法进行满足.<br>所以在”就近分配”的原则上加上” 二八规则”,即系统需要满足80%的人符合” 就近分配”原则,20%人加入到应变策略中,<br>运营人员是需要进行盈利的,所以系统在派单中也需要考虑运营人员整体的营收比不会出现很大的差异,趋近”公平原则”.</p></div>

 <!-- more -->

<h2 id="就近原则"><a href="#就近原则" class="headerlink" title="就近原则"></a>就近原则</h2><p><img src="/blog/other/img.png" alt="img.png"><br>按照就近原则:<br>编号1 的订单分配个A运营人员<br>根据以上的就近原则,会出现以下情况,当一个新的订单出现的话,系统根据就近原则,发现A符合这个规则,<br>那么就将单子分配个A,但是有10个单子,A都符合就近原则,而B却始终没接到单子,虽然符合的就近原则,但是不符合公平原则,而且也回出现A运营人员身上会有很出现时间相近的订单,导致用户等待时间过长,或者无法按照预约的时间到达,出现超时情况,无法满足用户的需求.</p>
<h2 id="就近原则-1"><a href="#就近原则-1" class="headerlink" title="就近原则"></a>就近原则</h2><p><img src="/blog/other/img_1.png" alt="img_1.png"><br>系统需要满足每个运营人员的营收之间的差距越小越好,趋近”公平原则”<br>预约时间为10:00的编号1预约单,此时系统得知在线的运营人员为A,B,C;同时根据”公平原则”会将编号1的预约单分配给C,但是此时时间为09:45,距离预约时间只剩下15分钟,如果系统坚持”公平原则”的将编号1分派给C,但是C不符合” 就近分配”,而C赶过去的时间为30分钟,会出现超时,所以会在A,B之间进行选择, 按照”就近分配”原则和” 公平原则”系统会将订单分配给A,但是A运营人员的车辆容积已经接近满载状态,需要去废品分拣中心进行垃圾的卸载,所以无法将此订单分配给A运营人员,此时只有B运营人员符合要求.<br>这样看似是最优解,这是一个订单和多个运营人员,那如果是多个订单和多个订单改如何解决呢?</p>
<h2 id="多对多"><a href="#多对多" class="headerlink" title="多对多"></a>多对多</h2><p><img src="/blog/other/img_2.png" alt="img_2.png"><br>得到以下组合<br>组合一:<br>订单1分配给A;<br>订单2分配给B<br>订单1 和订单2的总时间为35分钟,平均等待时间17.5分钟<br>组合二<br>订单2分配给A<br>订单1分配给B<br>订单1 和订单2的总时间为25分钟,平均等待时间12.5分钟<br>组合一符合就近原则,但是用户的等待时间过长(考虑每一个运营人员都符合”就近原则”)<br>组合二相比较组合一派单方式总时间缩短了10分钟,每一单平均节省了5分钟,(符合”二八规则”)<br>但是此组合没有考虑到”公平原则”,如果在此技术上将符合”公平原则”引入.</p>
<h2 id="二八原则"><a href="#二八原则" class="headerlink" title="二八原则"></a>二八原则</h2><p><img src="/blog/other/img_3.png" alt="img_3.png"><br>此图分别包含了以下原则:<br>就近分配,公平原则,二八规则<br>同时两个订单编号1和编号2,两个运营人员A和B<br>如果根据就近原则,那么就以下组合<br>订单1运营人员A<br>订单2运营人员B</p>
<p>公平原则<br>订单2运营人员A<br>订单1运营人员B<br>二八规则(相对就近原则)<br>组合一:<br>订单1分配给A<br>订单2分配B<br>总等待时间为29分钟,,平均每单的时间为14.5<br>组合二:<br>订单1分配给B<br>订单2分配A<br>总等待时间为34分钟,,平均每单的时间为17<br>组合一相比较组合二总时间缩短了5分钟,平均每单时间缩短3.5分钟<br>明显是组合二是最优选择,但是如果选择第二种方案,会让订单二用户等待的时间变得更长<br>如何在保证运营人员的收益趋于公平的状态下, 缩短用户等待时间,这方面就需要引入一个” 预派单”概念,即在运营人员即将结束此时进行的任务的时候,系统根据运营人员所处的位置和预估的处理时间,分配最新且距离近的订单.</p>
<h2 id="预派单"><a href="#预派单" class="headerlink" title="预派单"></a>预派单</h2><p>基于”预派单”场景如下:<br>“系统根据运营人员所处的位置和预估的处理时间,分配最新且距离近的订单”;<br><img src="/blog/other/img_4.png" alt="img_4.png"><br>根据上图所示,以及”预派单”规则,可以得到<br>此时系统收到10:25新的订单3,根据距离计算得知,A,B距离订单3的距离相等,系统按照公平原则对A,B进行计算,<br>发现B符合此原则,系统即将将系统发送给B的时候发现,根据B运营人员已完成订单的处理时间,计算出他的预估时间,<br>发现如果等B处理完订单1后再去处理订单3,会导致订单超时,所以系统不会将订单3分配给B,此时系统没得选择,<br>虽然A不符合公平原则,但是A处理完订单2后还有时间赶往订单3,不会导致订单超时,<br>所以系统将订单3分配给A;<br>此时的规则:时间就近原则,大于公平原则<br>实际的情况:<br><img src="/blog/other/img_5.png" alt="img_5.png"><br>订单1废品类型为纸质,而且重量只有1kg,由于B运营人员之前处理的两个订单重量比较重,所以处理时间比较长,订单数量少,且总的处理时间长,所以系统而新的订单重量较轻而且为属性为纸质类,<br>订单2废品类型为金属,而且重量3kg,重量比较重,由于A运营人员之前处理的三个订单重量比较轻,所以处理时间比较短,而新的订单重量较轻而且为属性为纸质类,</p>
<h3 id="系统层面"><a href="#系统层面" class="headerlink" title="系统层面"></a>系统层面</h3><p>系统为何会将订单3分配给A而没有分配给B,<br>原因: 系统在计算的时候会优先考虑” 就近原则”,在符合就近原则的情况下,结合二八规则,公平原则,进行派单<br>由于B运营人员之前处理的两个订单物品类型重量比较重,所以处理时间比较长,订单数量少,且总的处理时间长,所以系统判断B运营人员下一个的处理时间过长<br>而A运营人员处理的订单数量多,且总的处理时间行比较B短很多,系统就判断A下一个的处理时间会相比较B短,所以就将订单3分配给A;从系统层面来考虑,分配的规则没有问题</p>
<h3 id="实际情况"><a href="#实际情况" class="headerlink" title="实际情况"></a>实际情况</h3><p>运营人员B处理订单1的时间比系统预估时间短,而运营人员A处理订单2的实际时间比系统预估的时间长了,按照时间情况的订单3分配满足就近原则,公平原则</p>
<h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>系统分配的方式和实际派送的方式出现两种结果的原因是<br>物品的类型以及重量,这两个因素会影响实际的分配策略;<br>所以在” 预派单”的时候需要考虑即将分配的订单的物品类型以及重量;<br>而且在刚刚的” 预派单”规则中,二八规则并没有介入进来,<br>其中最重要的原因是A,B运营人员到订单3的时间相同(即距离相等),可以得到的信息是,当时间相同(即距离相等)的时候,二八规则是不会介入的</p>
<h3 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h3><ol>
<li>预约时间: 用户等待的时间</li>
<li>消耗时间:运营人员接到任务赶往目的地路上所消耗的时间</li>
<li>处理时间:运营人员处理此订单需要的时间</li>
<li>废品处理时间:当车辆容积处于满载状态,运营人员需要赶往废品分拣中心,进行废品的处理</li>
<li>工作时长:运营人员当天的工作时长</li>
<li>不进行分配:运营取消任务,默认一个小时之内不给此用户进行派单</li>
<li>未进行接单:当天未工作的运营人员时间</li>
<li>车辆满载状态:到达设定的阈值</li>
<li>当天工作的酬劳</li>
</ol>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring boot常用注解</title>
    <url>/SpringBoot/springboot_annotation.html</url>
    <content><![CDATA[ <br>
<a id="more"></a>

 <div class="note info"><p>在使用Spring boot过程中使用的许多的注解,虽然经常使用,但是有些仅仅在使用的过程中在会去查询所包含的意思,现在将常用的注解进行一个记录。</p></div>

 <!-- more -->

<h1 id="SpringBootApplication"><a href="#SpringBootApplication" class="headerlink" title="@SpringBootApplication"></a>@SpringBootApplication</h1><p>这个注解主要是应用启动类的入口上,而且是一个组合注解，里面包含了<code>@SpringBootConfiguration </code><code>@EnableAutoConfiguration</code> <code>@ComponentScan</code><br><img src="/blog/java/SpringBoot01.jpg" alt="SpringBoot01.jpg"></p>
<h2 id="SpringBootConfiguration"><a href="#SpringBootConfiguration" class="headerlink" title="@SpringBootConfiguration"></a>@SpringBootConfiguration</h2><p>根据官网的解释 <code>@SpringBootConfiguration</code>继承自<code>@Configuration</code>,标志这是一个配置类，并将当前类内声明的一个或多个以<code>@Bean</code>注解标记的方法的实例注入到到srping容器中，实例名为方法名</p>
<h2 id="EnableAutoConfiguration"><a href="#EnableAutoConfiguration" class="headerlink" title="@EnableAutoConfiguration"></a>@EnableAutoConfiguration</h2><p>此注释自动载入应用程序所需的所有Bean——这依赖于Spring Boot在类路径中的查找。判断项目需要加载的模块，会自动的帮你配置web项目中所需要的默认配置。需要排除一些无需自动配置的类时，可用<code>exclude<font>来排除<br>如图<br><img src="/blog/java/SpringBoot02.jpg" alt="SpringBoot02.jpg"></font></code></p>
<p>此处排除了自带的数据源</p>
<h2 id="ComponentScan"><a href="#ComponentScan" class="headerlink" title="@ComponentScan"></a>@ComponentScan</h2><p><code>@ComponentScan</code> 对应于XML配置形式中的 <code>context:component-scan</code>，会扫描当前包及其子包下被标记的类并纳入到spring的Ioc容器中进行管理；<br>这些特定的注解大致分为： <code>@Controller</code> <code>@Entity</code><code>@Component</code><code>@Service <font><code>@Repository<font>等<br>对于该注解，还可以通过 basePackages 属性来控制该注解的自动扫描范围，如：</font></code></font></code></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">@<span class="keyword">ComponentScan</span>(<span class="keyword">basePackages</span> = &#123;"<span class="selector-tag">com</span><span class="selector-class">.xiaoming</span><span class="selector-class">.demo</span><span class="selector-class">.scoket</span><span class="selector-class">.controller</span>","<span class="selector-tag">com</span><span class="selector-class">.xiaoming</span><span class="selector-class">.demo</span><span class="selector-class">.scoket</span><span class="selector-class">.entity</span>"&#125;)</span><br></pre></td></tr></table></figure>

<h1 id="Controller-和-RestController"><a href="#Controller-和-RestController" class="headerlink" title="@Controller 和 @RestController"></a>@Controller 和 @RestController</h1><h2 id="Controller"><a href="#Controller" class="headerlink" title="@Controller"></a>@Controller</h2><p>使用<code>@Controller<font> 注解，在对应的方法上，视图解析器可以解析return 的jsp,html页面，并且跳转到相应页面<br>若返回json等内容到页面，则需要加<code>@ResponseBody</code>注解</font></code></p>
<h2 id="RestController"><a href="#RestController" class="headerlink" title="@RestController"></a>@RestController</h2><p>用<code>@RestController</code><br>类似于<code>@Controller</code>与<code>@ResponseBody</code>这两个注解的结合，返回json数据不需要在方法前面加<code>@ResponseBody</code>注解了，但是返回html页面，视图解析器也无法解析html页面</p>
<h1 id="RequestMapping"><a href="#RequestMapping" class="headerlink" title="@RequestMapping"></a>@RequestMapping</h1><div class="note info"><p>用来处理请求地址映射的注解，可用于类或方法上。用于类上，表示类中的所有响应请求的方法都是以该地址作为父路径。</p></div>
<h2 id="常用注解"><a href="#常用注解" class="headerlink" title="常用注解"></a>常用注解</h2><ol>
<li><p>value,method；<br>value:指定请求的实际地址，指定的地址可以是URI Template 模式（后面将会说明）；<br>method:指定请求的method类型， GET、POST、PUT、DELETE等；</p>
</li>
<li><p>consumes,produces；<br>consumes:指定处理请求的提交内容类型（Content-Type），例如application/json, text/html;<br>produces:指定返回的内容类型，仅当request请求头中的(Accept)类型中包含该指定类型才返回；</p>
</li>
<li><p>params,headers；<br>params:指定request中必须包含某些参数值是，才让该方法处理。<br>headers:指定request中必须包含某些指定的header值，才能让该方法处理请求。<br>最常用的 value 和methid<br>@RequestMapping(value=”/admin”, method = RequestMethod.GET)<br>用get的方式访问为”/admin”</p>
</li>
</ol>
<p>常用简化的注解是<code>@GetMapping</code>,<code>@PostMapping</code><br><code>@GetMapping</code>等价于 <code>@RequestMapping(method = RequestMethod.GET)</code><br><code>@PostMapping</code> 等价于<code> @RequestMapping(method = RequestMethod.POST)</code></p>
<h1 id="RequestBody和-ResponseBody"><a href="#RequestBody和-ResponseBody" class="headerlink" title="RequestBody和@ResponseBody"></a>RequestBody和@ResponseBody</h1><h2 id="RequestBody"><a href="#RequestBody" class="headerlink" title="@RequestBody"></a>@RequestBody</h2><p> 是作用在形参列表上，用于将前台发送过来固定格式的数据封装为对应的 JavaBean 对象，进行前后台交互。</p>
<h2 id="ResponseBody"><a href="#ResponseBody" class="headerlink" title="@ResponseBody"></a>@ResponseBody</h2><p> 注解的作用是将controller的方法返回的对象通过适当的转换器转换为指定的格式之后，写入到response对象的body区，通常用来返回JSON数据或者是XML数据，效果等同于通过response对象输出指定格式的数据<br> <figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line"> 　@RequestMapping(<span class="string">"/login"</span>)</span><br><span class="line">　　@ResponseBody</span><br><span class="line">　　public<span class="built_in"> User </span>login(User user)&#123;</span><br><span class="line">　　　　return user;</span><br><span class="line">　　&#125;</span><br></pre></td></tr></table></figure></p>
<p>User在前台接收到的数据为：{“loginName”:”xxx”,”name”:”xxx”}</p>
<h1 id="Component"><a href="#Component" class="headerlink" title="@Component"></a>@Component</h1><div class="note info no-icon"><p>官方的原话是：带此注解的类看为组件，当使用基于注解的配置和类路径扫描的时候，这些类就会被实例化。其他类级别的注解也可以被认定为是一种特殊类型的组件，比如@Repository @Aspect。</p></div>
<p>可以理解为：一个类上添加@Component注解后，表明这个类会作为组件类，并告知Spring要为这个类创建bean，并实例化到spring容器中，相当于配置文件中的<bean id class>并且@Component可以注解其他类注解。</bean></p>
<div class="note warning"><p>Component与@Bean的区别</p></div>

<p>@Component（@Controller、@Service、@Repository）：通过类路径扫描来自动侦测以及自动装配到Spring容器中。</p>
<p>@Bean：注在标有该注解的方法中定义产生这个bean的逻辑。</p>
<h1 id="ConfigurationProperties"><a href="#ConfigurationProperties" class="headerlink" title="@ConfigurationProperties"></a>@ConfigurationProperties</h1><div class="note info no-icon"><p>将配置文件中的配置，以属性的形式自动注入到实体中。</p></div>
<p> @ConfigurationProperties注解需要和@Component搭配使用，主要是为了让 @ComponentScan 扫描到,只有当类所在的包被@ComponentScan 注解扫描到才会生效，默认情况下，该注解会扫描在主应用类下的所有包结构；prefix代表配置前缀，配置文件中的前缀是什么， prefix 中就使用什么。成员变量就是对应的配置文件的第二级属性名,容器会自动绑定配置文件的数据到对应的配置属性类中。<br>定义的属性的<br>注意事项：</p>
<ol>
<li>在prefix其外部特性将被结合到类的字段定义。</li>
<li>根据Spring Boot的宽松绑定 规则，类的属性名称必须与外部属性的名称匹配。</li>
<li>我们可以通过简单地用值初始化字段来定义默认值。</li>
<li>类本身可以是包私有的。</li>
<li>类的字段必须有公共setter。<br>下面是为自己在项目中的使用<br>配置文件是.yml<br>在配置文件中进行自定义参数的声明<br><img src="/blog/java/prefix02.jpg" alt="prefix02.jpg"><br>定义一个配置类，添加@Component和@ConfigurationProperties其中prefix填写的是自定义参数的前缀。<br><img src="/blog/java/prefix03.png" alt="prefix03.png"><br>类里面的成员变量为二级属性名<br>在使用用过程中<br>通过@Autowired进行注解使用，通过get获得到值<br><img src="/blog/java/prefix04.jpg" alt="prefix04.jpg"><h1 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h1>目前互联网上很多大佬都有SpringBoot系列教程,文章中如有相同之处，请多多包涵，希望留言告诉我，我会积极的进行署名以及添加文章链接地址。若有表达不清楚或者错误之处，还望提出,谢谢！</li>
</ol>
]]></content>
      <categories>
        <category>Spring Boot</category>
      </categories>
      <tags>
        <tag>Spring Boot</tag>
      </tags>
  </entry>
  <entry>
    <title>Springboot+shiro无权限跳转失败</title>
    <url>/SpringBoot/springboot_shiro.html</url>
    <content><![CDATA[ <br>

<a id="more"></a>

 <div class="note info"><p>使用shiro完成了登录验证以及权限的验证，当用户无权限的时候是需要跳转到403也没用，但是我这设置还是没有作用，最终经过排查以及百度加上查看源码解决问题,本篇文章做一个记录。</p></div>


<h1 id="发现问题"><a href="#发现问题" class="headerlink" title="发现问题"></a>发现问题</h1><p>在shiro做权限管理的过程中，用户无权限的时候，是需要跳转到403.html页面的，我在setUnauthorizedUrl也配置的403的跳转了。<br>但是在实际跳转中死活无法跳转出现如图的问题<br><img src="/blog/java/shiro_01.jpg" alt="01.jpg"></p>
<p>Not authorized to invoke method:未授权调用方法。<br>但是我也设置了未授权界面跳转了啊</p>
<p>那么大概率的问题出现在了setUnauthorizedUrl这个方法上面了，<br>点击这个方法之后,setUnauthorizedUrl方法就只有赋值</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUnauthorizedUrl</span><span class="params">(String unauthorizedUrl)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.unauthorizedUrl = unauthorizedUrl;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>unauthorizedUrl这个参数是用来干嘛的,通过查找之后除了在setUnauthorizedUrl()这个方法中出现<br>还出现在了applyUnauthorizedUrlIfNecessary()这个方法中了</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">private void applyUnauthorizedUrlIfNecessary(Filter filter) &#123;</span><br><span class="line">        String unauthorizedUrl = this.getUnauthorizedUrl();</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.hasText(unauthorizedUrl) &amp;&amp;<span class="built_in"> filter </span>instanceof AuthorizationFilter) &#123;</span><br><span class="line">            AuthorizationFilter authzFilter = (AuthorizationFilter)filter;</span><br><span class="line">            String existingUnauthorizedUrl = authzFilter.getUnauthorizedUrl();</span><br><span class="line">            <span class="keyword">if</span> (existingUnauthorizedUrl == <span class="literal">null</span>) &#123;</span><br><span class="line">                authzFilter.setUnauthorizedUrl(unauthorizedUrl);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>通过对源码的一步步追踪，发现在配置配置全局属性applyGlobalPropertiesIfNecessary的方法中会调用applyUnauthorizedUrlIfNecessary方法</p>
<figure class="highlight processing"><table><tr><td class="code"><pre><span class="line"><span class="comment">//配置全局属性，只要是针对特定类型的Filter配置其所需要的URL属性</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> applyGlobalPropertiesIfNecessary(Filter <span class="built_in">filter</span>) &#123;</span><br><span class="line">        applyLoginUrlIfNecessary(<span class="built_in">filter</span>);</span><br><span class="line">        applySuccessUrlIfNecessary(<span class="built_in">filter</span>);</span><br><span class="line">        applyUnauthorizedUrlIfNecessary(<span class="built_in">filter</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>其他的暂时就不解释了</p>
<h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><p>在applyUnauthorizedUrlIfNecessary方法中有有一个判断,if (StringUtils.hasText(unauthorizedUrl) &amp;&amp; filter instanceof AuthorizationFilter)<br>其中filter必须为AuthorizationFilter类型的过滤器才可以，但是什么类型的过滤器才算是AuthorizationFilter类型的呢，<br>点击AuthorizationFilter,进入正抽象类中查看它的正常类，得到如图所示</p>
<p><img src="/blog/java/shiro_03.jpg" alt="03.jpg"></p>
<p>那么红圈中的这些过滤器到底是什么呢?</p>
<p>在配置shiro 过滤器的管理的时候会实例化<code>ShiroFilterFactoryBean</code>对象<br>同对代码的跟踪找到<code>createFilterChainManager</code>这个方法,这个方法是创建过滤器<br> <figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">DefaultFilterChainManager manager</span> = new DefaultFilterChainManager();</span><br></pre></td></tr></table></figure></p>
<p>会将所有默认的过滤器获取到<br>通过对<code>DefaultFilterChainManager</code>类的代码跟踪</p>
<figure class="highlight aspectj"><table><tr><td class="code"><pre><span class="line">  <span class="comment">//添加默认的过滤器</span></span><br><span class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">void</span> <span class="title">addDefaultFilters</span><span class="params">(<span class="keyword">boolean</span> init)</span> </span>&#123;</span><br><span class="line">      DefaultFilter[] var2 = DefaultFilter.values();</span><br><span class="line">      <span class="keyword">int</span> var3 = var2.length;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">int</span> var4 = <span class="number">0</span>; var4 &lt; var3; ++var4) &#123;</span><br><span class="line">          DefaultFilter defaultFilter = var2[var4];</span><br><span class="line">          <span class="keyword">this</span>.addFilter(defaultFilter.name(), defaultFilter.newInstance(), init, <span class="keyword">false</span>);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<p><code>DefaultFilter</code>枚举</p>
<figure class="highlight vbscript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> enum DefaultFilter &#123;</span><br><span class="line">    anon(AnonymousFilter.<span class="keyword">class</span>),</span><br><span class="line">    authc(FormAuthenticationFilter.<span class="keyword">class</span>),</span><br><span class="line">    authcBasic(BasicHttpAuthenticationFilter.<span class="keyword">class</span>),</span><br><span class="line">    logout(LogoutFilter.<span class="keyword">class</span>),</span><br><span class="line">    noSessionCreation(NoSessionCreationFilter.<span class="keyword">class</span>),</span><br><span class="line">    perms(PermissionsAuthorizationFilter.<span class="keyword">class</span>),</span><br><span class="line">    port(PortFilter.<span class="keyword">class</span>),</span><br><span class="line">    rest(HttpMethodPermissionFilter.<span class="keyword">class</span>),</span><br><span class="line">    roles(RolesAuthorizationFilter.<span class="keyword">class</span>),</span><br><span class="line">    ssl(SslFilter.<span class="keyword">class</span>),</span><br><span class="line">    user(UserFilter.<span class="keyword">class</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> final <span class="keyword">Class</span>&lt;? extends <span class="built_in">Filter</span>&gt; filterClass;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> DefaultFilter(<span class="keyword">Class</span>&lt;? extends <span class="built_in">Filter</span>&gt; filterClass) &#123;</span><br><span class="line">        this.filterClass = filterClass;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">Filter</span> newInstance() &#123;</span><br><span class="line">        return (<span class="built_in">Filter</span>)ClassUtils.newInstance(this.filterClass);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">Class</span>&lt;? extends <span class="built_in">Filter</span>&gt; getFilterClass() &#123;</span><br><span class="line">        return this.filterClass;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> static Map&lt;<span class="built_in">String</span>, <span class="built_in">Filter</span>&gt; createInstanceMap(FilterConfig config) &#123;</span><br><span class="line">        Map&lt;<span class="built_in">String</span>, <span class="built_in">Filter</span>&gt; filters = <span class="keyword">new</span> LinkedHashMap(values().length);</span><br><span class="line">        DefaultFilter[] var2 = values();</span><br><span class="line">        <span class="built_in">int</span> var3 = var2.length;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="built_in">int</span> var4 = <span class="number">0</span>; var4 &lt; var3; ++var4) &#123;</span><br><span class="line">            DefaultFilter defaultFilter = var2[var4];</span><br><span class="line">            <span class="built_in">Filter</span> <span class="built_in">filter</span> = defaultFilter.newInstance();</span><br><span class="line">            <span class="keyword">if</span> (config != <span class="literal">null</span>) &#123;</span><br><span class="line">                try &#123;</span><br><span class="line">                    <span class="built_in">filter</span>.init(config);</span><br><span class="line">                &#125; catch (ServletException var9) &#123;</span><br><span class="line">                    <span class="built_in">String</span> msg = <span class="string">"Unable to correctly init default filter instance of type "</span> + <span class="built_in">filter</span>.getClass().getName();</span><br><span class="line">                    throw <span class="keyword">new</span> IllegalStateException(msg, var9);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            filters.put(defaultFilter.name(), <span class="built_in">filter</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        return filters;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>现在知道在抽象类<code>AuthorizationFilter</code>中红圈的具体类的来源了。<br>通过对<code>DefaultFilter和AuthorizationFilter</code>的观察得知<br>属于<code>AuthorizationFilter</code>类型的过滤类</p>
<ol>
<li>roles(RolesAuthorizationFilter.class),</li>
<li>perms(PermissionsAuthorizationFilter.class),</li>
<li>rest(HttpMethodPermissionFilter.class),</li>
<li>ssl(SslFilter.class),<br><code>unauthorizedUrl<code>会生效。</code></code></li>
</ol>
<p>属于<code>AuthenticationFilter</code>类型的过滤器</p>
<ol>
<li>anon(AnonymousFilter.class),</li>
<li>authc(FormAuthenticationFilter.class),</li>
<li>authcBasic(BasicHttpAuthenticationFilter.class),</li>
<li>logout(LogoutFilter.class),<br><code>unauthorizedUrl<code>不会生效。<h1 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h1>现在不跳转的问题找到了，得找解决的办法。<br>1.对抛出未授权异常<code>UnauthorizedException<code>进行处理<br>2.把为<code>AuthenticationFilter<code>过滤器改为<code>AuthorizationFilter<code>过滤器</code></code></code></code></code></code></code></code></li>
</ol>
<h2 id="方法的处理"><a href="#方法的处理" class="headerlink" title="方法的处理:"></a>方法的处理:</h2> <figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 全局异常处理类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@ControllerAdvice</span></span><br><span class="line"><span class="meta">@Order(-1)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExceptionHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(ExceptionHandler.<span class="keyword">class</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 无权访问该资源异常</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@org</span>.springframework.web.bind.<span class="keyword">annotation</span>.ExceptionHandler(UnauthorizedException.<span class="keyword">class</span>)</span><br><span class="line">    <span class="meta">@ResponseStatus(HttpStatus.UNAUTHORIZED)</span></span><br><span class="line">    <span class="keyword">public</span> String unAuth(HttpServletRequest request, UnauthorizedException e) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"/error/403.html"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 拦截未知的运行时异常</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@org</span>.springframework.web.bind.<span class="keyword">annotation</span>.ExceptionHandler(RuntimeException.<span class="keyword">class</span>)</span><br><span class="line">    <span class="meta">@ResponseStatus(HttpStatus.INTERNAL_SERVER_ERROR)</span></span><br><span class="line">    <span class="keyword">public</span> String errorHtml500(HttpServletRequest request, Exception exception) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"/error/500.html"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="注解的解释"><a href="#注解的解释" class="headerlink" title="注解的解释:"></a>注解的解释:</h2><p>@ControllerAdvice:异常处理器应用到所有控制器。<br>@Order(-1):定义组件的加载顺序。值越小拥有越高的优先级。</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接:"></a>参考链接:</h1><p><a href="https://www.iteye.com/blog/jinnianshilongnian-1866350" target="_blank" rel="noopener">https://www.iteye.com/blog/jinnianshilongnian-1866350</a><br><a href="https://blog.csdn.net/ljz2016/article/details/81214184" target="_blank" rel="noopener">https://blog.csdn.net/ljz2016/article/details/81214184</a><br><a href="https://www.jianshu.com/p/e03f5b54838c" target="_blank" rel="noopener">https://www.jianshu.com/p/e03f5b54838c</a></p>
]]></content>
      <categories>
        <category>Spring Boot</category>
      </categories>
      <tags>
        <tag>Spring Boot</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker安装Mysql</title>
    <url>/Other/docker_mysql.html</url>
    <content><![CDATA[ <br>
<a id="more"></a>


<h1 id="Docker安装Mysql"><a href="#Docker安装Mysql" class="headerlink" title="Docker安装Mysql"></a>Docker安装Mysql</h1><p>　　前言<br>虽然 docker 安装 mysql 不是一个很好的方案，但是为了个人使用方便，使用 docker 安装 mysql 还是没什么问题的。</p>
<p>　　本文为了方便，我们直接通过yum方式安装。所以，我们在安装之前需要电脑可以联网，不然我们这种方式是安装不了的。</p>
<p>　　当然，你也可以自行下载mysql镜像，然后再通过 docker 安装，不过这不在本文的讨论范围  </p>
<h4 id="一、拉取镜像"><a href="#一、拉取镜像" class="headerlink" title="一、拉取镜像"></a>一、拉取镜像</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">拉取镜像</span><br><span class="line">docker pull mysql</span><br><span class="line"> </span><br><span class="line">或者</span><br><span class="line">docker pull mysql:latest</span><br><span class="line"> </span><br><span class="line">以上两个命令是一致的，默认拉取的就是 latest 版本的</span><br><span class="line"> </span><br><span class="line">我们还可以用下面的命令来查看可用版本：</span><br><span class="line">docker search mysql</span><br></pre></td></tr></table></figure>

<h4 id="二、查看镜像"><a href="#二、查看镜像" class="headerlink" title="二、查看镜像"></a>二、查看镜像</h4><p>　　使用以下命令来查看是否已安装了 mysql镜像</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">docker images</span><br></pre></td></tr></table></figure>

<h4 id="三、运行镜像"><a href="#三、运行镜像" class="headerlink" title="三、运行镜像"></a>三、运行镜像</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">docker run -p <span class="number">3306</span>:<span class="number">3306</span> --name mysql --restart=always --privileged=<span class="keyword">true</span> \</span><br><span class="line">-v /www/data/server/mysql/log:/<span class="keyword">var</span>/log/mysql \</span><br><span class="line">-v /www/data/server/mysql/data:/<span class="keyword">var</span>/lib/mysql \</span><br><span class="line">-v /www/data/server/mysql/conf:/etc/mysql \</span><br><span class="line">-v /etc/localtime:/etc/localtime:ro \</span><br><span class="line">-e MYSQL_ROOT_PASSWORD=root -d mysql:<span class="number">5.7</span>.36</span><br></pre></td></tr></table></figure>

<p>　　<strong>命令含义：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> -p <span class="number">3306</span>:<span class="number">3306</span>：指定宿主机端口与容器端口映射关系</span><br><span class="line">--name mysql：创建的容器名称</span><br><span class="line">--restart=always：总是跟随docker启动</span><br><span class="line">--privileged=<span class="keyword">true</span>：获取宿主机root权限</span><br><span class="line">-v /usr/local/mysql/log:/<span class="keyword">var</span>/log/mysql：映射日志目录，宿主机:容器</span><br><span class="line">-v /usr/local/mysql/data:/<span class="keyword">var</span>/lib/mysql：映射数据目录，宿主机:容器</span><br><span class="line">-v /usr/local/mysql/conf:/etc/mysql：映射配置目录，宿主机:容器</span><br><span class="line">-v /etc/localtime:/etc/localtime:ro：让容器的时钟与宿主机时钟同步，避免时区的问题，ro是read only的意思，就是只读。</span><br><span class="line">-e MYSQL_ROOT_PASSWORD=<span class="number">123456</span>：指定mysql环境变量，root用户的密码为<span class="number">123456</span></span><br><span class="line">-d mysql:latest：后台运行mysql容器，版本是latest</span><br></pre></td></tr></table></figure>

<h4 id="四、查看正在运行的容器"><a href="#四、查看正在运行的容器" class="headerlink" title="四、查看正在运行的容器"></a>四、查看正在运行的容器</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">查看正在运行的容器</span><br><span class="line">docker ps</span><br><span class="line">查看所有的docker容器</span><br><span class="line">docker ps -a</span><br></pre></td></tr></table></figure>

<p>　　这个时候如果显示的是up状态，那就是启动成功了。如果是restarting，说明是有问题的。我们可以查看日志：docker logs -f mysql</p>
<p>　　 可能会发现：</p>
<p>　　~Failed to access directory for –secure-file-priv. Please make sure that dir`</p>
<p>　　 此时如果我们执行第五步也会报错：</p>
<p>　　Error response from daemon: Container xxx is restarting, wait until the cont。。。</p>
<p>　　此时我们需要执行第六步。  </p>
<h4 id="五、查看容器内部"><a href="#五、查看容器内部" class="headerlink" title="五、查看容器内部"></a>五、查看容器内部</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">docker exec -it mysql /bin/bash</span><br></pre></td></tr></table></figure>

<h4 id="六、修改mysql配置"><a href="#六、修改mysql配置" class="headerlink" title="六、修改mysql配置"></a>六、修改mysql配置</h4><p>　　映射的my.cnf</p>
<p>　　新增 my.cnf 填写一下内容</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">[client]</span><br><span class="line"></span><br><span class="line"><span class="keyword">default</span>-character-set=utf8mb4</span><br><span class="line"></span><br><span class="line">[mysql]</span><br><span class="line"></span><br><span class="line"><span class="keyword">default</span>-character-set=utf8mb4</span><br><span class="line"></span><br><span class="line">[mysqld]</span><br><span class="line"></span><br><span class="line">init_connect=<span class="string">' SET collation_connection = utf8mb4_unicode_ci '</span></span><br><span class="line">init_connect=<span class="string">' SET NAMES utf8mb4 '</span></span><br><span class="line">character-set-server=utf8mb4</span><br><span class="line">collation-server=utf8mb4_unicode_ci </span><br><span class="line">skip-character-set-client-handshake </span><br><span class="line">skip-name-resolve</span><br></pre></td></tr></table></figure>

<p>　　将my.cnf存放到 映射配置目录 宿主机”/www/data/server/mysql/conf”中,权限改为777</p>
<h4 id="七、重启mysql服务，使其配置生效"><a href="#七、重启mysql服务，使其配置生效" class="headerlink" title="七、重启mysql服务，使其配置生效"></a>七、重启mysql服务，使其配置生效</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">docker restart mysql</span><br></pre></td></tr></table></figure>

<h4 id="八、设置docker启动时启动mysql"><a href="#八、设置docker启动时启动mysql" class="headerlink" title="八、设置docker启动时启动mysql"></a>八、设置docker启动时启动mysql</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">docker update mysql --restart=always</span><br></pre></td></tr></table></figure>

<h4 id="九、重启mysql"><a href="#九、重启mysql" class="headerlink" title="九、重启mysql"></a>九、重启mysql</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">docker restart mysql</span><br></pre></td></tr></table></figure>

<h4 id="十、授权远程访问"><a href="#十、授权远程访问" class="headerlink" title="十、授权远程访问"></a>十、授权远程访问</h4><p>　　不进行授权直接登陆的话会报错的如图：</p>
<p>　　<img src="/blog/other/img_7.png" alt="image"></p>
<h5 id="10-1-进入容器内部"><a href="#10-1-进入容器内部" class="headerlink" title="10.1 进入容器内部"></a>10.1 进入容器内部</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it mysql /bin/bash</span><br></pre></td></tr></table></figure>

<h5 id="10-2-登陆mysql"><a href="#10-2-登陆mysql" class="headerlink" title="10.2 登陆mysql"></a>10.2 登陆mysql</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql -u root -p</span><br></pre></td></tr></table></figure>

<p>　　此时我们使用mysql客户端连接服务器是失败的，因为默认的root不具有远程连接的权限。</p>
<p>　　执行命令(root改为自己的密码)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// %:表示从任何主机连接到mysql服务器</span></span><br><span class="line">GRANT ALL PRIVILEGES ON *.* TO <span class="string">'root'</span>@<span class="string">'%'</span> IDENTIFIED BY <span class="string">'root'</span> WITH GRANT OPTION;</span><br><span class="line"><span class="comment">//刷新</span></span><br><span class="line">flush privileges;</span><br></pre></td></tr></table></figure>

<h4 id="十一、无法访问的其他处理方式"><a href="#十一、无法访问的其他处理方式" class="headerlink" title="十一、无法访问的其他处理方式"></a>十一、无法访问的其他处理方式</h4><p>　　检查端口是否开启</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"># 查看防火墙开放的端口信息</span><br><span class="line">firewall-cmd --list-ports</span><br><span class="line"></span><br><span class="line"># 查看防火墙状态</span><br><span class="line"> systemctl status firewalld</span><br><span class="line"></span><br><span class="line"># 开启防火墙</span><br><span class="line"> systemctl start firewalld</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 开启3306端口</span><br><span class="line">firewall-cmd --zone=<span class="keyword">public</span> --add-port=<span class="number">3306</span>/tcp --permanent</span><br><span class="line"># 刷新</span><br><span class="line">firewall-cmd --reload</span><br><span class="line"></span><br><span class="line">--zone : 作用域</span><br><span class="line">--add-port=<span class="number">9044</span>/tcp : 添加端口，格式为：端口/通讯协议</span><br><span class="line">--permanent : 永久生效，没有此参数重启后失效</span><br><span class="line"></span><br><span class="line">#重启防火墙（输入命令后防火墙先关闭再启用）</span><br><span class="line">systemctl restart firewalld</span><br><span class="line"></span><br><span class="line">#暂时关闭防火墙</span><br><span class="line">systemctl stop firewalld</span><br><span class="line"></span><br><span class="line">#启用防火墙（关闭状态使用）</span><br><span class="line">systemctl start firewalld</span><br><span class="line">#永久禁用防火墙（设置开机不自启动）</span><br><span class="line">systemctl disable firewalld</span><br><span class="line">#开机自动启用防火墙</span><br><span class="line">systemctl enable firewalld</span><br></pre></td></tr></table></figure>

<p>　　‍</p>
]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker安装Redis</title>
    <url>/Other/docker_redis.html</url>
    <content><![CDATA[ <br>
<a id="more"></a>

<h1 id="Docker安装Redis"><a href="#Docker安装Redis" class="headerlink" title="Docker安装Redis"></a>Docker安装Redis</h1><p>　　阿里云服务器（centos7.9）<br>docker 1.13.1<br>安装模式<br>单机版</p>
<h3 id="一、检查docker中是否有redis容器和镜像"><a href="#一、检查docker中是否有redis容器和镜像" class="headerlink" title="一、检查docker中是否有redis容器和镜像"></a>一、检查docker中是否有redis容器和镜像</h3><p>　　#查看所有容器 docker ps -a  </p>
<p>#查看镜像 docker images</p>
<h3 id="二、拉取redis镜像"><a href="#二、拉取redis镜像" class="headerlink" title="二、拉取redis镜像"></a>二、拉取redis镜像</h3><p>　　#不指定版本号，默认拉取最新版的redis docker pull redis  </p>
<p>#指定的版本号 docker pull redis:5.0.7 查看镜像是否拉取成功docker images</p>
<h3 id="三、启动容器"><a href="#三、启动容器" class="headerlink" title="三、启动容器"></a>三、启动容器</h3><p>　　3.1 直接启动</p>
<p>　　#myredis是启动之后的docker容器名称 docker run –name myredis -d redis</p>
<p>　　3.2 以配置文件启动（推荐）<br>1、创建目录存放redis.conf文件</p>
<p>　　mkdir /opt/docker_redis<br>cd /opt/docker_redis</p>
<p>　　2、配置redis.conf文件</p>
<p>　　    redis.conf文件<a href="2、配置redis.conf文件">^1</a></p>
<p>　　3、文件授权</p>
<p>　　#给指定文件授权 chmod 777 redis.conf</p>
<p>　　4、修改默认配置信息</p>
<p>　　vi /opt/docker_redis/redis.conf</p>
<p>　　bind 127.0.0.1 通过#注释掉，解除本地连接限制</p>
<p>　　protected-mode yes  默认no，保护模式，限制为本地访问，修改后解除保护模式</p>
<p>　　daemonize yes 默认no 为不守护进程模式，修改为yes</p>
<p>　　requirepass 设置密码（建议设置，不设置有风险）</p>
<p>　　持久化(可选)</p>
<p>　　5、​docker启动redis命令​</p>
<p>　　docker run -d –name redis-6379 –restart=always –log-opt max-size=100m –log-opt max-file=2 -p 6379:6379 -v /www/data/work/redis/conf/redis.conf:/usr/local/etc/redis/redis.conf -v /www/data/work/redis/data:/usr/local/data  redis redis-server /usr/local/etc/redis/redis.conf –appendonly yes</p>
<h3 id="参数解析"><a href="#参数解析" class="headerlink" title="参数解析"></a>参数解析</h3><ul>
<li><strong>【 –restart=always】 开机启动，失败也会一直重启；</strong></li>
<li><strong>【–log-opt max-size=100m】意味着一个容器日志大小上限是100M;</strong></li>
<li><strong>【–log-opt max-file=2】意味着一个容器有2个日志，分别是id+.json、id+1.json;</strong></li>
<li><strong>【-p 6379:6379】 将宿主机6379端口与容器内6379端口进行映射；</strong></li>
<li><strong>【-v】 将宿主机目录或文件与容器内目录或文件进行挂载映射；</strong></li>
<li><strong>【-itd】i：以交互模式运行容器，通常与 -t 同时使用；t：为容器重新分配一个伪输入终端，通常与 -i 同时使用；d：表示后台启动redis；</strong></li>
<li><strong>【–name】 给容器命名；</strong></li>
<li><strong>【–appendonly yes】 开启redis 持久化；</strong></li>
<li><strong>【–requirepass qwe123】 强烈建议设置密码，并且将密码设置为高强度复杂；</strong></li>
<li><strong>【redis-server /etc/redis/redis.conf】 以配置文件启动redis，加载容器内的conf文件；</strong></li>
</ul>
<p>　　6、检查redis容器是否在运行</p>
<p>　　docker ps</p>
<p>　　7、使用连接工具测试，使用云服务器放开相应端口号</p>
<h3 id="四、注意事项"><a href="#四、注意事项" class="headerlink" title="四、注意事项"></a>四、注意事项</h3><p>　　参考网上博文安装失败的原因在于没有说明要给redis.conf文件授权，对于小白来说比较容易忽略。如果使用我的办法没有用的话。请参考Docker挂载主机目录Docker访问出现Permission denied的解决办法</p>
]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker部署JAVA程序</title>
    <url>/Other/docker_java.html</url>
    <content><![CDATA[ <br>
<a id="more"></a>

<h1 id="Docker部署JAVA程序"><a href="#Docker部署JAVA程序" class="headerlink" title="Docker部署JAVA程序"></a>Docker部署JAVA程序</h1><p>　　拉取tomcat镜像</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">docker pull tomca<span class="variable">t:8</span></span><br></pre></td></tr></table></figure>

<p>　　构建tomcat容器</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">docker run -d  --restart=always  --name tomcat-<span class="number">8086</span> -<span class="keyword">p</span> <span class="number">8086</span>:<span class="number">8080</span> \</span><br><span class="line">  -v /www/data/work/tomcat/tomcat-<span class="number">8086</span>/webapp<span class="variable">s:</span>/usr/local/tomcat/webapps \</span><br><span class="line">  -v /www/data/work/licence:/usr/local/licence \</span><br><span class="line">  -v /www/data/work/logs/tomcat-<span class="number">8086</span>:/usr/local/logs \</span><br><span class="line">  -<span class="keyword">e</span> TZ=Asia/Shanghai tomca<span class="variable">t:8</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>将程序放入宿主机的webapps中”/www/data/work/tomcat/tomcat-8086/webapps”</p>
</blockquote>
<p>　　注意:要开发<code>映射</code>的端口否则无法访问</p>
]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>jdk本地生成SSL</title>
    <url>/Other/jdk_SSL.html</url>
    <content><![CDATA[ <br>
<a id="more"></a>

<h1 id="jdk本地生成SSL"><a href="#jdk本地生成SSL" class="headerlink" title="jdk本地生成SSL"></a>jdk本地生成SSL</h1><p>　　使用以下命令就可以生成一个证书：</p>
<p>　　keytool -genkey -alias gateway -storetype PKCS12 -keyalg RSA -keysize 2048 -keystore scg-keystore.p12  -validity 3650</p>
<p>　　命令参数说明</p>
<p>　　-genkey 生成秘钥</p>
<p>　　-alias 别名</p>
<p>　　-keyalg 秘钥算法</p>
<p>　　-keysize 秘钥长度</p>
<p>　　-validity 有效期（天）</p>
<p>　　-keystore 生成秘钥库的存储路径和名称</p>
<p>　　-keypass 秘钥口令</p>
<p>　　-storepass 秘钥库口令</p>
<p>　　-dname 拥有者信息，CN：姓名；OU：组织单位名称；O：组织名称；L：省/市/自治区名称；C：国家/地区代码</p>
<p>　　yml中配置SSL 证书：</p>
<p>　　server:<br>  port: 443</p>
<p>　　#配置SSL 证书</p>
<p>　　ssl:<br>    enabled: true<br>    # 证书位置<br>    key-store: classpath:scg-keystore.p12<br>    # 证书别名<br>    key-alias: gateway<br>    # 秘钥库类型<br>    key-store-type: PKCS12<br>    # 秘钥库口令（密码）<br>    key-store-password: 123123</p>
<p>　　‍</p>
]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>教程</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker可视化管理工具Portainer</title>
    <url>/Other/docker_portainer.html</url>
    <content><![CDATA[ <br>
<a id="more"></a>

<h1 id="Docker可视化管理工具Portainer"><a href="#Docker可视化管理工具Portainer" class="headerlink" title="Docker可视化管理工具Portainer"></a>Docker可视化管理工具Portainer</h1><h4 id="搜索镜像"><a href="#搜索镜像" class="headerlink" title="搜索镜像"></a>搜索镜像</h4><p>　　docker search portainer</p>
<p>　　‍</p>
<h4 id="拉取镜像命令"><a href="#拉取镜像命令" class="headerlink" title="拉取镜像命令"></a>拉取镜像命令</h4><p>　　docker pull portainer/portainer-ce</p>
<h4 id="查看镜像命令"><a href="#查看镜像命令" class="headerlink" title="查看镜像命令"></a>查看镜像命令</h4><p>　　docker images</p>
<h4 id="启动容器"><a href="#启动容器" class="headerlink" title="启动容器"></a>启动容器</h4><p>　　docker run -d -p 9000:9000 –restart=always –name prtainer -v /var/run/docker.sock:/var/run/docker.sock -e TZ=Asia/Shanghai portainer/portainer-ce</p>
<h4 id="查看启动中的容器"><a href="#查看启动中的容器" class="headerlink" title="查看启动中的容器"></a>查看启动中的容器</h4><p>　　docker ps</p>
]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>原有http访问跳转到https</title>
    <url>/Other/http_https.html</url>
    <content><![CDATA[ <br>
<a id="more"></a>

<h1 id="原有http访问跳转到https"><a href="#原有http访问跳转到https" class="headerlink" title="原有http访问跳转到https"></a>原有http访问跳转到https</h1><p>　　@Bean<br> public Connector connector(){　　　<br>     Connector connector = new Connector(“org.apache.coyote.http11.Http11NioProtocol”);<br>     connector.setScheme(“http”);</p>
<p>　　//http<br>     connector.setPort(80);<br>     connector.setSecure(false);</p>
<p>　　 //https<br>     connector.setRedirectPort(443);<br>     return connector;<br> }</p>
<p>　　 @Bean<br> public TomcatServletWebServerFactory tomcatServletWebServerFactory(Connector connector){<br>     TomcatServletWebServerFactory tomcat=new TomcatServletWebServerFactory(){<br>         @Override<br>         protected void postProcessContext(Context context) {<br>             SecurityConstraint securityConstraint = new SecurityConstraint();<br>             securityConstraint.setUserConstraint(“CONFIDENTIAL”);<br>             SecurityCollection collection = new SecurityCollection();<br>             collection.addPattern(“/*”);<br>             securityConstraint.addCollection(collection);<br>             context.addConstraint(securityConstraint);<br>         }<br>     };<br>     tomcat.addAdditionalTomcatConnectors(connector);<br>     return tomcat;<br> }</p>
]]></content>
      <categories>
        <category>other</category>
      </categories>
      <tags>
        <tag>其他</tag>
      </tags>
  </entry>
  <entry>
    <title>引入jackson-dataformat-xml的影响</title>
    <url>/Other/jackson_dataformat_xml.html</url>
    <content><![CDATA[ <br>
<a id="more"></a>

<h1 id="引入jackson-dataformat-xml的影响"><a href="#引入jackson-dataformat-xml的影响" class="headerlink" title="引入jackson-dataformat-xml的影响"></a>引入jackson-dataformat-xml的影响</h1><p>　　：</p>
<p>　　调用其他API出错原因</p>
<p>　　1:项目中使用的RestTemplate进行调用，当引入jackson-dataformat-xml，RestTemplate的messageConverter里面会增加MappingJackson2XmlHttpMessageConverter，并且优先级高于MappingJackson2HttpMessageConverter，由于没有指定accept，导致调用的时候accept传递为xml</p>
<p>　　解决方式：header中指定accept为application/json</p>
<p>　　2:项目返回xml原因</p>
<p>　　a. 在解析mvc:annotation-driven时，会创建RequestMappingHandlerAdapter的Bean定义，messageConverter因为没有设置register-defaults，因此也会增加MappingJackson2XmlHttpMessageConverter<br>b. 系统在返回时会调用org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessor#handleReturnValue，这个里面会使用messageConverter，同上的优先级的原因导致返回xml</p>
<p>　　‍</p>
]]></content>
      <categories>
        <category>other</category>
      </categories>
      <tags>
        <tag>其他</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux中二进制安装Mysql</title>
    <url>/Other/linux_mysql.html</url>
    <content><![CDATA[ <br>
<a id="more"></a>

<h1 id="Linux中二进制安装Mysql"><a href="#Linux中二进制安装Mysql" class="headerlink" title="Linux中二进制安装Mysql"></a>Linux中二进制安装Mysql</h1><figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line"></span><br><span class="line">#解决软件的依赖关系</span><br><span class="line">yum  install cmake ncurses-devel gcc  gcc-<span class="keyword">c</span>++  <span class="keyword">vim</span>  lsof bzip2 openssl-devel ncurses-compat-libs -<span class="keyword">y</span></span><br><span class="line"></span><br><span class="line">#解压mysql二进制安装包</span><br><span class="line">tar  xf  mysql-<span class="number">5.7</span>.<span class="number">36</span>-linux-glibc2.<span class="number">12</span>-x86_64.tar.gz</span><br><span class="line"></span><br><span class="line">#移动mysql解压后的文件到/usr/local下改名叫mysql</span><br><span class="line">mv mysql-<span class="number">5.7</span>.<span class="number">34</span>-linux-glibc2.<span class="number">12</span>-x86_64 /usr/local/mysql</span><br><span class="line"></span><br><span class="line">#新建组和用户 mysql</span><br><span class="line">groupadd mysql</span><br><span class="line">#mysql这个用户的<span class="keyword">shell</span> 是/bin/false 属于mysql组 </span><br><span class="line">useradd -r -g mysql -s /bin/false mysql</span><br><span class="line"></span><br><span class="line">#关闭firewalld防火墙服务，并且设置开机不要启动</span><br><span class="line">service firewalld <span class="keyword">stop</span></span><br><span class="line">systemctl  disable  firewalld</span><br><span class="line"></span><br><span class="line">#临时关闭selinux</span><br><span class="line">setenforce <span class="number">0</span></span><br><span class="line">#永久关闭selinux</span><br><span class="line">sed -i <span class="string">'/^SELINUX=/ s/enforcing/disabled/'</span>  /etc/selinux/config</span><br><span class="line"></span><br><span class="line">#新建存放数据的目录</span><br><span class="line"><span class="built_in">mkdir</span>  /data/mysql -<span class="keyword">p</span></span><br><span class="line">#修改/data/mysql目录的权限归mysql用户和mysql组所有，这样mysql用户可以对这个文件夹进行读写了</span><br><span class="line">chown roo<span class="variable">t:root</span> /data/mysql/</span><br><span class="line">#只是允许mysql这个用户和mysql组可以访问，其他人都不能访问</span><br><span class="line">chmod <span class="number">750</span> /data/mysql/</span><br><span class="line"></span><br><span class="line">#进入/usr/local/mysql/bin目录</span><br><span class="line"><span class="keyword">cd</span> /usr/local/mysql/bin/</span><br><span class="line"></span><br><span class="line">#初始化mysql</span><br><span class="line">./mysqld  --initialize --user=mysql --basedir=/usr/local/mysql/  --datadir=/data/mysql  &amp;&gt;passwd.txt</span><br><span class="line"></span><br><span class="line">#让mysql支持ssl方式登录的设置</span><br><span class="line">./mysql_ssl_rsa_setup --datadir=/data/mysql/</span><br><span class="line"></span><br><span class="line">#获得临时密码</span><br><span class="line">tem_passwd=$(<span class="keyword">cat</span> passwd.txt |<span class="keyword">grep</span> <span class="string">"temporary"</span>|awk <span class="string">'&#123;print $NF&#125;'</span>)</span><br><span class="line">  #$NF表示最后一个字段</span><br><span class="line">  # <span class="keyword">abc</span>=$(命令)  优先执行命令，然后将结果赋值给<span class="keyword">abc</span> </span><br><span class="line"></span><br><span class="line"># 修改PATH变量，加入mysql bin目录的路径</span><br><span class="line">#临时修改PATH变量的值</span><br><span class="line">export PATH=/usr/local/mysql/bin/:$PATH</span><br><span class="line">#重新启动linux系统后也生效，永久修改</span><br><span class="line"><span class="keyword">echo</span>  <span class="string">'PATH=/usr/local/mysql/bin:$PATH'</span> &gt;&gt;/root/.bashrc</span><br><span class="line"></span><br><span class="line">#复制support-<span class="keyword">files</span>里的mysql.server文件到/etc/init.d/目录下叫mysqld</span><br><span class="line"><span class="keyword">cp</span>  ../support-<span class="keyword">files</span>/mysql.server   /etc/init.d/mysqld</span><br><span class="line"></span><br><span class="line">#修改/etc/init.d/mysqld脚本文件里的datadir目录的值</span><br><span class="line">sed  -i <span class="string">'70c  datadir=/data/mysql'</span>  /etc/init.d/mysqld</span><br><span class="line"></span><br><span class="line">#生成/etc/my.<span class="keyword">cnf</span>配置文件</span><br><span class="line"><span class="keyword">cat</span>  &gt;/etc/my.<span class="keyword">cnf</span>  &lt;&lt;EOF</span><br><span class="line">[mysqld_safe]</span><br><span class="line"></span><br><span class="line">[client]</span><br><span class="line">socket=/data/mysql/mysql.sock</span><br><span class="line"></span><br><span class="line">[mysqld]</span><br><span class="line">socket=/data/mysql/mysql.sock</span><br><span class="line">port = <span class="number">3306</span></span><br><span class="line">open_files_limit = <span class="number">8192</span></span><br><span class="line">innodb_buffer_pool_size = <span class="number">512</span>M</span><br><span class="line">character-<span class="keyword">set</span>-server=utf8</span><br><span class="line"></span><br><span class="line">[mysql]</span><br><span class="line">auto-rehash</span><br><span class="line">prompt=\\u@\\d \\R:\\<span class="keyword">m</span>  mysql&gt;</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">#修改内核的<span class="keyword">open</span> <span class="keyword">file</span>的数量</span><br><span class="line">ulimit -n <span class="number">1000000</span></span><br><span class="line">#设置开机启动的时候也配置生效</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"ulimit -n 1000000"</span> &gt;&gt;/etc/rc.local</span><br><span class="line">chmod +<span class="keyword">x</span> /etc/rc.d/rc.local</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#启动mysqld进程</span><br><span class="line">service mysqld start</span><br><span class="line"></span><br><span class="line">#将mysqld添加到linux系统里服务管理名单里</span><br><span class="line">/sbin/chkconfig --<span class="built_in">add</span> mysqld</span><br><span class="line">#设置mysqld服务开机启动</span><br><span class="line">/sbin/chkconfig mysqld <span class="keyword">on</span></span><br><span class="line"></span><br><span class="line">#初次修改密码需要使用--connect-expired-password 选项</span><br><span class="line">#-<span class="keyword">e</span> 后面接的表示是在mysql里需要执行命令  <span class="keyword">execute</span> 执行</span><br><span class="line">#set password='Sanchuang123#';  修改root用户的密码为Sanchuan123#</span><br><span class="line">mysql -uroot -<span class="keyword">p</span>$tem_passwd --connect-expired-password   -<span class="keyword">e</span>  <span class="string">"set password='root';"</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#检验上一步修改密码是否成功，如果有输出能看到mysql里的数据库，说明成功。</span><br><span class="line">mysql -uroot -<span class="keyword">p</span><span class="string">'root'</span>  -<span class="keyword">e</span> <span class="string">"show databases;"</span></span><br><span class="line"></span><br><span class="line">Navicat连接mysql时报错<span class="keyword">is</span> not allowed <span class="keyword">to</span> connect <span class="keyword">to</span> this MySQL</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>教程</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux安装最新版Docker完整教程</title>
    <url>/Other/linux_docker.html</url>
    <content><![CDATA[ <br>
<a id="more"></a>

<h1 id="Linux安装最新版Docker完整教程"><a href="#Linux安装最新版Docker完整教程" class="headerlink" title="Linux安装最新版Docker完整教程"></a>Linux安装最新版Docker完整教程</h1><p>　　Linux安装最新版Docker完整教程</p>
<h4 id="一、安装前准备工作"><a href="#一、安装前准备工作" class="headerlink" title="一、安装前准备工作"></a>一、安装前准备工作</h4><h5 id="1-1-查看服务器系统版本以及内核版本"><a href="#1-1-查看服务器系统版本以及内核版本" class="headerlink" title="1.1 查看服务器系统版本以及内核版本"></a>1.1 查看服务器系统版本以及内核版本</h5><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">cat</span> <span class="string">/etc/redhat-release</span></span><br></pre></td></tr></table></figure>

<h5 id="1-2-查看服务器内核版本"><a href="#1-2-查看服务器内核版本" class="headerlink" title="1.2 查看服务器内核版本"></a>1.2 查看服务器内核版本</h5><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">uname</span> <span class="bullet">-r</span></span><br></pre></td></tr></table></figure>

<p>　　这里我们使用的是CentOS 7.4 系统，内核版本为3.10</p>
<h4 id="1-3-安装依赖包"><a href="#1-3-安装依赖包" class="headerlink" title="1.3 安装依赖包"></a>1.3 安装依赖包</h4><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">yum</span> <span class="string">install</span> <span class="bullet">-y</span> <span class="string">yum-utils</span> <span class="string">device-mapper-persistent-data</span> <span class="string">lvm2</span></span><br></pre></td></tr></table></figure>

<h4 id="1-4-设置阿里云镜像源"><a href="#1-4-设置阿里云镜像源" class="headerlink" title="1.4 设置阿里云镜像源"></a>1.4 设置阿里云镜像源</h4><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">yum-config-manager</span> <span class="bullet">--add-repo</span> <span class="attr">https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span></span><br></pre></td></tr></table></figure>

<h4 id="二、安装Docker"><a href="#二、安装Docker" class="headerlink" title="二、安装Docker"></a>二、安装Docker</h4><h5 id="2-1-Docker版本说明"><a href="#2-1-Docker版本说明" class="headerlink" title="2.1 Docker版本说明"></a>2.1 Docker版本说明</h5><blockquote>
<p>Docker从17.03版本之后分为两个版本：社区版（Community Edition，缩写为 CE）和企业版（Enterprise Edition，缩写为 EE）。<br>企业版包含了一些收费服务，个人开发者一般用不到，所以我们只需要安装社区版docker-ce版本即可。</p>
</blockquote>
<h4 id="2-2-docker-ce安装"><a href="#2-2-docker-ce安装" class="headerlink" title="2.2 docker-ce安装"></a>2.2 docker-ce安装</h4><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">yum</span> <span class="string">install</span> <span class="bullet">-y</span> <span class="string">docker-ce</span></span><br></pre></td></tr></table></figure>

<h5 id="2-3-启动docker并设置开机自启"><a href="#2-3-启动docker并设置开机自启" class="headerlink" title="2.3 启动docker并设置开机自启"></a>2.3 启动docker并设置开机自启</h5><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#启动docker命令</span></span><br><span class="line"><span class="string">systemctl</span> <span class="string">start</span> <span class="string">docker</span></span><br><span class="line"><span class="comment">#设置开机自启命令</span></span><br><span class="line"><span class="string">systemctl</span> <span class="string">enable</span> <span class="string">docker</span></span><br><span class="line"><span class="comment">#查看docker版本命令</span></span><br><span class="line"><span class="string">docker</span> <span class="string">version</span></span><br></pre></td></tr></table></figure>

<p>　　三、Docker基本概念介绍</p>
<h5 id="3-1-仓库-repository"><a href="#3-1-仓库-repository" class="headerlink" title="3.1 仓库 (repository)"></a>3.1 仓库 (repository)</h5><blockquote>
<p>docker仓库是用来保存镜像的地方。镜像构建完成后，可以直接在当前宿主机上运行，但是如果需要在其它服务器上使用这个镜像，<br>就需要一个集中存储、分发镜像的服务，docker仓库就是这样的一个服务。</p>
</blockquote>
<h5 id="3-2-镜像-Image"><a href="#3-2-镜像-Image" class="headerlink" title="3.2 镜像(Image)"></a>3.2 镜像(Image)</h5><blockquote>
<p>这里面保存了应用和需要的依赖环境，比如运行的runtime和webapp等。<br>为什么需要多个镜像？当开发、构建和运行容器化应用程序时，我们通常会有不同优先级。通过为这些独立的任务提供不同镜像</p>
</blockquote>
<h5 id="3-3-容器-Container"><a href="#3-3-容器-Container" class="headerlink" title="3.3 容器(Container)"></a>3.3 容器(Container)</h5><blockquote>
<p>镜像的实例。一个容器代表一个正在运行的应用程序、进程或服务。它由 Docker 镜像、执行环境和标准指令集组成。需要扩展服务时，才<br>真正将镜像跑起来的东西，镜像在容器里面。可以看作是一个完全隔离的盒子。一个容器镜像实例代表一个独立的进程。</p>
</blockquote>
<h4 id="四、Docker常用命令"><a href="#四、Docker常用命令" class="headerlink" title="四、Docker常用命令"></a>四、Docker常用命令</h4><figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">docker <span class="built_in">search</span> --镜像名    搜索仓库镜像</span><br><span class="line"></span><br><span class="line">docker pull --镜像名    拉取镜像</span><br><span class="line"></span><br><span class="line">docker <span class="keyword">ps</span>     查看目前正在运行的所有容器 （-<span class="keyword">a</span> 显示包括已经停止的容器）</span><br><span class="line"></span><br><span class="line">docker rmi image_id/image_name    删除镜像</span><br><span class="line"></span><br><span class="line">docker build    使用Dockerfile创建镜像</span><br><span class="line"></span><br><span class="line">docker run    运行容器</span><br><span class="line"></span><br><span class="line">docker exec    进入容器中执行命令 （例如:docker exec -it  container_id/container_name /bin/bash）</span><br><span class="line"></span><br><span class="line">docker logs  container_id/container_name   查看容器日志（例如:docker logs -<span class="keyword">f</span> -t --tail <span class="number">10</span> container_id ）</span><br><span class="line"></span><br><span class="line">docker start  container_id/container_name    启动容器</span><br><span class="line"></span><br><span class="line">docker restart  container_id/container_name    重启容器</span><br><span class="line"></span><br><span class="line">docker <span class="keyword">stop</span> container_id/container_name    停止容器</span><br><span class="line"></span><br><span class="line">docker rm container_id/container_name    删除容器（只能删除已停止的容器）</span><br><span class="line"></span><br><span class="line">更多的命令可以通过docker <span class="keyword">help</span>命令来查看。</span><br></pre></td></tr></table></figure>

<h4 id="五、安装Docker可视化管理工具Portainer"><a href="#五、安装Docker可视化管理工具Portainer" class="headerlink" title="五、安装Docker可视化管理工具Portainer"></a>五、安装Docker可视化管理工具Portainer</h4><h5 id="5-1-搜索镜像"><a href="#5-1-搜索镜像" class="headerlink" title="5.1 搜索镜像"></a>5.1 搜索镜像</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">docker search portainer</span><br></pre></td></tr></table></figure>

<p><img src="/blog/other/img_6.png" alt="image"></p>
<h5 id="5-2-拉取镜像"><a href="#5-2-拉取镜像" class="headerlink" title="5.2 拉取镜像"></a>5.2 拉取镜像</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">#拉取镜像命令</span><br><span class="line">docker pull portainer/portainer</span><br><span class="line">#查看镜像命令</span><br><span class="line">docker images</span><br></pre></td></tr></table></figure>

<p><img src="/blog/other/img_8.png" alt="image"></p>
<h5 id="5-3-运行镜像（启动Portainer容器）"><a href="#5-3-运行镜像（启动Portainer容器）" class="headerlink" title="5.3 运行镜像（启动Portainer容器）"></a>5.3 运行镜像（启动Portainer容器）</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">#创建数据卷</span><br><span class="line">docker volume create portainer_data</span><br><span class="line">#启动容器</span><br><span class="line">docker run -d -p <span class="number">9000</span>:<span class="number">9000</span> --restart=always --name prtainer -v /<span class="keyword">var</span>/run/docker.sock:/<span class="keyword">var</span>/run/docker.sock -v portainer_data:/data portainer/portainer</span><br><span class="line">#查看启动中的容器</span><br><span class="line">docker ps</span><br></pre></td></tr></table></figure>

<blockquote>
<p>启动参数说明：</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">-it  输出容器命令行的内容 即容器的自身的程序输出在控制台 有点类似前台运行</span><br><span class="line"></span><br><span class="line">-d  和it相反  隐藏后台运行</span><br><span class="line"></span><br><span class="line">-p  端口映射 <span class="number">9000</span>::<span class="number">9000</span> 外部(宿主机)端口:镜像里面运行的端口 将宿主机<span class="number">9000</span>端口映射到镜像里面的<span class="number">9000</span>端口</span><br><span class="line"></span><br><span class="line">--restart  重启方式：always跟随docker自启</span><br><span class="line"></span><br><span class="line">--name  启动后的容器名称</span><br><span class="line"></span><br><span class="line">-v  挂载容器数据卷</span><br><span class="line"></span><br><span class="line">--network  连接到某个网络（例如：--network test_net）</span><br><span class="line"></span><br><span class="line">--network-alias  容器的网络名称（例如：--network-alias portainer）</span><br></pre></td></tr></table></figure>

<p><img src="/blog/other/img_9.png" alt="image"></p>
<h5 id="5-4-访问Portainer客户端"><a href="#5-4-访问Portainer客户端" class="headerlink" title="5.4 访问Portainer客户端"></a>5.4 访问Portainer客户端</h5><blockquote>
<p>访问地址：<a href="http://192.168.0.128:9000，首次访问需要设置admin管理员登录密码" target="_blank" rel="noopener">http://192.168.0.128:9000，首次访问需要设置admin管理员登录密码</a></p>
</blockquote>
<p><img src="/blog/other/img_10.png" alt="image"></p>
<blockquote>
<p>选择管理单机版的Docker</p>
</blockquote>
<p><img src="/blog/other/img_11.png" alt="image"></p>
<blockquote>
<p>点击进去控制台界面</p>
</blockquote>
<p><img src="/blog/other/img_12.png" alt="image"></p>
<p><img src="/blog/other/img_13.png" alt="image"></p>
<blockquote>
<p>点击进入容器管理界面，在这里可以管理我们运行的容器</p>
</blockquote>
<p><img src="/blog/other/img_14.png" alt="image"></p>
<h4 id="六、卸载Docker"><a href="#六、卸载Docker" class="headerlink" title="六、卸载Docker"></a>六、卸载Docker</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#删除docker-ce命令</span></span><br><span class="line">yum remove docker-ce</span><br><span class="line"><span class="comment">#删除镜像、容器、配置文件等内容</span></span><br><span class="line">rm -rf /var/lib/containerd</span><br><span class="line">rm -rf /var/lib/docker</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>教程</tag>
      </tags>
  </entry>
  <entry>
    <title>微信小程序开发过程问题以及解决方法</title>
    <url>/WeChat/WeChat_question.html</url>
    <content><![CDATA[ <br>
<a id="more"></a>

<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote>
<p>记录微信小程序开发过程中出现的问题以及解决的方法,此篇文章会不定期的更新；</p>
</blockquote>
<h1 id="关于跳转"><a href="#关于跳转" class="headerlink" title="关于跳转"></a>关于跳转</h1><ul>
<li><p><a href="https://developers.weixin.qq.com/miniprogram/dev/api/route/wx.navigateTo.html" target="_blank" rel="noopener">navigateTo</a>:表示不破坏当前页序，在当前页面进行跳转</p>
</li>
<li><p><a href="https://developers.weixin.qq.com/miniprogram/dev/api/route/wx.switchTab.html" target="_blank" rel="noopener">switchTab</a>:跳转到 tabBar 页面，并关闭其他所有非 tabBar 页面</p>
</li>
</ul>
<p>微信小程序用户信息授权的时候，当用户点击允许授权后，需要跳转到业务层我使用navigateTo进行跳转，但是授权成功后还是我不能跳转,通过调试之后，方法执行，但是未进行跳转<br>后来发现，如果要跳转的页面已经设置成了tabBar，则不能用navigateTo了，只能用switchTab，也就是在tab之间去跳转<br>wx.navigateTo/wx.redirectTo只能用在非tabBar页面的跳转，要跳转到tabBar页面，需要使用wx.switchTab；</p>
<p>参考文章:<a href="https://www.jianshu.com/p/d9561e18f9a1" target="_blank" rel="noopener">微信小程序之跳转wx.switchTab</a></p>
]]></content>
      <categories>
        <category>WeChat</category>
      </categories>
      <tags>
        <tag>WeChat</tag>
      </tags>
  </entry>
  <entry>
    <title>Portainer管理服务器的Docker</title>
    <url>/Other/portainer_docker.html</url>
    <content><![CDATA[ <br>
<a id="more"></a>

<h1 id="Portainer管理服务器的Docker"><a href="#Portainer管理服务器的Docker" class="headerlink" title="Portainer管理服务器的Docker"></a>Portainer管理服务器的Docker</h1><p>　　‍</p>
<h4 id="被管理的Docker修改"><a href="#被管理的Docker修改" class="headerlink" title="被管理的Docker修改"></a>被管理的Docker修改</h4><ul>
<li>vi /usr/lib/systemd/system/docker.service 修改 [Service]的ExecStart，增加 -H tcp://0.0.0.0:2375</li>
</ul>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">[Service]</span><br><span class="line">Type=notify</span><br><span class="line"># the default <span class="keyword">is</span> not <span class="keyword">to</span> use systemd <span class="keyword">for</span> cgroups because the delegate issues still</span><br><span class="line"># <span class="built_in">exists</span> <span class="built_in">and</span> systemd currently does not support the cgroup feature <span class="keyword">set</span> required</span><br><span class="line"># <span class="keyword">for</span> containers run by docker</span><br><span class="line">ExecStart=/usr/bin/dockerd -H tcp://<span class="number">0.0</span>.<span class="number">0.0</span>:<span class="number">2375</span> -H fd:// --containerd=/run/containerd/containerd.sock</span><br></pre></td></tr></table></figure>

<ul>
<li>刷新配置文件，重启docker</li>
</ul>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl restart docker</span><br></pre></td></tr></table></figure>

<ul>
<li>查看docker进程是否监听</li>
</ul>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# netstat -ano | <span class="keyword">grep</span> <span class="number">2375</span></span><br><span class="line">tcp6       <span class="number">0</span>      <span class="number">0</span> :::<span class="number">2375</span>                 :::*                    LISTEN      off (<span class="number">0.00</span>/<span class="number">0</span>/<span class="number">0</span>)</span><br></pre></td></tr></table></figure>

<ul>
<li><p>查看系统网络端口2375是否被docker所监听</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# netstat -tulp</span><br><span class="line">Active Internet connections (<span class="keyword">only</span> servers)</span><br><span class="line">Proto Recv-Q Send-Q Local Address           Foreign Address         State       PID/Program name  </span><br><span class="line">tcp        <span class="number">0</span>      <span class="number">0</span> <span class="number">0.0</span>.<span class="number">0.0</span>:ssh             <span class="number">0.0</span>.<span class="number">0.0</span>:*               LISTEN      <span class="number">3124</span>/sshd         </span><br><span class="line">tcp        <span class="number">0</span>      <span class="number">0</span> localhos<span class="variable">t:smtp</span>          <span class="number">0.0</span>.<span class="number">0.0</span>:*               LISTEN      <span class="number">3379</span>/master       </span><br><span class="line">tcp6       <span class="number">0</span>      <span class="number">0</span> [::]:<span class="number">2375</span>               [::]:*                  LISTEN      <span class="number">13964</span>/dockerd</span><br></pre></td></tr></table></figure>
</li>
<li><p>添加防火墙2375/tcp ，并重载防火墙</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]#  firewall-cmd --zone=public --<span class="built_in">add</span>-port=<span class="number">2375</span>/tcp --permanent</span><br><span class="line">success</span><br><span class="line">[root@localhost ~]# firewall-cmd --reload</span><br><span class="line">success</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p>　　‍</p>
<h4 id="portainer进行添加"><a href="#portainer进行添加" class="headerlink" title="portainer进行添加"></a>portainer进行添加</h4>]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>即时通讯-单聊(四)</title>
    <url>/IM/Im_SingleChat.html</url>
    <content><![CDATA[ <br>
<a id="more"></a>

<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><div class="note info"><p>已经实现了服务端的配置以及客户端的展示,下面需要进行单聊和群聊功能的实现,以下为具体的实现方式和代码。</p></div>
<h1 id="单聊"><a href="#单聊" class="headerlink" title="单聊"></a>单聊</h1><p>LayIM官网文档对发送消息所包含的信息<br><img src="/blog/im/1576118835(1).jpg" alt></p>
<p>这是我自己完成单聊后,发送消息的时候包含的信息<br><img src="/blog/im/1576506440(1).jpg" alt></p>
<p>根据以上信息可知,在消息发送的时候会消息体中会包发送者(mine)的结构和接受者(to)的结构，其中</p>
<ol>
<li>发送者(mine)包含了发送人的头像、id、发送内容等</li>
<li>接受者(to)包含了接受者的头像、id、聊天类型等<div class="note warning"><p>其中聊天类型(type)一般分friend和group两种,friend为单聊,group为群聊<br>但是这么多的信息没必要全部获取,值需要取需要用到的内容,接受者的ID和发送者发送的内容即可。因为后面需要区分单聊、群聊、离线消息等其他的消息类型,<br>所以在发送消息的结构体中,需要带有消息的类型<br>注意:消息的类型与聊天类型不同，消息类型后台程序会根据消息类型,进行不同的消息处理程序。而聊天类型(type)是前台页面就行不同的消息窗口展示,而且friend和group消息结构不同</p></div>

</li>
</ol>
<p>前端页面发送时候的消息体结构</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"><span class="string">msgtype:</span>(status==<span class="string">"offline"</span>?msgType.offline:msgType.chatfriend),</span><br><span class="line"><span class="string">content:</span>data.mine.content,</span><br><span class="line"><span class="string">toid:</span>data.to.id</span><br></pre></td></tr></table></figure>

<p><img src="/blog/im/layim05.jpg" alt></p>
<ol>
<li>msgtype(消息类型,后台程序处理的类)</li>
<li>content(发送者发送的内容)</li>
<li>toid(接受者的id)</li>
</ol>
<h2 id="消息体结构设计"><a href="#消息体结构设计" class="headerlink" title="消息体结构设计"></a>消息体结构设计</h2><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 消息接收消息结构体</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">BaseBody</span> <span class="keyword">extends</span> <span class="title">MsgType</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 接受者id</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Getter</span></span><br><span class="line">    <span class="meta">@Setter</span></span><br><span class="line">    <span class="keyword">private</span>  <span class="type">String</span> toid;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 消息内容</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Getter</span></span><br><span class="line">    <span class="meta">@Setter</span></span><br><span class="line">    <span class="keyword">private</span>  <span class="type">String</span>  content;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 时间戳</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Getter</span></span><br><span class="line">    <span class="meta">@Setter</span></span><br><span class="line">    <span class="keyword">private</span> long timestamp;</span><br><span class="line"></span><br><span class="line">    public long getTimestamp() &#123;</span><br><span class="line">        <span class="keyword">if</span> (timestamp == <span class="number">0</span>)&#123;</span><br><span class="line">            timestamp = <span class="type">System</span>.currentTimeMillis();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> timestamp;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>解析后的消息类型(MsgType.java)</p>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 解析后的消息类型</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="selector-tag">public</span> <span class="selector-tag">class</span> <span class="selector-tag">MsgType</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 消息类型</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="variable">@Getter</span></span><br><span class="line">    <span class="variable">@Setter</span></span><br><span class="line">    private  byte  msgtype;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>其中时间戳在消息接收的时候会用到,用以显示发送or接收的时间。<br>前后端的消息结构体设计完成后,下面就需要对发送过来的消息进行接受、解析、处理<br><code>WesServerAioHandler类</code>进行消息的处理</p>
<p>当客户端完成发送的消息后,服务端就进行消息的解析:WesServerAioHandler类的decode的方法。<br>对解析完成后的消息进行处理。<br>处理解析后的消息messageHandle方法<br>以下截取messageHandle方法中主要的地方</p>
<figure class="highlight processing"><table><tr><td class="code"><pre><span class="line"><span class="comment">//消息类型为TEXT</span></span><br><span class="line">   <span class="keyword">if</span> (opcode == Opcode.TEXT) &#123;</span><br><span class="line">       <span class="keyword">if</span> (bytes != <span class="keyword">null</span> &amp;&amp; bytes.length != <span class="number">0</span>) &#123;</span><br><span class="line">           <span class="comment">//接收到的消息包</span></span><br><span class="line">           <span class="keyword">String</span> <span class="built_in">text</span> = <span class="keyword">new</span> <span class="keyword">String</span>(bytes, wesServerConfig.getCharset());</span><br><span class="line">           <span class="comment">//获得消息类型</span></span><br><span class="line">           MsgType property = Json.toBean(<span class="built_in">text</span>, MsgType.class);</span><br><span class="line">           <span class="comment">//解析数据消息</span></span><br><span class="line">           <span class="built_in">log</span>.info(<span class="string">"解析后的消息类型"</span>,property.getMsgtype());</span><br><span class="line">           <span class="comment">//消息转发处理</span></span><br><span class="line">           MsgHandler msgHandler = WebMsgHandler.getMsg(property.getMsgtype());</span><br><span class="line">           <span class="built_in">boolean</span> unknownMsg = msgHandler == <span class="keyword">null</span>;</span><br><span class="line">           <span class="keyword">if</span>(!unknownMsg) &#123;</span><br><span class="line">               <span class="comment">//根据消息类型进行消息的处理</span></span><br><span class="line">               msgHandler.handler(websocketPacket, channelContext);</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">Object</span> retObj = wesMsgHandler.onText(websocketPacket, <span class="built_in">text</span>, channelContext);</span><br><span class="line">           <span class="keyword">String</span> methodName = <span class="string">"onText"</span>;</span><br><span class="line">           wsResponse = <span class="keyword">this</span>.processRetObj(retObj, methodName, channelContext);</span><br><span class="line">           <span class="keyword">return</span> wsResponse;</span><br><span class="line">       &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">           Tio.remove(channelContext, <span class="string">"错误的websocket包，body为空"</span>);</span><br><span class="line">           <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<p>其中MsgHandler类为消息的转发处理器,它在服务端初始化的时候,将各消息处理的类进行了实例化并添加到一个Map类型中,具体的代码不进行展示。</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="comment">//存储消息处理的类</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Map&lt;<span class="keyword">String</span>, MsgHandler&lt;?&gt;&gt; handlerMap = <span class="keyword">new</span> HashMap&lt;<span class="keyword">String</span>, MsgHandler&lt;?&gt;&gt;();</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 初始化</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> init()&#123;</span><br><span class="line">        <span class="comment">//单聊  点对点</span></span><br><span class="line">        handlerMap.<span class="built_in">put</span>(<span class="string">"CLIENT_TO_CLIENT"</span>,<span class="keyword">new</span> ClientToClientMsg());</span><br><span class="line">        <span class="comment">//离线消息</span></span><br><span class="line">        handlerMap.<span class="built_in">put</span>(<span class="string">"OFF_LINE"</span>,<span class="keyword">new</span> OfflineMsg());</span><br><span class="line">        <span class="comment">//群消息</span></span><br><span class="line">        handlerMap.<span class="built_in">put</span>(<span class="string">"CLIENT_TO_GROUP"</span>,<span class="keyword">new</span> ClientToGroupMsg());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>通过反序列化得到具体的消息处理类</p>
<h2 id="点对点消息处理类"><a href="#点对点消息处理类" class="headerlink" title="点对点消息处理类"></a>点对点消息处理类</h2><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  点对点单聊消息处理</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">ClientToClientMsg</span> <span class="keyword">extends</span> <span class="title">MsgHandler&lt;BaseBody&gt;</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> static <span class="keyword">final</span> <span class="type">Logger</span> logger = <span class="type">LoggerFactory</span>.getLogger(<span class="type">ClientToClientMsg</span>.<span class="keyword">class</span>);</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    public <span class="type">Class</span>&lt;<span class="type">BaseBody</span>&gt; bodyClass() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="type">BaseBody</span>.<span class="keyword">class</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    public <span class="type">WsResponse</span> handler(<span class="type">WsRequest</span> wsRequest, <span class="type">BaseBody</span> body, <span class="type">ChannelContext</span> channelContext) <span class="keyword">throws</span> <span class="type">Exception</span> &#123;</span><br><span class="line">        logger.info(<span class="string">"构建消息体响应类点对点"</span>);</span><br><span class="line">        <span class="comment">//客户端接收消息的组装</span></span><br><span class="line">        <span class="type">ChatMsgBody</span> chatMsgBody= <span class="type">ConvertMsg</span>.getInstance().convertMsgBody(body,channelContext);</span><br><span class="line">        logger.info(<span class="string">"构建响应包点对点"</span>);</span><br><span class="line">        <span class="comment">//消息包装，返回WsResponse</span></span><br><span class="line">        <span class="type">WsResponse</span> toClientBody = <span class="type">ConvertMsg</span>.getInstance().fromText(chatMsgBody);</span><br><span class="line">        <span class="comment">//发送给对方</span></span><br><span class="line">        <span class="type">Tio</span>.sendToUser(channelContext.tioConfig, body.getToid(), toClientBody);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Tio.sendToUser发送到指定人;</p>
<h2 id="消息格式和相遇格式的组装-ConvertMsg-java"><a href="#消息格式和相遇格式的组装-ConvertMsg-java" class="headerlink" title="消息格式和相遇格式的组装 ConvertMsg.java"></a>消息格式和相遇格式的组装 ConvertMsg.java</h2> <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  响应消息组装</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConvertMsg</span> </span>&#123;</span><br><span class="line">    <span class="comment">//声明此类型的变量,但没有实例化</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ConvertMsg instance;</span><br><span class="line">    <span class="comment">//双重检测</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ConvertMsg <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (ConvertMsg.class)&#123;</span><br><span class="line">                <span class="keyword">if</span>(instance == <span class="keyword">null</span>)&#123;</span><br><span class="line">                    instance = <span class="keyword">new</span> ConvertMsg();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//组建即时聊天响应包</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> WsResponse <span class="title">fromText</span><span class="params">(Object body)</span> <span class="keyword">throws</span> IOException</span>&#123;</span><br><span class="line">        WsResponse response = <span class="keyword">new</span> WsResponse();</span><br><span class="line">        <span class="keyword">if</span>(body != <span class="keyword">null</span>) &#123;</span><br><span class="line">            String json = Json.toJson(body);</span><br><span class="line">            <span class="comment">//消息体</span></span><br><span class="line">            response.setBody(StringUtils.getBytes(json));</span><br><span class="line">            response.setWsBodyText(json);</span><br><span class="line">            response.setWsEof(<span class="keyword">true</span>);</span><br><span class="line">            response.setWsOpcode(Opcode.TEXT);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> response;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 构建消息体响应类(Layim格式)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> requestBody</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> channelContext</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ChatMsgBody <span class="title">convertMsgBody</span><span class="params">(BaseBody requestBody, ChannelContext channelContext)</span></span>&#123;</span><br><span class="line">        <span class="comment">//服务端发送消息格式</span></span><br><span class="line">        ChatMsgBody msgBody = <span class="keyword">new</span> ChatMsgBody();</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        channelContext.userid---在握手成功后会将当前用户的id绑定到信道的上下文中,具体参考</span></span><br><span class="line"><span class="comment">        WesMsgHandler类中的handshakeUser方法</span></span><br><span class="line"><span class="comment">        根据绑定的id获得用户的信息</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        Mine contextUser =(Mine)channelContext.getAttribute(channelContext.userid);</span><br><span class="line">        <span class="comment">//当前用户名</span></span><br><span class="line">        msgBody.setUsername(contextUser.getUsername());</span><br><span class="line">        <span class="comment">//用户头像</span></span><br><span class="line">        msgBody.setAvatar(contextUser.getAvatar());</span><br><span class="line">        <span class="comment">//判断为单聊</span></span><br><span class="line">        <span class="keyword">if</span>(requestBody.getMsgtype()== MsgType.CLIENT_TO_CLIENT)&#123;</span><br><span class="line">            <span class="comment">//消息的来源ID（如果是私聊，则是用户id，如果是群聊，则是群组id）</span></span><br><span class="line">            msgBody.setId(channelContext.userid);</span><br><span class="line">            <span class="comment">//聊天窗口来源类型---好友</span></span><br><span class="line">            msgBody.setType(<span class="string">"friend"</span>);</span><br><span class="line">            <span class="comment">//判断为群聊</span></span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(requestBody.getMsgtype() == MsgType.CLIENT_TO_GROUP)&#123;</span><br><span class="line">            <span class="comment">//消息的来源ID（如果是私聊，则是用户id，如果是群聊，则是群组id）</span></span><br><span class="line">            msgBody.setId(requestBody.getToid());</span><br><span class="line">            <span class="comment">//聊天窗口来源类型---群组</span></span><br><span class="line">            msgBody.setType(<span class="string">"group"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//消息内容</span></span><br><span class="line">        msgBody.setContent(requestBody.getContent());</span><br><span class="line">        <span class="comment">//消息的发送者id（比如群组中的某个消息发送者），可用于自动解决浏览器多窗口时的一些问题</span></span><br><span class="line">        msgBody.setFromid(channelContext.userid);</span><br><span class="line">        <span class="comment">//消息类型,用于前端页面的显示</span></span><br><span class="line">        msgBody.setMsgtype(requestBody.getMsgtype());</span><br><span class="line">        <span class="comment">//发送时间</span></span><br><span class="line">        msgBody.setTimestamp(requestBody.getTimestamp());</span><br><span class="line">        <span class="keyword">return</span> msgBody;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>convertMsgBody方法构建消息体响应格式—客户端接收消息的格式<br>fromText方法为响应请求数据格式的组装</p>
<h2 id="消息的接收"><a href="#消息的接收" class="headerlink" title="消息的接收"></a>消息的接收</h2><p>先看看LayIM官网对接收消息所包含的信息<br><img src="/blog/im/1576505181(1).png" alt></p>
<p>其中1为接收消息的layim接口,2为消息内容的具体字段。<br>下面是为在HTML页面中，对单聊和群聊进行了判断，分别进行展示。</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">var msg=JSON.parse(e.data);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">switch</span> (msg.msgtype) &#123;</span><br><span class="line">        <span class="comment">//点对点</span></span><br><span class="line">        <span class="keyword">case</span> msgType.<span class="string">chatfriend:</span></span><br><span class="line">            layim.getMessage(msg);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">            <span class="comment">//群组消息</span></span><br><span class="line">        <span class="keyword">case</span> msgType.<span class="string">chatgroup:</span></span><br><span class="line">            layim.getMessage(msg);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">       </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>根据消息类型进行消息的展示<br><img src="/blog/im/1576501115455(1).jpg" alt></p>
<h1 id="群聊"><a href="#群聊" class="headerlink" title="群聊"></a>群聊</h1><p>群聊的代码就不展示了,群聊原理和单聊一样。单聊和群聊区别为:调用的方法不同,和<code>body.getToid()</code>不同</p>
<h2 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h2><table>
<thead>
<tr>
<th>区别</th>
<th>单聊</th>
<th>群聊</th>
</tr>
</thead>
<tbody><tr>
<td>调用方法</td>
<td>sendToUser</td>
<td>sendToGroup</td>
</tr>
<tr>
<td>Toid</td>
<td>消息接收者的id</td>
<td>消息群组的id</td>
</tr>
</tbody></table>
<h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><p>消息群组的id也是在握手成功后进行绑定<br>具体参考<code>WesMsgHandler</code>类中的<code>handshakeUser</code>方法</p>
<h1 id="展示效果"><a href="#展示效果" class="headerlink" title="展示效果"></a>展示效果</h1><p><img src="/blog/im/chat.jpg" alt></p>
<h1 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h1><p>单聊和群聊已经结束了，但是如果你发送的用户不在线怎么办,离线消息功能也要进行实现,好友的上下线也要进行通知。</p>
<h1 id="参考内容"><a href="#参考内容" class="headerlink" title="参考内容"></a>参考内容</h1><p><a href="https://gitee.com/cctvmfc/t-io" target="_blank" rel="noopener">https://gitee.com/cctvmfc/t-io</a><br><a href="https://gitee.com/natral/tio-showcase" target="_blank" rel="noopener">https://gitee.com/natral/tio-showcase</a><br><a href="https://my.oschina.net/panzi1/blog/1577007#h1_3" target="_blank" rel="noopener">https://my.oschina.net/panzi1/blog/1577007#h1_3</a></p>
]]></content>
      <categories>
        <category>IM</category>
      </categories>
      <tags>
        <tag>IM</tag>
      </tags>
  </entry>
  <entry>
    <title>即时通讯-客户端格式(三)</title>
    <url>/IM/Im_LayimCode.html</url>
    <content><![CDATA[ <br>
<a id="more"></a>

<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><div class="note info"><p>完成了服务端和客户端的部分展示,开始就行具体的功能实现,根据LayIM返回的信息格式进行代码编写,以及数据库的设计。 </p></div>
<p> 这是我成功后的页面<br> <img src="/blog/im/IM001.jpg" alt></p>
<h1 id="具体的实体类展示"><a href="#具体的实体类展示" class="headerlink" title="具体的实体类展示"></a>具体的实体类展示</h1><ol>
<li>ResultJson.java(响应信息的格式)</li>
<li>Mine.java(个人信息)</li>
<li>FriendOrGroup.java(群组消息)</li>
<li>ChatMsgBody.java(服务端发送至客户端的消息格式)<h1 id="代码的展示"><a href="#代码的展示" class="headerlink" title="代码的展示"></a>代码的展示</h1><h1 id="ResultJson-java返回格式"><a href="#ResultJson-java返回格式" class="headerlink" title="ResultJson.java返回格式"></a>ResultJson.java返回格式</h1><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 响应信息</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> ResultJson &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> final long serialVersionUID = <span class="number">1</span>L;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 成功</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> final int SUCCESS_COCE = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 失败</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> final int FAIL_COCE = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回状态</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Getter</span></span><br><span class="line">    <span class="meta">@Setter</span></span><br><span class="line">    <span class="keyword">private</span> Integer code;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回的消息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Getter</span></span><br><span class="line">    <span class="meta">@Setter</span></span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">String</span> msg;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回封装的数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Getter</span></span><br><span class="line">    <span class="meta">@Setter</span></span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">Object</span> data;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 失败结果</span></span><br><span class="line"><span class="comment">     * @param msg</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> ResultJson (<span class="built_in">String</span> msg)&#123;</span><br><span class="line">        <span class="keyword">this</span>(FAIL_COCE,msg,<span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 成功结果，有返回值,无返回信息</span></span><br><span class="line"><span class="comment">     * @param data</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> ResultJson(<span class="built_in">Object</span> data)&#123;</span><br><span class="line">        <span class="keyword">this</span>(SUCCESS_COCE,<span class="string">""</span>,data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 成功结果，有返回值,有返回信息</span></span><br><span class="line"><span class="comment">     * @param data</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> ResultJson(<span class="built_in">String</span> msg,<span class="built_in">Object</span> data)&#123;</span><br><span class="line">        <span class="keyword">this</span>(SUCCESS_COCE,msg,data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> ResultJson(Integer code, <span class="built_in">String</span> msg, <span class="built_in">Object</span> data)&#123;</span><br><span class="line">        <span class="keyword">this</span>.data = data;</span><br><span class="line">        <span class="keyword">this</span>.code = code;</span><br><span class="line">        <span class="keyword">this</span>.msg = msg;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 成功结果，有返回值,有返回信息</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> ResultJson success(<span class="built_in">String</span> msg,<span class="built_in">Object</span> data)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ResultJson(msg,data);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 成功结果，有返回值,无返回信息</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> ResultJson success(<span class="built_in">Object</span> data)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ResultJson(data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 成功结果无返回值</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> ResultJson success()&#123;</span><br><span class="line">        <span class="keyword">return</span> success(<span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 失败结果</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> ResultJson error(<span class="built_in">String</span> msg)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ResultJson(msg);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 失败结果</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> ResultJson error(<span class="built_in">String</span> msg,<span class="built_in">Object</span> data)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ResultJson(FAIL_COCE,msg, data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h2 id="Mine-java"><a href="#Mine-java" class="headerlink" title="Mine.java"></a>Mine.java</h2><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 我的信息</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">Mine</span> <span class="keyword">extends</span> <span class="title">BaseEntity&lt;Mine&gt;</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> static <span class="keyword">final</span> long serialVersionUID = <span class="number">1</span>L;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 我的昵称</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Getter</span></span><br><span class="line">    <span class="meta">@Setter</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">String</span> username;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 在线状态</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Getter</span></span><br><span class="line">    <span class="meta">@Setter</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">String</span> status;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 签名</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Getter</span></span><br><span class="line">    <span class="meta">@Setter</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">String</span> sign;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 头像</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Getter</span></span><br><span class="line">    <span class="meta">@Setter</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">String</span> avatar;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 好友列表</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Getter</span></span><br><span class="line">    <span class="meta">@Setter</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">FriendOrGroup</span> friendOrGroup;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用户表</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Getter</span></span><br><span class="line">    <span class="meta">@Setter</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">User</span> user;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="FriendOrGroup-java"><a href="#FriendOrGroup-java" class="headerlink" title="FriendOrGroup.java"></a>FriendOrGroup.java</h2><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 好友or群组</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">FriendOrGroup</span> <span class="keyword">extends</span> <span class="title">BaseEntity&lt;FriendOrGroup&gt;</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> static <span class="keyword">final</span> long serialVersionUID = <span class="number">1</span>L;</span><br><span class="line">    <span class="comment">/**好友分组名</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Getter</span></span><br><span class="line">    <span class="meta">@Setter</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">String</span> groupname;</span><br><span class="line">    <span class="comment">/**分组下的好友列表</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Getter</span></span><br><span class="line">    <span class="meta">@Setter</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">List</span>  list;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 群组头像</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Getter</span></span><br><span class="line">    <span class="meta">@Setter</span></span><br><span class="line">    <span class="keyword">private</span>  <span class="type">String</span> avatar;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 好友的父级编号</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Getter</span></span><br><span class="line">    <span class="meta">@Setter</span></span><br><span class="line">    <span class="keyword">private</span>  <span class="type">String</span> parentIds;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 类型("0"为好友,"1"为群组)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Getter</span></span><br><span class="line">    <span class="meta">@Setter</span></span><br><span class="line">    <span class="keyword">private</span>  <span class="type">String</span> <span class="class"><span class="keyword">type</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Getter</span></span><br><span class="line">    <span class="meta">@Setter</span></span><br><span class="line">    <span class="keyword">private</span>  <span class="type">Mine</span> mine;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Getter</span></span><br><span class="line">    <span class="meta">@Setter</span></span><br><span class="line">    <span class="keyword">private</span>  <span class="type">ImData</span> imData;</span><br><span class="line"></span><br><span class="line">    public  <span class="type">FriendOrGroup</span>()&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    public  <span class="type">FriendOrGroup</span>(<span class="type">Mine</span> mine,<span class="type">String</span> <span class="class"><span class="keyword">type</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.mine=mine;</span><br><span class="line">        <span class="keyword">this</span>.<span class="keyword">type</span>=<span class="class"><span class="keyword">type</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="ChatMsgBody-java"><a href="#ChatMsgBody-java" class="headerlink" title="ChatMsgBody.java"></a>ChatMsgBody.java</h2><figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 服务端发送消息格式</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="selector-tag">public</span> <span class="selector-tag">class</span> <span class="selector-tag">ChatMsgBody</span> <span class="selector-tag">extends</span> <span class="selector-tag">BaseBody</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 消息来源用户名</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="variable">@Getter</span></span><br><span class="line">    <span class="variable">@Setter</span></span><br><span class="line">    private  String username;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 消息来源用户头像</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="variable">@Getter</span></span><br><span class="line">    <span class="variable">@Setter</span></span><br><span class="line">    private  String  avatar;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 消息的来源ID（如果是私聊，则是用户id，如果是群聊，则是群组id）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="variable">@Getter</span></span><br><span class="line">    <span class="variable">@Setter</span></span><br><span class="line">    private  String id;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 聊天窗口来源类型，从发送消息传递的to里面获取</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="variable">@Getter</span></span><br><span class="line">    <span class="variable">@Setter</span></span><br><span class="line">    private  String type;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 消息id，可不传。除非你要对消息进行一些操作（如撤回）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="variable">@Getter</span></span><br><span class="line">    <span class="variable">@Setter</span></span><br><span class="line">    private  String cid;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 是否我发送的消息，如果为true，则会显示在右方</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="variable">@Getter</span></span><br><span class="line">    <span class="variable">@Setter</span></span><br><span class="line">    private  boolean mine;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 消息的发送者id（比如群组中的某个消息发送者），可用于自动解决浏览器多窗口时的一些问题</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="variable">@Getter</span></span><br><span class="line">    <span class="variable">@Setter</span></span><br><span class="line">    private  String fromid;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>数据格式的基础实体类就是以上这些,其中ChatMsgBody.java暂时可以不用管,因为它牵扯到数据的发送,暂时还未到那一步。<br>下面为Controller</p>
<h2 id="ImController-java"><a href="#ImController-java" class="headerlink" title="ImController.java"></a>ImController.java</h2><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="comment"><span class="markdown">/**</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet"> * </span>LayIM基础信息</span></span></span><br><span class="line"><span class="comment"><span class="markdown"> */</span></span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/im"</span>)</span><br><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">ImController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    private MineService mineService;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    private FriendOrGroupService friendOrGroupService;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    WebSocketProperties websocketProperties;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    ImDataService imDataService;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="markdown">/**</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">     * </span>初始化数据</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="code">     */</span></span></span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/getInit"</span>,method = RequestMethod.GET)</span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    private ResultJson getInit() &#123;</span><br><span class="line">        Mine mymine = <span class="keyword">this</span>.getMineInfo(<span class="keyword">new</span> Mine());</span><br><span class="line">        <span class="comment">//将当前登录人员信息进行缓存,key为当前用户的id</span></span><br><span class="line">        CacheUtils.put(mymine.getId(),mymine);</span><br><span class="line">        <span class="comment">//好友</span></span><br><span class="line">        <span class="built_in">List</span>&lt;FriendOrGroup&gt; friends = <span class="keyword">this</span>.getFriend(<span class="keyword">new</span> FriendOrGroup(mymine,<span class="string">"0"</span>));</span><br><span class="line">        <span class="comment">//群组</span></span><br><span class="line">        <span class="built_in">List</span>&lt;FriendOrGroup&gt; groups = <span class="keyword">this</span>.getGroupInfo(mymine.getId());</span><br><span class="line">        <span class="built_in">Map</span> map = <span class="keyword">new</span> HashMap();</span><br><span class="line">        <span class="comment">//当前登录人信息</span></span><br><span class="line">        map.put(<span class="string">"mine"</span>, mymine);</span><br><span class="line">        <span class="comment">//好友</span></span><br><span class="line">        map.put(<span class="string">"friend"</span>, friends);</span><br><span class="line">        <span class="comment">//群组</span></span><br><span class="line">        map.put(<span class="string">"group"</span>,groups);</span><br><span class="line">        <span class="keyword">return</span> ResultJson.success(map);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="markdown">/**</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">     * </span>获得个人信息</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="code">     */</span></span></span></span><br><span class="line">    private Mine getMineInfo(Mine mine)&#123;</span><br><span class="line">        User user= UserUtils.getUser();</span><br><span class="line">        Mine minea=mineService.getUserid(user.getId());</span><br><span class="line">        <span class="keyword">return</span> minea;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="markdown">/**</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">     * </span>获得好友信息</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="code">     */</span></span></span></span><br><span class="line">    private <span class="built_in">List</span>&lt;FriendOrGroup&gt; getFriend(FriendOrGroup friendOrGroup)&#123;</span><br><span class="line">        <span class="comment">//获得当前登录用户的好友</span></span><br><span class="line">        <span class="built_in">List</span>&lt;FriendOrGroup&gt; friendOrGroupList=friendOrGroupService.getMind(friendOrGroup);</span><br><span class="line">        <span class="comment">//根据当前登录人员的id获得好友列表id</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="built_in">int</span> i=<span class="number">0</span>;i&lt;friendOrGroupList.size();i++)&#123;</span><br><span class="line">            <span class="comment">//获得当前用户好友列表的成员信息</span></span><br><span class="line">            friendOrGroupList.<span class="keyword">get</span>(i).setList(getMineList(friendOrGroupList.<span class="keyword">get</span>(i).getId()));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> friendOrGroupList;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="markdown">/**</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">     * </span>获得分组</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">     * </span>@param mid</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">     * </span>@return</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="code">     */</span></span></span></span><br><span class="line">    private <span class="built_in">List</span>&lt;FriendOrGroup&gt; getGroupInfo(<span class="built_in">String</span> mid)&#123;</span><br><span class="line">        <span class="comment">//获得自己所创建的群</span></span><br><span class="line">      <span class="comment">//  List&lt;FriendOrGroup&gt; friendOrGroupList=friendOrGroupService.getMind(friendOrGroup);</span></span><br><span class="line">        <span class="comment">//获得自己创建的群以及自己所加入的群</span></span><br><span class="line">        <span class="built_in">List</span>&lt;FriendOrGroup&gt; GroupList=friendOrGroupService.getExistence(mid);</span><br><span class="line">        <span class="keyword">return</span> GroupList;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="markdown">/**</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">     * </span>根据好友列表的id获得好友信息</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">     * </span>@return</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">     * </span>@throws Exception</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="code">     */</span></span></span></span><br><span class="line">    public  <span class="built_in">List</span> getMineList(<span class="built_in">String</span> parentId)&#123;</span><br><span class="line">        <span class="built_in">List</span> list=imDataService.getStringList(parentId);</span><br><span class="line">        <span class="built_in">List</span>&lt;Mine&gt; mineList=mineService.getEntity(list);</span><br><span class="line">        <span class="keyword">return</span> mineList;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="markdown">/**</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">     * </span>获得websocket的配置信息</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">     * </span>@return</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">     * </span>@throws Exception</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="code">     */</span></span></span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/getImConfig"</span>,method = RequestMethod.GET)</span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    public JsonResult getImConfig() &#123;</span><br><span class="line">        <span class="built_in">String</span> url;</span><br><span class="line">        User user= UserUtils.getUser();</span><br><span class="line">        <span class="built_in">String</span> uid=user.getId();</span><br><span class="line">        <span class="built_in">String</span> token = AESUtil.encrypt(uid);</span><br><span class="line">        <span class="built_in">Map</span> map=<span class="keyword">new</span> HashMap();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(!websocketProperties.isDeploy()==<span class="keyword">true</span>)&#123;</span><br><span class="line">            url=websocketProperties.getIp()+<span class="string">":"</span>+websocketProperties.getPort();</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            url=websocketProperties.getProurl();</span><br><span class="line">        &#125;</span><br><span class="line">        map.put(<span class="string">"url"</span>,url);</span><br><span class="line">        map.put(<span class="string">"token"</span>,token);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> JsonResult.success(map);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>至此后端代码完成,下面就行前端页面的<br>chat.html</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">xmlns:th</span>=<span class="string">"http://www.thymeleaf.org"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>LayIM<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">th:href</span>=<span class="string">"@&#123;static/layui/css/layui.css&#125;"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"    position: absolute;right: 16px;"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"退出"</span>  <span class="attr">id</span>=<span class="string">"out"</span>&gt;</span>退出<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">th:src</span>=<span class="string">"@&#123;static/layui/layui.js&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">th:src</span>=<span class="string">"@&#123;static/js/jquery.min.js&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">th:src</span>=<span class="string">"@&#123;static/websocket/socket.js&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">    $(<span class="string">'#out'</span>).on(<span class="string">'click'</span>,<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        $.ajax(&#123;</span></span><br><span class="line"><span class="actionscript">            type:<span class="string">"POST"</span>,</span></span><br><span class="line"><span class="actionscript">            url:<span class="string">"/logOut"</span>,</span></span><br><span class="line"><span class="actionscript">            success: <span class="function"><span class="keyword">function</span> <span class="params">(result)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">                location.href = <span class="string">'/login'</span>;</span></span><br><span class="line">            &#125;,</span><br><span class="line"><span class="actionscript">            error: <span class="function"><span class="keyword">function</span> <span class="params">(error)</span> </span>&#123;</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line"><span class="actionscript">    layui.use(<span class="string">'layim'</span>, <span class="function"><span class="keyword">function</span><span class="params">(layim)</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> $ = layui.$</span></span><br><span class="line">            ,admin = layui.admin</span><br><span class="line">            ,element = layui.element</span><br><span class="line">            ,layim = layui.layim</span><br><span class="line">            ,router = layui.router();</span><br><span class="line"><span class="actionscript">        <span class="comment">//服务端的WebSocket链接信息</span></span></span><br><span class="line"><span class="javascript">        $.ajax(&#123;</span></span><br><span class="line"><span class="actionscript">            url: <span class="string">'/im/getImConfig'</span>,</span></span><br><span class="line"><span class="actionscript">            type: <span class="string">'get'</span>,</span></span><br><span class="line"><span class="actionscript">            success: <span class="function"><span class="keyword">function</span> <span class="params">(result)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">                <span class="keyword">var</span> url=result.data.url;</span></span><br><span class="line"><span class="actionscript">                <span class="keyword">var</span> token=result.data.token;</span></span><br><span class="line"><span class="actionscript">                createWebSocket(<span class="string">"ws://"</span>+url+<span class="string">"/"</span>+token+<span class="string">""</span>,eventHandle);</span></span><br><span class="line">            &#125;,</span><br><span class="line"><span class="actionscript">            error: <span class="function"><span class="keyword">function</span> <span class="params">( errorThrown)</span> </span>&#123;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"><span class="actionscript">        <span class="comment">//基础配置</span></span></span><br><span class="line">        layim.config(&#123;</span><br><span class="line"><span class="actionscript">            <span class="comment">//初始化接口</span></span></span><br><span class="line">            init: &#123;</span><br><span class="line"><span class="actionscript">                url: <span class="string">'/im/getInit'</span></span></span><br><span class="line">                ,data: &#123;&#125;</span><br><span class="line">            &#125;,</span><br><span class="line"><span class="actionscript">            title:<span class="string">"我的IM"</span></span></span><br><span class="line"><span class="actionscript">            ,notice:<span class="literal">true</span></span></span><br><span class="line"><span class="actionscript">            <span class="comment">//查看群员接口</span></span></span><br><span class="line">            ,members: &#123;</span><br><span class="line"><span class="actionscript">                url: <span class="string">''</span></span></span><br><span class="line">                ,data: &#123;&#125;</span><br><span class="line">            &#125;</span><br><span class="line">            ,uploadImage: &#123;</span><br><span class="line"><span class="actionscript">                url: <span class="string">'upload/file'</span> <span class="comment">//（返回的数据格式见下文）</span></span></span><br><span class="line"><span class="actionscript">                ,type: <span class="string">''</span> <span class="comment">//默认post</span></span></span><br><span class="line">            &#125;</span><br><span class="line">            ,uploadFile: &#123;</span><br><span class="line"><span class="actionscript">                url: <span class="string">'upload/file'</span> <span class="comment">//（返回的数据格式见下文）</span></span></span><br><span class="line"><span class="actionscript">                ,type: <span class="string">''</span> <span class="comment">//默认post</span></span></span><br><span class="line">            &#125;</span><br><span class="line"><span class="actionscript">            ,isAudio: <span class="literal">true</span> <span class="comment">//开启聊天工具栏音频</span></span></span><br><span class="line"><span class="actionscript">            ,isVideo: <span class="literal">true</span> <span class="comment">//开启聊天工具栏视频</span></span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">            <span class="comment">//扩展工具栏</span></span></span><br><span class="line">            ,tool: [&#123;</span><br><span class="line"><span class="actionscript">                alias: <span class="string">'code'</span></span></span><br><span class="line"><span class="actionscript">                ,title: <span class="string">'代码'</span></span></span><br><span class="line"><span class="actionscript">                ,icon: <span class="string">'&amp;#xe64e;'</span></span></span><br><span class="line">            &#125;]</span><br><span class="line"></span><br><span class="line"><span class="actionscript">            <span class="comment">//,brief: true //是否简约模式（若开启则不显示主面板）</span></span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">            <span class="comment">//,title: 'WebIM' //自定义主面板最小化时的标题</span></span></span><br><span class="line"><span class="actionscript">            <span class="comment">//,right: '100px' //主面板相对浏览器右侧距离</span></span></span><br><span class="line"><span class="actionscript">            <span class="comment">//,minRight: '90px' //聊天面板最小化时相对浏览器右侧距离</span></span></span><br><span class="line"><span class="actionscript">            ,initSkin: <span class="string">'3.jpg'</span> <span class="comment">//1-5 设置初始背景</span></span></span><br><span class="line"><span class="actionscript">            <span class="comment">//,skin: ['aaa.jpg'] //新增皮肤</span></span></span><br><span class="line"><span class="actionscript">            <span class="comment">//,isfriend: false //是否开启好友</span></span></span><br><span class="line"><span class="actionscript">            <span class="comment">//,isgroup: false //是否开启群组</span></span></span><br><span class="line"><span class="actionscript">            <span class="comment">//,min: true //是否始终最小化主面板，默认false</span></span></span><br><span class="line"><span class="actionscript">            <span class="comment">//,notice: true //是否开启桌面消息提醒，默认false</span></span></span><br><span class="line"><span class="actionscript">            <span class="comment">//,voice: false //声音提醒，默认开启，声音文件为：default.mp3</span></span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">            ,msgbox: <span class="string">'/layim/demo/msgbox.html'</span> <span class="comment">//消息盒子页面地址，若不开启，剔除该项即可</span></span></span><br><span class="line"><span class="actionscript">            ,find: <span class="string">'/layim/demo/find.html'</span> <span class="comment">//发现页面地址，若不开启，剔除该项即可</span></span></span><br><span class="line"><span class="actionscript">            ,chatLog: <span class="string">'/layim/demo/chatlog.html'</span> <span class="comment">//聊天记录页面地址，若不开启，剔除该项即可</span></span></span><br><span class="line"></span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> eventHandle = <span class="function"><span class="keyword">function</span> <span class="params">(event)</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(<span class="string">"连接开启!"</span>);</span></span><br><span class="line">            &#125;;</span><br><span class="line"><span class="actionscript">            socket.onopen = <span class="function"><span class="keyword">function</span><span class="params">(event)</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(<span class="string">"连接开启!"</span>);</span></span><br><span class="line">            &#125;;</span><br><span class="line"><span class="actionscript">            socket.onclose = <span class="function"><span class="keyword">function</span><span class="params">(event)</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(<span class="string">"连接关闭!"</span>);</span></span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;;</span><br><span class="line"><span class="actionscript">        <span class="comment">//监听在线状态的切换事件</span></span></span><br><span class="line"><span class="actionscript">        layim.on(<span class="string">'online'</span>, <span class="function"><span class="keyword">function</span><span class="params">(status)</span></span>&#123;</span></span><br><span class="line">            layer.msg(status);</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line"><span class="actionscript">        <span class="comment">//监听签名修改</span></span></span><br><span class="line"><span class="actionscript">        layim.on(<span class="string">'sign'</span>, <span class="function"><span class="keyword">function</span><span class="params">(value)</span></span>&#123;</span></span><br><span class="line">            layer.msg(value);</span><br><span class="line">        &#125;);</span><br><span class="line"><span class="actionscript">        <span class="comment">//监听自定义工具栏点击，以添加代码为例</span></span></span><br><span class="line"><span class="actionscript">        layim.on(<span class="string">'tool(code)'</span>, <span class="function"><span class="keyword">function</span><span class="params">(insert)</span></span>&#123;</span></span><br><span class="line">            layer.prompt(&#123;</span><br><span class="line"><span class="actionscript">                title: <span class="string">'插入代码 - 工具栏扩展示例'</span></span></span><br><span class="line">                ,formType: 2</span><br><span class="line">                ,shade: 0</span><br><span class="line"><span class="actionscript">            &#125;, <span class="function"><span class="keyword">function</span><span class="params">(text, index)</span></span>&#123;</span></span><br><span class="line">                layer.close(index);</span><br><span class="line"><span class="actionscript">                insert(<span class="string">'[pre class=layui-code]'</span> + text + <span class="string">'[/pre]'</span>); <span class="comment">//将内容插入到编辑器</span></span></span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="actionscript">        <span class="comment">//监听layim建立就绪</span></span></span><br><span class="line"><span class="actionscript">        layim.on(<span class="string">'ready'</span>, <span class="function"><span class="keyword">function</span><span class="params">(res)</span></span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(res.mine);</span></span><br><span class="line"><span class="actionscript">            layim.msgbox(<span class="number">5</span>); <span class="comment">//模拟消息盒子有新消息，实际使用时，一般是动态获得</span></span></span><br><span class="line">        &#125;);</span><br><span class="line"><span class="actionscript">        <span class="comment">//监听发送消息</span></span></span><br><span class="line"><span class="actionscript">        layim.on(<span class="string">'sendMessage'</span>, <span class="function"><span class="keyword">function</span><span class="params">(data)</span></span>&#123;</span></span><br><span class="line"><span class="javascript">           <span class="built_in">console</span>.log(data);</span></span><br><span class="line"><span class="javascript">           <span class="built_in">console</span>.log(<span class="string">"消息的发送"</span>);</span></span><br><span class="line">           </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125;);</span><br><span class="line"><span class="actionscript">        <span class="comment">//监听查看群员</span></span></span><br><span class="line"><span class="actionscript">        layim.on(<span class="string">'members'</span>, <span class="function"><span class="keyword">function</span><span class="params">(data)</span></span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">"监听查看群员"</span>);</span></span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line"><span class="actionscript">        <span class="comment">//监听聊天窗口的切换</span></span></span><br><span class="line"><span class="actionscript">        layim.on(<span class="string">'chatChange'</span>, <span class="function"><span class="keyword">function</span><span class="params">(res)</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">var</span> type = res.data.type;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">"监听聊天窗口的切换"</span>);</span></span><br><span class="line">            </span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h1><p>关于socket.js网上有多,这是自己整理的仅供参考。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> socket;</span><br><span class="line"><span class="keyword">var</span> reconnectflag = <span class="literal">false</span>;<span class="comment">//避免重复连接</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createWebSocket</span>(<span class="params">url,callbak</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">window</span>.WebSocket) &#123;</span><br><span class="line">            <span class="built_in">window</span>.WebSocket = <span class="built_in">window</span>.MozWebSocket;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">window</span>.WebSocket) &#123;</span><br><span class="line">            socket = <span class="keyword">new</span> WebSocket(url);</span><br><span class="line">            socket.binaryType = <span class="string">"arraybuffer"</span>;</span><br><span class="line">            callbak();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//当浏览器不支持websocket时 降级为http模式</span></span><br><span class="line">            <span class="keyword">var</span> isClose =<span class="literal">false</span>;</span><br><span class="line">            <span class="built_in">window</span>.onbeforeunload =<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="keyword">if</span>(!isClose)&#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">window</span>.onunload =<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="keyword">if</span>(!isClose)&#123;</span><br><span class="line">                    Imwebserver.closeconnect();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            dwr.engine.setActiveReverseAjax(<span class="literal">true</span>);</span><br><span class="line">            dwr.engine.setNotifyServerOnPageUnload(<span class="literal">true</span>);</span><br><span class="line">            dwr.engine.setErrorHandler(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            &#125;);</span><br><span class="line">            dwr.engine._errorHandler = <span class="function"><span class="keyword">function</span>(<span class="params">message, ex</span>) </span>&#123;</span><br><span class="line">            &#125;;</span><br><span class="line">            Imwebserver.serverconnect();</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">        reconnect(url,callbak);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">reconnect</span>(<span class="params">url,callbak</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(reconnectflag) <span class="keyword">return</span>;</span><br><span class="line">    reconnectflag = <span class="literal">true</span>;</span><br><span class="line">    <span class="comment">//没连接上会一直重连，设置延迟避免请求过多</span></span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        createWebSocket(url,callbak);</span><br><span class="line">        reconnectflag = <span class="literal">false</span>;</span><br><span class="line">    &#125;, <span class="number">2000</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h1>]]></content>
      <categories>
        <category>IM</category>
      </categories>
      <tags>
        <tag>IM</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring boot限流</title>
    <url>/SpringBoot/springboot_rateLimiter.html</url>
    <content><![CDATA[ <br>
<a id="more"></a>

 <div class="note info"><p>最近客户现场的实施工程师反馈,系统在某一时间会特别的卡顿,导致医生无法进行操作,特别是在业务系统对接我们自己的接口程序的时候,老是访问超时导致无法进行下一把操作。<br> 经过追踪发现,这一时间段中,接口程序会频繁刷新导致CPU飙升,内存被大批量占用，经过排查日志发现,第三方程序再这一时间段频繁访问同一个接口,几乎是一秒一次,<br> 跟第三方沟通后才知道他们改了接口访问的频次才导致的问题,而我们的接口也没有进行限流的,所以再后续的更新中给接口加上限流。<br> 所以对于此次的处理进行记录。以下是相关的代码:</p></div>

 <!-- more -->

<h1 id="限流的方式"><a href="#限流的方式" class="headerlink" title="限流的方式"></a>限流的方式</h1><ol>
<li>固定窗口</li>
<li>滑动窗口</li>
<li>漏桶</li>
<li>令牌桶(此次所展示的算法)<h1 id="使用的是Redis-Lua方式"><a href="#使用的是Redis-Lua方式" class="headerlink" title="使用的是Redis + Lua方式"></a>使用的是Redis + Lua方式</h1><h2 id="Lua介绍"><a href="#Lua介绍" class="headerlink" title="Lua介绍"></a>Lua介绍</h2><a href="[Lua官网](https://www.bookstack.cn/read/redisson-wiki-zh/Redisson%E9%A1%B9%E7%9B%AE%E4%BB%8B%E7%BB%8D.md)">Lua官网</a></li>
</ol>
<hr>
<ul>
<li>特性：<blockquote>
<p>轻量级: 它用标准C语言编写并以源代码形式开放，编译后仅仅一百余K，可以很方便的嵌入别的程序里。<br>可扩展: Lua提供了非常易于使用的扩展接口和机制：由宿主语言(通常是C或C++)提供这些功能，Lua可以使用它们，就像是本来就内置的功能一样。</p>
</blockquote>
</li>
<li>其它特性:</li>
</ul>
<ol>
<li>支持面向过程(procedure-oriented)编程和函数式编程(functional programming)；</li>
<li>自动内存管理；只提供了一种通用类型的表（table），用它可以实现数组，哈希表，集合，对象；</li>
<li>语言内置模式匹配；闭包(closure)；函数也可以看做一个值；提供多线程（协同进程，并非操作系统所支持的线程）支持；</li>
<li>通过闭包和table可以很方便地支持面向对象编程所需要的一些关键机制，比如数据抽象，虚函数，继承和重载等。<h2 id="自定义注解-RateLimiter-java"><a href="#自定义注解-RateLimiter-java" class="headerlink" title="自定义注解:RateLimiter.java"></a>自定义注解:RateLimiter.java</h2><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Target</span>(ElementType.METHOD)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line">public <span class="meta">@interface</span> RateLimiter &#123;</span><br><span class="line">    <span class="comment"><span class="markdown">/**</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">     * </span>限流key</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="code">     */</span></span></span></span><br><span class="line">    <span class="built_in">String</span> key() <span class="keyword">default</span> <span class="string">"rate_limit:"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="markdown">/**</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">     * </span>限流时间,单位秒</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="code">     */</span></span></span></span><br><span class="line">    <span class="built_in">int</span> time() <span class="keyword">default</span> <span class="number">60</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="markdown">/**</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">     * </span>限流次数</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="code">     */</span></span></span></span><br><span class="line">    <span class="built_in">int</span> count() <span class="keyword">default</span> <span class="number">60</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="markdown">/**</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">     * </span>返回类型 0 为xml 1为 json</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">     * </span>@return</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="code">     */</span></span></span></span><br><span class="line">    <span class="built_in">String</span> resultType() <span class="keyword">default</span> <span class="string">"0"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="markdown">/**</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">     * </span>限流类型</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="code">     */</span></span></span></span><br><span class="line">    LimitType limitType() <span class="keyword">default</span> LimitType.DEFAULT;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="markdown">/**</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">     * </span>厂商返回类型</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">     * </span>@return</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="code">     */</span></span></span></span><br><span class="line">    LimitResultType limitResultType() <span class="keyword">default</span> LimitResultType.NAME_DEFAULT;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h2 id="AOP切面实现-RateLimiterAspect-java"><a href="#AOP切面实现-RateLimiterAspect-java" class="headerlink" title="AOP切面实现:RateLimiterAspect.java"></a>AOP切面实现:RateLimiterAspect.java</h2><figure class="highlight processing"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 限流</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">@Aspect</span><br><span class="line">@Component</span><br><span class="line">@Slf4j</span><br><span class="line"><span class="keyword">public</span> class RateLimiterAspect &#123;</span><br><span class="line">    @Autowired</span><br><span class="line">    <span class="keyword">private</span> RedisTemplate&lt;<span class="keyword">Object</span>, <span class="keyword">Object</span>&gt; redisTemplate;</span><br><span class="line"></span><br><span class="line">    @Before(<span class="string">"@annotation(rateLimiter)"</span>)</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> doBefore(JoinPoint <span class="built_in">point</span>, RateLimiter rateLimiter) <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        <span class="comment">//限流时间,单位秒</span></span><br><span class="line">        <span class="built_in">int</span> time = rateLimiter.time();</span><br><span class="line">        <span class="comment">//限流次数</span></span><br><span class="line">        <span class="built_in">int</span> count = rateLimiter.count();</span><br><span class="line">        <span class="comment">//厂商信息</span></span><br><span class="line">        LimitResultType limitResultType=rateLimiter.limitResultType();</span><br><span class="line">        <span class="comment">//返回值类型</span></span><br><span class="line">        <span class="keyword">String</span> resultType = rateLimiter.resultType();</span><br><span class="line">        <span class="keyword">String</span> luaScript = buildScript();</span><br><span class="line">        <span class="comment">//获得key</span></span><br><span class="line">        <span class="keyword">String</span> combineKey = getCombineKey(rateLimiter, <span class="built_in">point</span>);</span><br><span class="line">        List&lt;<span class="keyword">Object</span>&gt; keys = Collections.singletonList(combineKey);</span><br><span class="line">            RedisScript&lt;Number&gt; redisScript = <span class="keyword">new</span> DefaultRedisScript&lt;&gt;(luaScript, Number.class);</span><br><span class="line">           <span class="comment">//牌产生是速率(个数/秒)数量/时间-向上取整</span></span><br><span class="line">        <span class="built_in">int</span> createRate = (<span class="built_in">int</span>) Math.<span class="built_in">ceil</span>( count / time);</span><br><span class="line">        Number number = redisTemplate.execute(redisScript, keys, count,createRate,currentMillis,<span class="number">60000</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (number != <span class="keyword">null</span> &amp;&amp; number.intValue() == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="comment">//Xml格式返回</span></span><br><span class="line">                <span class="keyword">if</span>(<span class="string">"0"</span>.equals(resultType))&#123;</span><br><span class="line">                    <span class="built_in">log</span>.warn(<span class="string">"访问过于频繁，请稍候再试"</span>);</span><br><span class="line">                    <span class="comment">//院感</span></span><br><span class="line">                    <span class="keyword">if</span>(limitResultType.getCode().equals(LimitResultType.NAME.getCode()))&#123;</span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> XmlRRException(LimitResultType.NAME,<span class="string">"访问过于频繁，请稍候再试"</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (XmlRRException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> e;</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="built_in">log</span>.error(<span class="string">"服务器限流异常，请稍候再试"</span>);</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"服务器限流异常，请稍候再试"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 参数构建</span></span><br><span class="line"><span class="comment">     * @return</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">String</span> getCombineKey(RateLimiter rateLimiter, JoinPoint <span class="built_in">point</span>) &#123;</span><br><span class="line">        StringBuffer stringBuffer = <span class="keyword">new</span> StringBuffer(rateLimiter.<span class="built_in">key</span>());</span><br><span class="line">        <span class="keyword">if</span> (rateLimiter.limitType() == LimitType.IP) &#123;</span><br><span class="line">            stringBuffer.<span class="built_in">append</span>(IpUtils.getIpAddr(((ServletRequestAttributes) RequestContextHolder.currentRequestAttributes()).getRequest())).<span class="built_in">append</span>(<span class="string">"-"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        MethodSignature signature = (MethodSignature) <span class="built_in">point</span>.getSignature();</span><br><span class="line">        Method method = signature.getMethod();</span><br><span class="line">        Class&lt;?&gt; targetClass = method.getDeclaringClass();</span><br><span class="line">        stringBuffer.<span class="built_in">append</span>(targetClass.getName()).<span class="built_in">append</span>(<span class="string">"-"</span>).<span class="built_in">append</span>(method.getName());</span><br><span class="line">        <span class="keyword">return</span> stringBuffer.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * redis+Lua 限流脚本(令牌桶算法)</span></span><br><span class="line"><span class="comment">     * @return</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">String</span> buildScript() &#123;</span><br><span class="line">        StringBuilder stringBuilder = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        stringBuilder.<span class="built_in">append</span>(<span class="string">"\n local capacity = tonumber(ARGV[1])"</span>);</span><br><span class="line">        stringBuilder.<span class="built_in">append</span>(<span class="string">"\n local rate = tonumber(ARGV[2])"</span>);</span><br><span class="line">        stringBuilder.<span class="built_in">append</span>(<span class="string">"\n local lastTime = tonumber(ARGV[3]) "</span>);</span><br><span class="line">        stringBuilder.<span class="built_in">append</span>(<span class="string">"\n local residueTokenNum= 0"</span>);</span><br><span class="line">        stringBuilder.<span class="built_in">append</span>(<span class="string">"\n local consume=1"</span>);</span><br><span class="line">        stringBuilder.<span class="built_in">append</span>(<span class="string">"\n local resetToken = tonumber(ARGV[4]) "</span>);</span><br><span class="line">        stringBuilder.<span class="built_in">append</span>(<span class="string">"\nlocal token = redis.call('hgetall', KEYS[1])"</span>);</span><br><span class="line">        stringBuilder.<span class="built_in">append</span>(<span class="string">"\n if table.maxn(token) == 0 then"</span>);</span><br><span class="line">        stringBuilder.<span class="built_in">append</span>(<span class="string">"\n local residueTokenNum= tonumber(ARGV[1])"</span>);</span><br><span class="line">        stringBuilder.<span class="built_in">append</span>(<span class="string">"\n redis.call('HMSET', KEYS[1], 'capacity', capacity, 'rate', rate,  'lastTime', lastTime,'residueTokenNum', residueTokenNum) "</span>);</span><br><span class="line">        stringBuilder.<span class="built_in">append</span>(<span class="string">"\n redis.call('pexpire',  KEYS[1], tonumber(ARGV[4]))"</span>);</span><br><span class="line">        stringBuilder.<span class="built_in">append</span>(<span class="string">"\nelse"</span>);</span><br><span class="line">        stringBuilder.<span class="built_in">append</span>(<span class="string">"\nlocal bucket = redis.call('HMGET', KEYS[1], 'capacity', 'rate', 'lastTime','residueTokenNum') "</span>);</span><br><span class="line">        stringBuilder.<span class="built_in">append</span>(<span class="string">"\ncapacity = bucket[1]"</span>);</span><br><span class="line">        stringBuilder.<span class="built_in">append</span>(<span class="string">"\nrate =bucket[2] "</span>);</span><br><span class="line">        stringBuilder.<span class="built_in">append</span>(<span class="string">"\nlastTime = bucket[3] "</span>);</span><br><span class="line">        stringBuilder.<span class="built_in">append</span>(<span class="string">"\nresidueTokenNum= bucket[4] "</span>);</span><br><span class="line">        stringBuilder.<span class="built_in">append</span>(<span class="string">"\nlocal nowTime = tonumber(ARGV[3]) "</span>);</span><br><span class="line">        stringBuilder.<span class="built_in">append</span>(<span class="string">"\nlocal generateTokenNum = tonumber(((nowTime - lastTime)/1000)* rate)"</span>);</span><br><span class="line">        stringBuilder.<span class="built_in">append</span>(<span class="string">"\nresidueTokenNum = generateTokenNum + residueTokenNum "</span>);</span><br><span class="line">        stringBuilder.<span class="built_in">append</span>(<span class="string">"\nresidueTokenNum = math.min(capacity, residueTokenNum)"</span>);</span><br><span class="line">        stringBuilder.<span class="built_in">append</span>(<span class="string">"\nif residueTokenNum &gt;= consume then "</span>);</span><br><span class="line">        stringBuilder.<span class="built_in">append</span>(<span class="string">"\n residueTokenNum = residueTokenNum - consume"</span>);</span><br><span class="line">        stringBuilder.<span class="built_in">append</span>(<span class="string">"\n redis.call('hmset', KEYS[1], 'capacity', capacity, 'rate', rate, 'lastTime', nowTime,'residueTokenNum', residueTokenNum) "</span>);</span><br><span class="line">        stringBuilder.<span class="built_in">append</span>(<span class="string">"\nreturn residueTokenNum"</span>);</span><br><span class="line">        stringBuilder.<span class="built_in">append</span>(<span class="string">"\nend"</span>);</span><br><span class="line">        stringBuilder.<span class="built_in">append</span>(<span class="string">"\nreturn 0 "</span>);</span><br><span class="line">        stringBuilder.<span class="built_in">append</span>(<span class="string">"\nend "</span>);</span><br><span class="line">        <span class="keyword">return</span> stringBuilder.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>以上就是防止重复提交的AOP方法,具体使用如图所示:<br><img src="/blog/java/img_2.png" alt="img_2.png"></p>
<h1 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h1><h2 id="单次访问"><a href="#单次访问" class="headerlink" title="单次访问"></a>单次访问</h2><p><img src="/blog/java/img_3.png" alt="img_3.png"></p>
<blockquote>
<p>缓存显示如图:<br><img src="/blog/java/img_4.png" alt="img_4.png"><br>后端打印出来的令牌桶总数量:<br><img src="/blog/java/img_5.png" alt="img_5.png"></p>
</blockquote>
<h2 id="模拟多次访问"><a href="#模拟多次访问" class="headerlink" title="模拟多次访问:"></a>模拟多次访问:</h2><p>接口我次数设置的是5次时间是2秒<br><img src="/blog/java/img_9.png" alt="img_9.png"></p>
<blockquote>
<p>接口访问的结果<br><img src="/blog/java/img_6.png" alt="img_6.png"><br>成功详情:<br><img src="/blog/java/img_10.png" alt="img_10.png"><br>失败详情:<br><img src="/blog/java/img_7.png" alt="img_7.png"><br>后台显示:<br><img src="/blog/java/img_8.png" alt="img_8.png"></p>
</blockquote>
<p>综合结果得知成功了5次,失败了1次,所以限流成功了,因为我还设置了缓存key的过期为一分钟,下次再次访问的话会重新构建的,具体的话根据实际业务进行配置;</p>
<h1 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h1><p>此次只展示了限流的令牌桶的算法,这只是其中解决方法的其中之一,本次使用到的是Redis缓存,其他方式如:JUC中的原子类用自旋+cas实现、guava的限流器(synchronized实现),<br>具体使用那种算法需要根据自身的业务进行选择,还有其他的算法后面有时间了再进行展示。</p>
]]></content>
      <categories>
        <category>Spring Boot</category>
      </categories>
      <tags>
        <tag>Spring Boot</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式-单例模式</title>
    <url>/Java/Designpattern_singleton.html</url>
    <content><![CDATA[ <br>
<a id="more"></a>

<h1 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h1> <div class="note info"><p>单一的类，该类负责创建自己的对象，同时确保只有单个对象被创建。这个类提供了一种访问其唯一的对象的方式，可以直接访问，不需要实例化该类的对象,保证一个类仅有一个实例，并且提供一个它的全局访问点</p></div>


<h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><ol>
<li>只有一个实例</li>
<li>必须自己创建自己的唯一实例</li>
<li>必须给所以其他对象提供这一个实例</li>
</ol>
<h2 id="实现方式"><a href="#实现方式" class="headerlink" title="实现方式"></a>实现方式</h2><ol>
<li>饿汉式（静态常量）</li>
<li>饿汉式（静态代码块）</li>
<li>懒汉式(线程不安全)</li>
<li>懒汉式(线程安全)</li>
<li>懒汉式(线程安全，同步代码块)</li>
<li>双重检查</li>
<li>静态内部类</li>
<li>枚举</li>
</ol>
<h1 id="实现的基本思路"><a href="#实现的基本思路" class="headerlink" title="实现的基本思路"></a>实现的基本思路</h1><p>单例模式要求类能够有返回对象的一个引用（并且永远是同一个）和一个获得该实例的方法（必须是静态方法，往往使用getInstance()这个方法）<br>主要通过以下步骤：</p>
<p>（1）将该类的构造方法定义为私有方法，这样其它的代码就无法通过调用该类的构造方法来实例化该类的对象，只有通过该类提供的静态方法来得到该类的唯一实例；</p>
<p>（2）在该类种提供一个静态方法，当我们调用这个方法时，如果类持有的引用不为空就返回这个引用，如果类保持的引用为空就创建该类的实例并将实例的引用赋值给该类保持的引用。</p>
<div class="note warning"><p>注意事项：单例模式在多线程的环境下必须小心使用，如果当唯一实例尚未创建时，有两个线程同时调用创建方法，那么它们同时没有检测到唯一实例的存在，从而同时各自创建了一个实例，这样就有两个实例被创建了出来，从而违反了单例模式种实例唯一的原则，解决这个问题办法是为指示类是否已经实例化的变量提供一个互斥锁(虽然这样会降低效率)</p></div>

<h1 id="单例模式的写法"><a href="#单例模式的写法" class="headerlink" title="单例模式的写法"></a>单例模式的写法</h1><p>1、饿汉式（静态常量）</p>
<figure class="highlight aspectj"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">singleton</span>()</span>&#123;</span><br><span class="line">  <span class="comment">//定义一个私有的构造方法</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//将自身的的实例对象设置为一个属性并加上final 和static</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> Singleton INSTANCE = <span class="keyword">new</span> Singleton();</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="comment">//静态方法返回该类的实例</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="function">Singleton <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>优点：写法简单，就是在类加载的时候完成实例化，避免了线程同步问题。</p>
<p>缺点：没有达到懒加载的效果，如果从始至终都未使用过这个实例，会造成内存的浪费。</p>
<p>2、饿汉式（静态代码块）</p>
<figure class="highlight smali"><table><tr><td class="code"><pre><span class="line">public class Singleton&#123;</span><br><span class="line">  // 定义一个Singleton类型的变量（不初始化，注意这里没有使用final关键字）</span><br><span class="line">   <span class="keyword"> private</span><span class="keyword"> static</span> Singleton instance;</span><br><span class="line">    </span><br><span class="line">   <span class="keyword"> static</span>&#123;</span><br><span class="line">       <span class="built_in"> instance </span>=<span class="built_in"> new </span>Singleton();</span><br><span class="line">    &#125;</span><br><span class="line">     //定义一个私有的构造方法</span><br><span class="line">   <span class="keyword"> private</span> Singleton()&#123;&#125;</span><br><span class="line">    // 定义一个静态的方法</span><br><span class="line">   <span class="keyword"> public</span><span class="keyword"> static</span> Singleton getInstance()&#123;</span><br><span class="line">       <span class="built_in"> return </span>instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这种方式跟第一种方式类似，都是在类加载的时候完成的，只不过将实例化的过程放在了静态代码块种，优缺点跟上面一样。</p>
<p>3、懒汉式（线程不安全）</p>
<figure class="highlight smali"><table><tr><td class="code"><pre><span class="line">public class Singleton&#123;</span><br><span class="line">  // 定义一个Singleton类型的变量（不初始化，注意这里没有使用final关键字）</span><br><span class="line">   <span class="keyword"> private</span><span class="keyword"> static</span> Singleton instance;</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    //定义一个私有的构造方法（防止通过<span class="built_in"> new </span>Singleton去实例化）</span><br><span class="line">   <span class="keyword"> private</span> Singleton()&#123;&#125;</span><br><span class="line">    // 定义一个静态的方法（调用时再初始化Singleton，但是多线程访问时，可能造成重复初始化问题）</span><br><span class="line">   <span class="keyword"> public</span><span class="keyword"> static</span> Singleton getInstance()&#123;</span><br><span class="line">        if(instance == null)&#123;</span><br><span class="line">           <span class="built_in"> instance </span>=<span class="built_in"> new </span>Singleton();</span><br><span class="line">        &#125;</span><br><span class="line">       <span class="built_in"> return </span>instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这种写法在单线程环境下可以使用，但是多线程环境下显然会产生多个实例。</p>
<p>优点：写起来比较简单，当类Singleton被加载的时候，静态变量static的instance未被创建并分配内存空间，当getInstance方法第一次被调用时，初始化instance变量，并分配内存，因此在某些特定条件下会节约了内存；<br>缺点：并发环境下很可能出现多个Singleton实例。</p>
<p>4、懒汉式（线程安全，同步方法）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span></span>&#123;</span><br><span class="line">  <span class="comment">// 定义一个Singleton类型的变量（不初始化，注意这里没有使用final关键字）</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton instance;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">    定义一个静态的方法（调用时再初始化Singleton，使用<span class="keyword">synchronized</span> 避免多线程访问时，可能造成重的复初始化问题）</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> Singleton <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(instance == <span class="keyword">null</span>)&#123;</span><br><span class="line">            instance = <span class="keyword">new</span> Singleton();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>由于每次去获取实例的时候都会进入synchronized代码块而不管实例是否为null，而其实这个方法只需要执行一次实例化代码就可以，因此这样的开销非常大，所以不推荐使用。<br>优点是：使用synchronized关键字避免多线程访问时，出现多个Singleton实例。<br>缺点是：同步方法频繁调用时，效率略低。</p>
<p>5、懒汉式（线程安全，同步代码块）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span></span>&#123;</span><br><span class="line">  <span class="comment">// 定义一个Singleton类型的变量（不初始化，注意这里没有使用final关键字）</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton instance;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//私有的构造方法</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(instance == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">synchronized</span>(Singleton.class)&#123;</span><br><span class="line">                instance = <span class="keyword">new</span> Singleton();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这种同步并不能起到线程同步的作用，跟第三种方式遇到的情形一致。假如两个线程同时进入了if(instance == null)代码块，第一个线程还未进行处理，另外一个线程也通过了判断，这样会产生多个实例，因此同样不推荐使用。</p>
<p>6、双重检查锁</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span></span>&#123;</span><br><span class="line">  /定义一个静态私有变量(不进行初始化，使用<span class="keyword">volatile</span>保证了多线程访问时singleton变量的可见性，避免了singleton初始化时其他变量属性还没赋值完时，被另外线程调用)</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> Singleton singleton;</span><br><span class="line">    <span class="comment">//私有的构造方法</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//定义一个静态的构造方法，返回该类型的实例 </span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">       <span class="comment">// 对象实例化时与否判断（不使用同步代码块，singleton不等于null时，直接返回对象，提高运行效率）</span></span><br><span class="line">        <span class="keyword">if</span>(singleton == <span class="keyword">null</span>)&#123;</span><br><span class="line">          <span class="comment">//同步代码块（对象未初始化时，使用同步代码块，保证多线程访问时对象在第一次创建后，不再重复被创建）</span></span><br><span class="line">            <span class="keyword">synchronized</span>(Singleton.class)&#123;</span><br><span class="line">              <span class="comment">//未初始化，进行初始化singleton变量</span></span><br><span class="line">                <span class="keyword">if</span>(singleton == <span class="keyword">null</span>)&#123;</span><br><span class="line">                    singleton = <span class="keyword">new</span> Singleton():</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> singleton;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>双重检查锁对于多线程开发者来说并不陌生，我们进行了两次if(singleton == null)判断，并通过将实例singleton设置为volatile变量，这样可以实现变量的可见性并且禁止编译器指令重排序造成的其它问题。</p>
<p>优点：线程安全，延迟加载，效率较高。</p>
<p>7、静态内部类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span></span>&#123;</span><br><span class="line">  <span class="comment">//定义私有的构造方法</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonInstance</span></span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Singleton INSTANCE = <span class="keyword">new</span> Singleton();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> SingletonInstance.INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这种方式跟饿汉式方式采用的机制类似，但又有不同。两者都是采用了类装载的机制来保证初始化实例时只有一个线程。不同的地方在饿汉式方式是只要Singleton类被装载就会实例化，没有Lazy-Loading（懒加载）的作用，而静态内部类方式在Singleton类被装载时并不会立即实例化，而是在需要实例化时，调用getInstance方法，才会装载SingletonInstance类，从而完成Singleton的实例化。</p>
<p>类的静态属性只会在第一次加载类的时候初始化，所以在这里，JVM帮助我们保证了线程的安全性，在类进行初始化时，别的线程是无法进入的。</p>
<p>优点：避免了线程不安全，延迟加载，效率高。</p>
<p>8、枚举</p>
<figure class="highlight crystal"><table><tr><td class="code"><pre><span class="line">public <span class="class"><span class="keyword">enum</span> <span class="title">Singleton</span>&#123;</span></span><br><span class="line">    INSTANCE;</span><br><span class="line">    public void whateverMethod()&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>优点：系统内存中该类只存在一个对象，节省了系统资源，对于一些需要频繁创建销毁的对象，使用单例模式可以提高系统性能</p>
<p>缺点：当想实例化一个单例类的时候，必须要记住使用相应的获取对象的方法，而不是使用new，可能会给其他开发人员造成困扰，特别是看不到源码的时候</p>
<p>借助JDK1.5中添加的枚举来实现单例模式。不仅能避免多线程同步问题，而且还能防止反序列化重新创建新的对象。可能是因为枚举在JDK1.5中才添加，所以在实际项目开发中，使用枚举实现单例模式很少出现。</p>
<h1 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h1><ol>
<li>要求生产唯一序列号。</li>
<li>WEB 中的计数器，不用每次刷新都在数据库里加一次，用单例先缓存起来。</li>
<li>创建的一个对象需要消耗的资源过多，比如 I/O 与数据库的连接等。</li>
<li>创建对象时耗时过多或耗费资源过多，但又经常用到的对象；</li>
<li>工具类对象；<h1 id="备注"><a href="#备注" class="headerlink" title="备注"></a>备注</h1>Spring的controller就是典型的单例模式</li>
</ol>
]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring boot防止重复提交</title>
    <url>/SpringBoot/springboot_resubmit.html</url>
    <content><![CDATA[ <br>

<a id="more"></a>

 <div class="note info"><p>最近在跟第三方对接接口的时候发现,当第三方请求可以增加或者修改数据的接口时候,此时数据库会有重复数据,经过排查后发现是由于网路抖动的原因触发的,<br>发现问题后经过分析后的解决方案:一种是加乐观锁，二是redis分布式锁,但是考虑到涉及到的业务比较特殊,需要及时返回结果,保证下游业务的处理,<br>决定使用redis来进行控制,对于此次的处理进行记录。以下是相关的代码:</p></div>

 <!-- more -->

<h1 id="处理的方法"><a href="#处理的方法" class="headerlink" title="处理的方法"></a>处理的方法</h1><p>因为此次是处理是不能修改目前涉及到的业务,以及后续其他接口可以继续使用故选择AOP(面向切面)的实现方案;</p>
<h1 id="Redisson配置"><a href="#Redisson配置" class="headerlink" title="Redisson配置"></a>Redisson配置</h1><h2 id="引入依赖文件"><a href="#引入依赖文件" class="headerlink" title="引入依赖文件"></a>引入依赖文件</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.redisson<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>redisson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>3.23.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><p><a href="https://www.bookstack.cn/read/redisson-wiki-zh/Redisson%E9%A1%B9%E7%9B%AE%E4%BB%8B%E7%BB%8D.md" target="_blank" rel="noopener">Redisson 使用手册</a><br>根据Redisson官网的介绍,Redisson是架设在Redis基础上的一个Java驻内存数据网格,则Redisson可以使用Redis的基础配置,Redis的配置如图所示<br><img src="/blog/java/img.png" alt="img.jpg"></p>
<h2 id="客户端配置-RedissonClientConfig-java"><a href="#客户端配置-RedissonClientConfig-java" class="headerlink" title="客户端配置:RedissonClientConfig.java"></a>客户端配置:RedissonClientConfig.java</h2><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedissonClientConfig</span> </span>&#123;</span><br><span class="line"><span class="meta">@Value(<span class="meta-string">"<span class="subst">$&#123;spring.redis.host&#125;</span>"</span>)</span></span><br><span class="line"><span class="keyword">private</span> String redisHost;</span><br><span class="line"><span class="meta">@Value(<span class="meta-string">"<span class="subst">$&#123;spring.redis.password&#125;</span>"</span>)</span></span><br><span class="line"><span class="keyword">private</span> String password;</span><br><span class="line"><span class="meta">@Value(<span class="meta-string">"<span class="subst">$&#123;spring.redis.port&#125;</span>"</span>)</span></span><br><span class="line"><span class="keyword">private</span> String port;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> RedissonClient getRedisson() &#123;</span><br><span class="line">        Config config = new Config();</span><br><span class="line">        config.useSingleServer().</span><br><span class="line">                setAddress(<span class="string">"redis://"</span> + redisHost + <span class="string">":"</span> + port).</span><br><span class="line">                setPassword(password);</span><br><span class="line">        config.setCodec(new JsonJacksonCodec());</span><br><span class="line">        <span class="keyword">return</span> Redisson.create(config);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="自定义注解-ApiResubmit-java"><a href="#自定义注解-ApiResubmit-java" class="headerlink" title="自定义注解:ApiResubmit.java"></a>自定义注解:ApiResubmit.java</h2><figure class="highlight"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">@Target(&#123;ElementType.METHOD&#125;)</span><br><span class="line">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="line">@Documented</span><br><span class="line">public @interface ApiResubmit &#123;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 重复提交的前缀，用来区分不同的场景</span><br><span class="line">     */</span><br><span class="line">    String prefix() default "";</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 重复提交的key，用来辨别是否是一次重复的请求，支持SpEL，可以从方法的入参中获取</span><br><span class="line">     */</span><br><span class="line">    String key() default "";</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 请求禁止秒数，即在多少秒内禁止重复请求</span><br><span class="line">     */</span><br><span class="line">    int forbidSeconds() default 4;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 厂商返回类型</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    LimitResultType limitResultType() default LimitResultType.NAME_DEFAULT;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 返回类型 0 为xml 1为 json</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    String resultType() default "0";</span><br><span class="line">    /**</span><br><span class="line">     * 重复提交的提示信息</span><br><span class="line">     */</span><br><span class="line">    String message() default "正在提交中，请稍后再试";</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="AOP切面实现-ResubmitAspect-java"><a href="#AOP切面实现-ResubmitAspect-java" class="headerlink" title="AOP切面实现:ResubmitAspect.java"></a>AOP切面实现:ResubmitAspect.java</h2><figure class="highlight processing"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 防止重复提交</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">@EnableAspectJAutoProxy(exposeProxy = <span class="keyword">true</span>)</span><br><span class="line">@Aspect</span><br><span class="line">@Component</span><br><span class="line">@Slf4j</span><br><span class="line"><span class="keyword">public</span> class ResubmitAspect &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//默认的提示语</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">String</span> DEFAULT_BLOCKING_MESSAGE = <span class="string">"提交的频率过快，请稍后再试"</span>;</span><br><span class="line">    @Autowired</span><br><span class="line">    <span class="keyword">private</span>  RedissonClient redissonClient;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//切点</span></span><br><span class="line">    @Pointcut(<span class="string">"@annotation(com.xxx.framework.aspectj.lang.annotation.ApiResubmit)"</span></span><br><span class="line">            + <span class="string">"|| @within(com.xxx.framework.aspectj.lang.annotation.ApiResubmit)"</span>)</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> resubmitPointcut() &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @Around(value = <span class="string">"resubmitPointcut()"</span>)</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">Object</span> checkResubmit(ProceedingJoinPoint joinPoint) <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        MethodSignature signature = (MethodSignature) joinPoint.getSignature();</span><br><span class="line">        Method method = signature.getMethod();</span><br><span class="line">        ApiResubmit annotation = AnnotationUtils.findAnnotation(method, ApiResubmit.class);</span><br><span class="line">        <span class="keyword">if</span> (annotation != <span class="keyword">null</span>) &#123;  <span class="comment">//如果这个方法标注这个注解</span></span><br><span class="line">            <span class="comment">//以类名+方法名作为key的默认前缀</span></span><br><span class="line">            <span class="keyword">String</span> defaultPrefix = joinPoint.getSignature().getDeclaringTypeName() + <span class="string">"#"</span> + method.getName();</span><br><span class="line">            <span class="comment">//获取此方法所传入的参数 map&lt;参数名, 参数值&gt;</span></span><br><span class="line">            Map&lt;<span class="keyword">String</span>, <span class="keyword">Object</span>&gt; methodParam = getMethodParam(joinPoint);</span><br><span class="line">            validate(annotation, defaultPrefix, methodParam);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> joinPoint.proceed();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 参数解析</span></span><br><span class="line"><span class="comment">     * @param joinPoint</span></span><br><span class="line"><span class="comment">     * @return</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Map&lt;<span class="keyword">String</span>, <span class="keyword">Object</span>&gt; getMethodParam(ProceedingJoinPoint joinPoint) &#123;</span><br><span class="line">        <span class="keyword">Object</span>[] args = joinPoint.getArgs();</span><br><span class="line">        <span class="keyword">String</span>[] parameterNames = ((MethodSignature) joinPoint.getSignature()).getParameterNames();</span><br><span class="line">        Map&lt;<span class="keyword">String</span>, <span class="keyword">Object</span>&gt; paramMap = <span class="keyword">new</span> <span class="keyword">HashMap</span>&lt;&gt;(args.length);</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; args.length; i++) &#123;</span><br><span class="line">            paramMap.put(parameterNames[i], args[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> paramMap;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span>  <span class="built_in">boolean</span> tryLock(<span class="keyword">String</span> redisKey, <span class="keyword">long</span> waitMill, <span class="keyword">long</span> leaseMill) &#123;</span><br><span class="line">        RLock rLock =redissonClient.getLock(redisKey);</span><br><span class="line">        <span class="built_in">boolean</span> locked = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            locked = rLock.tryLock(waitMill, leaseMill, TimeUnit.MILLISECONDS);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">            <span class="comment">// log.warn("redisson tryLock failed redisKey:&#123;&#125;, e", redisKey, ex);</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> locked;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> validate(ApiResubmit annotation, <span class="keyword">String</span> defaultPrefix, Map&lt;<span class="keyword">String</span>, <span class="keyword">Object</span>&gt; methodParam) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">String</span> prefix = StringUtils.isBlank(annotation.prefix()) ? defaultPrefix : annotation.prefix();</span><br><span class="line">            <span class="comment">//使用SPEL进行key的解析</span></span><br><span class="line">            ExpressionParser parser = <span class="keyword">new</span> SpelExpressionParser();</span><br><span class="line">            <span class="comment">//去解析spel语句</span></span><br><span class="line">            StandardEvaluationContext context = <span class="keyword">new</span> StandardEvaluationContext(methodParam);</span><br><span class="line">            context.addPropertyAccessor(<span class="keyword">new</span> MapAccessor());</span><br><span class="line">            context.setVariables((Map&lt;<span class="keyword">String</span>, <span class="keyword">Object</span>&gt;) context.getRootObject().getValue());</span><br><span class="line">            <span class="keyword">String</span> <span class="built_in">key</span> = parser.parseExpression(annotation.<span class="built_in">key</span>()).getValue(context, <span class="keyword">String</span>.class);</span><br><span class="line">            <span class="comment">//去获取redis锁，锁持有时间为注解属性forbidSeconds</span></span><br><span class="line">            <span class="built_in">boolean</span> lock = tryLock(prefix + <span class="built_in">key</span>, <span class="number">0</span>, annotation.forbidSeconds() * <span class="number">1000</span>L);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (!lock) &#123; <span class="comment">//如果获取锁失败</span></span><br><span class="line">                <span class="comment">// 拿到注解属性提示语，抛出异常</span></span><br><span class="line">                <span class="keyword">String</span> message = StringUtils.isBlank(annotation.message()) ? DEFAULT_BLOCKING_MESSAGE : annotation.message();</span><br><span class="line">                <span class="comment">//厂商信息</span></span><br><span class="line">                LimitResultType limitResultType=annotation.limitResultType();</span><br><span class="line">                <span class="comment">//返回值类型</span></span><br><span class="line">                <span class="keyword">String</span> resultType = annotation.resultType();</span><br><span class="line">                <span class="comment">//Xml格式返回</span></span><br><span class="line">                <span class="keyword">if</span>(<span class="string">"0"</span>.equals(resultType))&#123;</span><br><span class="line">                    <span class="built_in">log</span>.warn(message);</span><br><span class="line">                    <span class="comment">//PACS</span></span><br><span class="line">                    <span class="keyword">if</span>(limitResultType.getCode().equals(LimitResultType.NAME_PACS.getCode()))&#123;</span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> XmlRRException(LimitResultType.NAME_PACS,ResultCodeEnum.XINYI_FAIL,message);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">//LIS</span></span><br><span class="line">                    <span class="keyword">if</span>(limitResultType.getCode().equals(LimitResultType.NAME_LIS_XINYI.getCode()))&#123;</span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> XmlRRException(LimitResultType.NAME_LIS_XINYI,ResultCodeEnum.SERVER_FAIL,message);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">//ECG</span></span><br><span class="line">                    <span class="keyword">if</span>(limitResultType.getCode().equals(LimitResultType.NAME_ECG_NALONG.getCode()))&#123;</span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> XmlRRException(LimitResultType.NAME_ECG_NALONG,ResultCodeEnum.SERVER_FAIL,message);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (XmlRRException e) &#123;</span><br><span class="line">                <span class="keyword">throw</span> e;</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">            <span class="comment">//如果不是重复提交的异常，即出现了其他的异常，正常请求，但需要打印error日志</span></span><br><span class="line">            <span class="built_in">log</span>.error(<span class="string">"ApiResubmitAspectException: "</span>, ex);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>以上就是防止重复提交的AOP方法,具体使用如图所示:<br><img src="/blog/java/img_1.png" alt="img_1.png"></p>
<h1 id="参数解析"><a href="#参数解析" class="headerlink" title="参数解析:"></a>参数解析:</h1><ol>
<li>prefix = “pacsStatus” 重复提交的前缀，用来区分不同的场景</li>
<li>key = “#paramData.applyId” 重复提交的key，用来辨别是否是一次重复的请求</li>
<li>forbidSeconds = 6, #请求禁止秒数，即在多少秒内禁止重复请求</li>
<li>resultType = “0” #返回类型 0 为xml 1为 json</li>
<li>limitResultType = LimitResultType.NAME_PACS #厂商返回类型</li>
<li>message = “正在提交中，请稍后再试” #重复提交的提示信息</li>
</ol>
<h1 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h1><p>以上就是防重复提交的方法,这只是其中解决方法的其中之一,但是在实际的业务中会存在缓存失效,锁的失效,要真正做到幂等性的话<br>还有根据自身的业务进行判断。</p>
]]></content>
      <categories>
        <category>Spring Boot</category>
      </categories>
      <tags>
        <tag>Spring Boot</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot配置文件详解</title>
    <url>/SpringBoot/springboot_configuration.html</url>
    <content><![CDATA[<pre><code>&lt;/br&gt;</code></pre><a id="more"></a>

<h1 id="SpringBoot文件的配置"><a href="#SpringBoot文件的配置" class="headerlink" title="SpringBoot文件的配置"></a>SpringBoot文件的配置</h1><!-- more -->
<h2 id="默认配置"><a href="#默认配置" class="headerlink" title="默认配置"></a>默认配置</h2><p>SpringBoot有两种全局配置文件,可以对一些默认的配置进行修改，如数据库连接、日志设置、以及自定义属性的配置。</p>
<ol>
<li><p>application.properties</p>
</li>
<li><p>application.yml</p>
<blockquote>
<p>程序启动的时候会默认加载配置文件,配置文件放在src/main/resources目录或者类路径/config下，配置文件的路径是有优先级的<br>两种配置文件,只做关于yml简单介绍，更多的使用可自行在网络上进行搜索</p>
</blockquote>
<p>以下将以yml配置文件为例</p>
</li>
</ol>
<h2 id="基本配置"><a href="#基本配置" class="headerlink" title="基本配置"></a>基本配置</h2><p>YML基本介绍<a href="http://www.yaml.org" target="_blank" rel="noopener">官方地址</a></p>
<blockquote>
<p>YAML (YAML Aint Markup Language)是一种标记语言，通常以.yml为后缀的文件，是一种直观的能够被电脑识别的数据序列化格式，并且容易被人类阅读，容易和脚本语言交互的，可以被支持YAML库的不同的编程语言程序导入，一种专门用来写配置文件的语言。</p>
</blockquote>
<p><strong>YAML基本语法规则</strong></p>
<ol>
<li><p>大小写敏感</p>
</li>
<li><p>使用缩进表示层级关系</p>
</li>
<li><p>缩进时不允许使用Tab键，只允许使用空格。</p>
</li>
<li><p>缩进的空格数目不重要，只要相同层级的元素左侧对齐即可<br>示例</p>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="attribute">server</span>:</span><br><span class="line">  <span class="attribute">port</span>: <span class="number">8080</span></span><br><span class="line">  <span class="attribute">servlet</span>:</span><br><span class="line">    <span class="attribute">context-path</span>: /</span><br><span class="line">  <span class="attribute">tomcat</span>:</span><br><span class="line">    <span class="attribute">uri-encoding</span>: UTF-<span class="number">8</span></span><br><span class="line">    <span class="attribute">max-threads</span>: <span class="number">800</span></span><br><span class="line">    <span class="attribute">min-spare-threads</span>: <span class="number">30</span></span><br></pre></td></tr></table></figure>

<p>此处对于yml不做过多的介绍，网络上有很多是资料<a href="https://www.yiibai.com/yaml" target="_blank" rel="noopener">YAML教程</a></p>
<h2 id="获取配置的方法"><a href="#获取配置的方法" class="headerlink" title="获取配置的方法"></a>获取配置的方法</h2><p>在程序中通过@ConfigurationProperties和@Value注解获取属性,下面介绍这两种获取值的方式<br>@ConfigurationProperties与@Value区别<br><img src="/blog/configure/configure01.jpg" alt="区别"><br>首先在application.yml配置文件中自定义一个属性<br>application.yml配置文件中</p>
<figure class="highlight dts"><table><tr><td class="code"><pre><span class="line"><span class="symbol">com:</span></span><br><span class="line"><span class="symbol">   name:</span> <span class="string">"姓名"</span></span><br><span class="line"><span class="symbol">   descriptive:</span> <span class="string">"自定义"</span></span><br></pre></td></tr></table></figure>



</li>
</ol>
<h3 id="ConfigurationProperties"><a href="#ConfigurationProperties" class="headerlink" title="@ConfigurationProperties"></a>@ConfigurationProperties</h3>  <figure class="highlight less"><table><tr><td class="code"><pre><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment"> * ConfigurationProperties指定从配置文件中读取属性，prefix指定对应yaml文件中的key。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="variable">@Component</span></span><br><span class="line"><span class="variable">@ConfigurationProperties</span>(prefix=<span class="string">"com"</span>)</span><br><span class="line">public class CustomPropertiesConfig &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 姓名</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="selector-tag">private</span> <span class="selector-tag">String</span> <span class="selector-tag">name</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 自定义</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="selector-tag">private</span> <span class="selector-tag">String</span> <span class="selector-tag">descriptive</span>;</span><br><span class="line">    </span><br><span class="line">   省略<span class="selector-tag">get</span>/<span class="selector-tag">set</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>   通过@Autowired注解获得配置文件的类属性<br>     @Autowired<br>       CustomPropertiesConfig customPropertiesConfig;<br>       获得配置文件中的值customPropertiesConfig.getName()；</p>
<h3 id="Value"><a href="#Value" class="headerlink" title="@Value"></a>@Value</h3>   <figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 通过<span class="doctag">@Value</span>获取自定义的值</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="meta">@Component</span></span><br><span class="line">  <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomPropertiesValueConfig</span> </span>&#123;</span><br><span class="line">      <span class="comment">/**</span></span><br><span class="line"><span class="comment">       * 姓名</span></span><br><span class="line"><span class="comment">       */</span></span><br><span class="line">      <span class="meta">@Value(<span class="meta-string">"<span class="subst">$&#123;com.name&#125;</span>"</span>)</span></span><br><span class="line">      <span class="keyword">private</span>  String name;</span><br><span class="line">      <span class="comment">/**</span></span><br><span class="line"><span class="comment">       * 自定义</span></span><br><span class="line"><span class="comment">       */</span></span><br><span class="line">      <span class="meta">@Value(<span class="meta-string">"<span class="subst">$&#123;com.descriptive&#125;</span>"</span>)</span></span><br><span class="line">      <span class="keyword">private</span>  String descriptive;</span><br><span class="line">      省略<span class="keyword">get</span>/<span class="keyword">set</span></span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure>

<p>   通过@Autowired注解获得配置文件的类属性@Autowired<br>   CustomPropertiesValueConfig customPropertiesValueConfig;<br>   customPropertiesValueConfig.getName()；<br>   {% note warning %}
   如果所声明的类是一个组件,则需要在实体类上需要加上@Component
   如果需要使用表达式只有@Value才可以,@Value("#{2*2}) 结果为:4
   {% endnote %}<br>   <strong>使用场景</strong><br>   {% note info no-icon %}
   只是在某个业务逻辑中需要获取一下配置文件中的某项值，使用@Value；
   编写了一个javaBean来和配置文件进行映射，使用@ConfigurationProperties；
   {% endnote %}</p>
<h2 id="加载外部配置文件"><a href="#加载外部配置文件" class="headerlink" title="加载外部配置文件"></a>加载外部配置文件</h2><p> 如果将所有的配置信息全部写到一个配置文件中的话,如果配置东西过多,不便于维护，可以进行拆分，拆分到多个文件中，然后通过引用进行使用</p>
<ol>
<li>@PropertySource(value={“classpath:文件名称.properties”})</li>
<li>@ImportResource(locations={“classpath:文件名称.xml”}</li>
<li>@Configuration和@Bean方式<h3 id="PropertySource"><a href="#PropertySource" class="headerlink" title="@PropertySource"></a>@PropertySource</h3><blockquote>
<p>@PropertySource(需要注入的类的前面使用该注解)</p>
</blockquote>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="variable">@Component</span></span><br><span class="line"><span class="variable">@ConfigurationProperties</span>(prefix = <span class="string">"test"</span>)<span class="comment">//这个不能注，注了就会报错</span></span><br><span class="line"><span class="variable">@PropertySource</span>(value =&#123;<span class="string">"classpath:test.properties"</span>&#125;) <span class="comment">//value的值可以是数组</span></span><br><span class="line">public class TestPropertiesConfig &#123;</span><br><span class="line">    <span class="selector-tag">private</span> <span class="selector-tag">String</span> <span class="selector-tag">name</span>;</span><br><span class="line">    <span class="selector-tag">private</span> <span class="selector-tag">Integer</span> <span class="selector-tag">age</span>;</span><br><span class="line">省略<span class="selector-tag">get</span>/<span class="selector-tag">set</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


</li>
</ol>
<h3 id="ImportResource"><a href="#ImportResource" class="headerlink" title="@ImportResource"></a>@ImportResource</h3><blockquote>
<p>@ImportResource(在主函数SpringBootApplication前面使用该注解)</p>
</blockquote>
<h3 id="Configuration和-Bean方式"><a href="#Configuration和-Bean方式" class="headerlink" title="@Configuration和@Bean方式"></a>@Configuration和@Bean方式</h3>   <figure class="highlight cs"><table><tr><td class="code"><pre><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 配置类</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">@Configuration<span class="comment">//指定这是一个配置类，用于替代之前的配置文件</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">AppConfig</span> &#123;</span><br><span class="line">  </span><br><span class="line">    <span class="comment">//将方法的返回值添加到容器中，容器中组件的id就是方法的返回值</span></span><br><span class="line">    @Bean</span><br><span class="line">    <span class="function"><span class="keyword">public</span> MyService <span class="title">myService</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        System.<span class="keyword">out</span>.println(<span class="string">"配置类@Bean给容器中添加组件了..."</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MyService();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

   {% note warning %}
     使用第三种方式的时候需要在主函数程序类中注释掉@ImportResource
   {% endnote %}
<h2 id="多环境切换"><a href="#多环境切换" class="headerlink" title="多环境切换"></a>多环境切换</h2><p>   在项目开发中会遇到多个环境的切换,如开发环境、生成环境、测试环境,在主配置文件中通过<br>     <figure class="highlight dts"><table><tr><td class="code"><pre><span class="line"><span class="symbol">spring:</span></span><br><span class="line"><span class="symbol">  profiles:</span></span><br><span class="line"><span class="symbol">    active:</span> dev <span class="meta">#指定读取的文件</span></span><br></pre></td></tr></table></figure></p>
<pre><code>1. application.yml 主配置文件
2. application-dev.yml 开发环境
3. application-prod.yml 生产环境
4. application-test.yml 测试环境</code></pre><p>在主配置文件中切换 active:后面的值来进行环境切换<br>     java –jar xxx.jar –spring.profiles.active=dev</p>
<h2 id="配置文件的加载顺序"><a href="#配置文件的加载顺序" class="headerlink" title="配置文件的加载顺序"></a>配置文件的加载顺序</h2><blockquote>
<p>前文说过 “配置文件放在src/main/resources目录或者类路径/config下，这个配置文件的路径是有优先级的。”</p>
</blockquote>
<p>   springboot启动的时候会扫描配置文件作为springboot的默认配置文件。</p>
<ol>
<li><p>项目路径下的config文件夹 file:./config/  [需注意此路径下配置文件打成jar包时，不会出现在jar包中]</p>
</li>
<li><p>项目路径下 -file:./</p>
</li>
<li><p>classpath路径下config文件夹-classpath:/config/ </p>
</li>
<li><p>classpath路径下 -classpath:/</p>
<p>以上加载顺序是按照优先级从高到低的顺序，所有位置的文件都会被加载，如果冲突的情况，高优先级配置内容会覆盖低优先级配置内容。<br>如果不冲突，形成互补配置(共同作用，一个文件没有另一个有的会一起都会产生作用)。<br>可以通过配置spring.config.location来改变默认配置。使用命令行方式加载，否则优先级不够。<br>项目打包好以后，我们可以使用命令行参数的形式，启动项目的时候来指定配置文件的新位置；指定配置文件和默认加载的这些配置文件共同起作用形成互补配置<br>java -jar 项目名称.jar –spring.config.location=配置文件路径 (如D:/application.yml)</p>
<h2 id="外部配置加载顺序"><a href="#外部配置加载顺序" class="headerlink" title="外部配置加载顺序"></a>外部配置加载顺序</h2><p>SpringBoot也可以从以下位置加载配置； 优先级从高到低；高优先级的配置覆盖低优先级的配置，所有的配置会形成互补配置</p>
</li>
<li><p>命令行参数所有的配置都可以在命令行上进行指定(java -jar 项目名称..jar –server.port=8087 –server.context-path=/abc多个配置用空格分开； –配置项=值)</p>
</li>
<li><p>来自java:comp/env的JNDI属性</p>
</li>
<li><p>Java系统属性（System.getProperties()）</p>
</li>
<li><p>操作系统环境变量</p>
</li>
<li><p>RandomValuePropertySource配置的random.*属性值 </p>
</li>
<li><p>jar包外部的application-{profile}.properties或application.yml(带spring.profile)配置文件</p>
</li>
<li><p>jar包内部的application-{profile}.properties或application.yml(带spring.profile)配置文件</p>
</li>
<li><p>jar包外部的application.properties或application.yml(不带spring.profile)配置文件</p>
</li>
<li><p>jar包内部的application.properties或application.yml(不带spring.profile)配置文件</p>
</li>
<li><p>@Configuration注解类上的@PropertySource</p>
</li>
<li><p>通过SpringApplication.setDefaultProperties指定的默认属性<br>所有支持的配置加载来源:<a href="https://docs.spring.io/spring-boot/docs/1.5.9.RELEASE/reference/htmlsingle/#boot-features-external-config" target="_blank" rel="noopener">官方参考文档</a></p>
<h1 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h1><p>以上内容除了<strong>外部配置加载顺序</strong>使用较少，其他都是在程序中经常使用的,每个都经过代码的验证,如有不对的地方或者待完善的地方，请多多指教。</p>
</li>
</ol>
]]></content>
      <categories>
        <category>Spring Boot</category>
      </categories>
      <tags>
        <tag>Spring Boot</tag>
      </tags>
  </entry>
  <entry>
    <title>微信小程序开发</title>
    <url>/WeChat/WeChat_miApp.html</url>
    <content><![CDATA[ <br>
<a id="more"></a>

<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote>
<p>微信小程序的出现的时候，接触过也开发了一下简易版的Demo，但是由于种种的原因没有进行下去，这次趁着疫情有大把的时间，<br>  对微信小程序进行深入了解一下，查询了很多的资料以及结合自身的需求，经过筛选最终选择练手的项目为类似“豆瓣电影”电影咨询获取，<br>  从小程序的开发到上线部署整个过程进行一个记录，避免文章过于冗长内容讲解的不会特别的详细，，文章中关于更加详细的内容都会有相关文档的链接，如有不对的地方还望指正。</p>
</blockquote>
<h1 id="服务器的搭建"><a href="#服务器的搭建" class="headerlink" title="服务器的搭建"></a>服务器的搭建</h1><h2 id="1-购买云服务"><a href="#1-购买云服务" class="headerlink" title="1.购买云服务"></a>1.购买云服务</h2><p>我的云服务器购买的是阿里云轻量应用服务器具体配置如下:<br>CPU：1 核<br>内存：2GB<br>公网带宽：1 Mbps<br>操作系统：CentOS 7.3 64位<br>系统盘:40GB SSD云盘</p>
<h2 id="2-服务的配置"><a href="#2-服务的配置" class="headerlink" title="2.服务的配置"></a>2.服务的配置</h2><p>我选择的服务器系统选择为CentOS 7.3,为了方便操作，我选择宝塔Linux面板进行操作<br>具体的安装命令如下:<br>Linux面板6.0安装命令(暂时仅兼容Centos7.x，其它系统版本请安装5.9稳定版)</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">yum <span class="keyword">install</span> -y wget &amp;&amp; wget -O <span class="keyword">install</span>.sh http://download.bt.cn/<span class="keyword">install</span>/install_6.<span class="number">0</span>.sh &amp;&amp; bash <span class="keyword">install</span>.sh</span><br></pre></td></tr></table></figure>

<p>Linux面板6.0升级专业版:</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">curl http:<span class="regexp">//</span>download.bt.cn<span class="regexp">/install/u</span>pdate6.sh|bash</span><br></pre></td></tr></table></figure>

<p>安装完成后进行登录到宝塔面板进行配置,具体的操作请访问<a href="https://www.bt.cn/" target="_blank" rel="noopener">宝塔面板官网</a>进行查看，这里就不进行赘述。</p>
<h2 id="3-购买域名"><a href="#3-购买域名" class="headerlink" title="3.购买域名"></a>3.购买域名</h2><p>域名的作用收到映射IP地址的，可以代替IP地址来访问域名锁绑定的服务器，服务器的访问本身是可以使用IP地址+端口进行访问的，但是微信小程序是不允许使用IP加端口形式的url，而且域名相比较IP而已好记了许多。<br>我使用的域名是在<a href="https://wanwang.aliyun.com/" target="_blank" rel="noopener">万网</a>上买的购买的。</p>
<h2 id="4-阿里云域名解析"><a href="#4-阿里云域名解析" class="headerlink" title="4.阿里云域名解析"></a>4.阿里云域名解析</h2><p>域名购买好了之后怎么跟服务器进行绑定并使用的呢？<br>具体的操作可以点击此链接进行配置<a href="https://help.aliyun.com/document_detail/29716.html" target="_blank" rel="noopener">云解析 DNS &gt; 快速入门 &gt; 新手引导</a>,不进行赘述。</p>
<h2 id="5-阿里云域名的备案"><a href="#5-阿里云域名的备案" class="headerlink" title="5.阿里云域名的备案"></a>5.阿里云域名的备案</h2><p>国内申请的域名统统需要进行备案，详细的备案过程就不在赘述了，此处我选择的是阿里云备案<a href="https://beian.aliyun.com/?spm=5176.13329450.nav-right.dicp.6eda4df5bUJa3Q" target="_blank" rel="noopener">备案</a><br>域名备案的时间是毕竟长的，短则十几天，长则二十几天，需要耐心的等待。</p>
<h2 id="6-阿里云SSL证书"><a href="#6-阿里云SSL证书" class="headerlink" title="6.阿里云SSL证书"></a>6.阿里云SSL证书</h2><p>SSL证书:SSL证书就是遵守 SSL协议，由受信任的数字证书颁发机构CA，在验证服务器身份后颁发，具有服务器身份验证和数据传输加密功能。<br>在没有配置SSL证书时,url是以http开头，而配置了SSL证书的时候url是以https开头的，而微信小程序中要求的域名访问方式是以https开头的,所以需要配置SSL证书。<br>关于如何配置阿里云SSL证书可以参考此篇文章<a href="https://yq.aliyun.com/articles/706986?spm=a2c4e.11153940.0.0.766133a3BTTqMN&source=5176.11533457&userCode=ffsbbyn0" target="_blank" rel="noopener">如何选择SSL证书、并配置阿里云SSL证书</a></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>服务器已经购买并且配置好了以后,下面就实现小程序的具体的实现方法了。</p>
<h1 id="小程序"><a href="#小程序" class="headerlink" title="小程序"></a>小程序</h1><h2 id="1-注册小程序的账号"><a href="#1-注册小程序的账号" class="headerlink" title="1.注册小程序的账号"></a>1.注册小程序的账号</h2><p>首先在<a href="https://mp.weixin.qq.com/" target="_blank" rel="noopener">微信公众平台</a>上注册微信小程序的账号,注册完成后下载小程序开发工具:<a href="https://developers.weixin.qq.com/miniprogram/dev/devtools/download.html" target="_blank" rel="noopener">微信开发者工具</a></p>
<h2 id="2-小程序开发"><a href="#2-小程序开发" class="headerlink" title="2.小程序开发"></a>2.小程序开发</h2><p>打开下载后的微信开发者工具,扫码登录后创建小程序项目，界面如图所示，其中AppID为小程序的ID。<br><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/" target="_blank" rel="noopener">小程序的文档</a></p>
<h2 id="3-小程序开发过程"><a href="#3-小程序开发过程" class="headerlink" title="3.小程序开发过程"></a>3.小程序开发过程</h2><p>小程序主要使用的是js语言进行开发，开发的过程中遵循小程序开发文档的规范进行开发，调用的后端接口必须是以https开头的,服务器域名需要在微信公众平台中配置好。<br>此处推荐一个内网传统的工具<a href>uTools</a>,我在开发调试的时候使用的就是这个工具很方便。具体的开发过程这里就不进行赘述了，详细的参考开发文档</p>
<h2 id="4-打包上线"><a href="#4-打包上线" class="headerlink" title="4.打包上线"></a>4.打包上线</h2><p>开发完成后，并且进行了测试后没有任何的问题进行部署，在微信开发者工具点击上传，上传的时候需要填写版本号和注释，上传完成后登录到微信公众平台中，在版本管理&gt;开发版本页面可以看到<br>刚刚上传的小程序了,此版本也可以设置为体验版，可以进行扫码的进行体验，如果需要让更多的人进行体验，可以在成员管理中&gt;体验成员页面进行人员的添加。点击提交审核后等待审核通过的通知<br>审核通过后就可以微信中搜索到你的小程序进行访问。在提交审核之前需要进行基本信息的完善，在微信公众平台中设置&gt;基本信息，主要填写的信息是小程序的名称以及图标之类的。</p>
<h2 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h2><p>至此小程序的前端工作基本完成，微信小程序大量的工作算是在前端页面的了，页面的设计需要扎实的技术。如果涉及到复杂的逻辑以及数据的交互，牵扯到后端的数据的接口。</p>
<h1 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h1><p>后端服务主要是为小程序提供数据接口,使用的是http接口,返回的数据格式为Json格式。<br>以下是部分Api的Java代码</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="comment"><span class="markdown">/**</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet"> * </span>电影Api</span></span></span><br><span class="line"><span class="comment"><span class="markdown"> *</span></span></span><br><span class="line"><span class="comment"><span class="markdown"> */</span></span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/Movie"</span>)</span><br><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">ApiController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="markdown">/**</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">     * </span>最近热映</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">     * </span>@param request</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">     * </span>@return</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="code">     */</span></span></span></span><br><span class="line">    <span class="meta">@GetMapping</span>(value = <span class="string">"/in_theaters"</span>)</span><br><span class="line">    public <span class="built_in">Object</span> in_theaters(HttpServletRequest request) &#123;</span><br><span class="line">        <span class="built_in">String</span> result = HttpUtil.<span class="keyword">get</span>(<span class="string">"https://douban.uieee.com/v2/movie/in_theaters"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span>  ResultJson.json(result);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="markdown">/**</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">     * </span>top250</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">     * </span>@param request</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">     * </span>@return</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="code">     */</span></span></span></span><br><span class="line">    <span class="meta">@GetMapping</span>(value = <span class="string">"/top250"</span>)</span><br><span class="line">    public <span class="built_in">Object</span> top250(HttpServletRequest request) &#123;</span><br><span class="line">        <span class="built_in">String</span> start = request.getParameter(<span class="string">"start"</span>);</span><br><span class="line">        <span class="built_in">String</span> count = request.getParameter(<span class="string">"count"</span>);</span><br><span class="line">        <span class="built_in">String</span> result = HttpUtil.<span class="keyword">get</span>(<span class="string">"https://douban.uieee.com/v2/movie/top250?start="</span> + start + <span class="string">"&amp;count="</span> + count + <span class="string">""</span>);</span><br><span class="line">        <span class="keyword">return</span>  ResultJson.json(result);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>


<p> 以上贴出了最近热映、top250、两个接口的代码，通过观察得知，这两个接口的数据是都通过公共API获取豆瓣电影信息。具体的问题可以点击<a href="https://douban.uieee.com/" target="_blank" rel="noopener">Douban API Proxy</a>进行查询。<br> 通过公共API获取豆瓣电影信息并进行数据的处理。</p>
<ul>
<li>@RestController注解相当于@Controller+@ResponseBody两个注解的结合表示这个类处理http请求，返回格式为Json。</li>
<li>@RequestMapping是一个用来处理请求地址映射的注解，作用于类上，表示类中的所有响应请求的方法都是以该地址作为父路径。</li>
<li>@GetMapping是一个组合注解，是@RequestMapping(method = RequestMethod.GET)的缩写。该注解将http Get 映射到特定的处理方法上，因为在前端页面请求的时候指定了请求数据method的请求模式为GET</li>
</ul>
<p>服务端代码编写完成后通过浏览器访问”<a href="http://localhost:8085/movie/in_theaters&quot;获取到返回的数据" target="_blank" rel="noopener">http://localhost:8085/movie/in_theaters&quot;获取到返回的数据</a></p>
<h2 id="总结-2"><a href="#总结-2" class="headerlink" title="总结"></a>总结</h2><p>经过本地的测试没有任何的问题和，需要打包上线到自己购买的服务器上，并且可以通过域名进行访问。<br>关于<a href="/WeChat/WeChat_miApp/">CentOs7部署JAVA程序</a>可以参考此篇内容,此处不再赘述。</p>
<h1 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h1><p> 关于小程序搭建的说明，以及相应问题的解决方法</p>
<h2 id="小程序说明"><a href="#小程序说明" class="headerlink" title="小程序说明"></a>小程序说明</h2><p> 此次搭建的小程序是基于<a href="https://github.com/sesine/wechat-weapp-movie" target="_blank" rel="noopener">wechat-weapp-movie</a>开源项目,此Demo仅仅用来学习,并进行了部分的修改和增加,包括后端程序的编写,非常感谢sesine开源此项目<br> <strong>修改内容</strong>:由于微信小程序修改了获取用户信息的方式,所以对此进行了相应的修改，由于官方问题导致搜索接口无法使用，所以取消了搜索功能。<br> <strong>增加内容</strong>:增加每部影片的影评以及打分的星星。</p>
<h2 id="服务端程序说明"><a href="#服务端程序说明" class="headerlink" title="服务端程序说明"></a>服务端程序说明</h2><p> 后端程序使用的是开源的豆瓣Api<a href="https://douban.uieee.com/" target="_blank" rel="noopener">Douban API Proxy</a>,自己经过数据的处理；</p>
<h2 id="总结-3"><a href="#总结-3" class="headerlink" title="总结"></a>总结</h2><p> 由于从小程序的开发到部署上线，中间也遇到很多的问题,收获也很多同时也发现了自己的问题所在，印象最深的是需要多多看微信小程序的Api，如有不足之处还望指正。<br> 关于微信小程序问题及解决方法可以查看此文章<a href="/WeChat/WeChat_question">小程序问题</a></p>
]]></content>
      <categories>
        <category>WeChat</category>
      </categories>
      <tags>
        <tag>WeChat</tag>
      </tags>
  </entry>
  <entry>
    <title>即时通讯-服务端搭建(一)</title>
    <url>/IM/Im_Server.html</url>
    <content><![CDATA[ <br>
<a id="more"></a>

<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1> <div class="note info"><p>之前在做技术积累的时候基于Layim+t-io做了一个即时通讯，由于某种原因，就搁置了，最近抽空将其完善，此系列记录开发过程。</p></div>
<h1 id="关于t-io"><a href="#关于t-io" class="headerlink" title="关于t-io"></a>关于t-io</h1><p> 在开始之前建议对于t-io不熟悉的可以去官网看看<a href="https://www.t-io.org/?qm=1" target="_blank" rel="noopener">t-io</a> 网络上对于t-io的解析的文章很多，可以看看,<a href="https://gitee.com/cctvmfc/t-io" target="_blank" rel="noopener">t-io的源码地址</a></p>
<h1 id="开发环境"><a href="#开发环境" class="headerlink" title="开发环境"></a>开发环境</h1><p> 　　操作系统：Windows 10 X64<br> 　　开发工具：IntelliJ IDEA ULTIMATE 2018.3<br> 　　JDK:1.8.0_131<br> 　　t-io：3.5.7.v20191115-RELEASE<br> 　　数据库：MySQL5.7 </p>
<h1 id="服务端搭建"><a href="#服务端搭建" class="headerlink" title="服务端搭建"></a>服务端搭建</h1><p> 在服务搭建之前建议先去网络上对以下几个类进行了解</p>
<ol>
<li><p>IWsMsgHandler(websocket事件监听器)</p>
</li>
<li><p>ServerAioHandler(消息的处理)</p>
</li>
<li><p>WsServerAioListener(事件监听)</p>
</li>
<li><p>WsServerConfig(服务端的配置)</p>
</li>
<li><p>ServerTioConfig(当前的上下文)</p>
</li>
<li><p>TioServer(Tio服务)</p>
<p>本篇文章不会对于t-io进行过多的分析，尽量减少文字的描述，大部分使用代码进行呈现,需要详细的了解t-io的话可以去它的<a href="https://www.t-io.org/?qm=1" target="_blank" rel="noopener">官网</a>进行了解</p>
<h1 id="详细代码"><a href="#详细代码" class="headerlink" title="详细代码"></a>详细代码</h1><h2 id="引入t-io的包"><a href="#引入t-io的包" class="headerlink" title="引入t-io的包"></a>引入t-io的包</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.t-io<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>tio-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.7.v20191115-RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.t-io<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>tio-websocket-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.7.v20191115-RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

</li>
</ol>
<h2 id="ServerSocketStarter-java"><a href="#ServerSocketStarter-java" class="headerlink" title="ServerSocketStarter.java"></a>ServerSocketStarter.java</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 服务端启动</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> lm</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServerSocketStarter</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> WebSocketProperties webSocketProperties;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> WsStarter <span class="title">serverStarter</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        WesServerConfig wesServerConfig = <span class="keyword">new</span> WesServerConfig(webSocketProperties.getPort());</span><br><span class="line">        wesServerConfig.setBindIp(webSocketProperties.getIp());</span><br><span class="line">        WsStarter wsStarter=<span class="keyword">new</span> WsStarter(wesServerConfig,<span class="keyword">new</span> WesMsgHandler());</span><br><span class="line">        <span class="comment">//启动程序</span></span><br><span class="line">        wsStarter.start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> wsStarter;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="WesServerConfig-java"><a href="#WesServerConfig-java" class="headerlink" title="WesServerConfig.java"></a>WesServerConfig.java</h2><p>继承org.tio.websocket.server.WsServerConfig</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">WesServerConfig</span> <span class="keyword">extends</span> <span class="title">WsServerConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    public <span class="type">WesServerConfig</span>(<span class="type">Integer</span> bindPort, boolean useSession) &#123;</span><br><span class="line">        <span class="keyword">super</span>(bindPort, useSession);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public <span class="type">WesServerConfig</span>(<span class="type">Integer</span> bindPort) &#123;</span><br><span class="line">        <span class="keyword">super</span>(bindPort);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="WsStarter-java"><a href="#WsStarter-java" class="headerlink" title="WsStarter.java"></a>WsStarter.java</h2><p>源码地址:org.tio.websocket.server.WsServerStarter</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 改造原来的启动配置</span></span><br><span class="line"><span class="comment"> * 原来的位置:</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WsStarter</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> static Logger log = LoggerFactory.getLogger(WsServerStarter.<span class="keyword">class</span>);</span><br><span class="line">    <span class="comment">//服务端 ip和端口的配置</span></span><br><span class="line">    <span class="keyword">private</span> WesServerConfig wesServerConfig;</span><br><span class="line">    <span class="comment">//定义handler，所有的请求数据全部都由这个handler来处理,decode/encode/handler等等</span></span><br><span class="line">    <span class="keyword">private</span> WesMsgHandler wesMsgHandler;</span><br><span class="line">    <span class="comment">//服务端的消息处理 所有的请求数据全部都由这个handler来处理,decode/encode/handler等等</span></span><br><span class="line">    <span class="keyword">private</span> WesServerAioHandler wesServerAioHandler;</span><br><span class="line">    <span class="comment">//可以在连接上、接收到消息、发送消息后等等回调其内部方法</span></span><br><span class="line">    <span class="keyword">private</span> WesServerAioListener wesServerAioListener;</span><br><span class="line">    <span class="comment">//服务端上下文初始化</span></span><br><span class="line">    <span class="keyword">private</span> ServerTioConfig serverTioConfig;</span><br><span class="line">    <span class="keyword">private</span> TioServer tioServer;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> TioServer getTioServer() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.tioServer;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> WesServerConfig getWesServerConfig() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.wesServerConfig;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> WesMsgHandler getWesMsgHandler() &#123;</span><br><span class="line">        <span class="keyword">return</span> wesMsgHandler;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> void setWesMsgHandler(WesMsgHandler wesMsgHandler) &#123;</span><br><span class="line">        <span class="keyword">this</span>.wesMsgHandler = wesMsgHandler;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> WesServerAioHandler getWesServerAioHandler() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.wesServerAioHandler;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> WesServerAioListener getWesServerAioListener() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.wesServerAioListener;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> ServerTioConfig getServerTioConfig() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.serverTioConfig;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> WsStarter(WesServerConfig wesServerConfig, WesMsgHandler wesMsgHandler) throws IOException &#123;</span><br><span class="line">        <span class="keyword">this</span>(wesServerConfig, wesMsgHandler, (SynThreadPoolExecutor)<span class="literal">null</span>, (ThreadPoolExecutor)<span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> WsStarter(WesServerConfig wesServerConfig, WesMsgHandler wesMsgHandler, SynThreadPoolExecutor tioExecutor, ThreadPoolExecutor groupExecutor) throws IOException &#123;</span><br><span class="line">        <span class="keyword">this</span>(wesServerConfig, wesMsgHandler, new WsTioUuid(), tioExecutor, groupExecutor);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> WsStarter(WesServerConfig wesServerConfig, WesMsgHandler wesMsgHandler, TioUuid tioUuid, SynThreadPoolExecutor tioExecutor, ThreadPoolExecutor groupExecutor) throws IOException &#123;</span><br><span class="line">        <span class="keyword">this</span>.wesServerConfig = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">this</span>.wesMsgHandler = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">this</span>.wesServerAioHandler = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">this</span>.wesServerAioListener = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">this</span>.serverTioConfig = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">this</span>.tioServer = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (tioExecutor == <span class="literal">null</span>) &#123;</span><br><span class="line">            tioExecutor = Threads.getTioExecutor();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (groupExecutor == <span class="literal">null</span>) &#123;</span><br><span class="line">            groupExecutor = Threads.getGroupExecutor();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.wesServerConfig = wesServerConfig;</span><br><span class="line">        <span class="keyword">this</span>.wesMsgHandler = wesMsgHandler;</span><br><span class="line">        wesServerAioHandler = new WesServerAioHandler(wesServerConfig, wesMsgHandler);</span><br><span class="line">        wesServerAioListener = new WesServerAioListener();</span><br><span class="line">        serverTioConfig = new ServerTioConfig(<span class="string">"Tio Websocket Server"</span>, <span class="keyword">this</span>.wesServerAioHandler, <span class="keyword">this</span>.wesServerAioListener, tioExecutor, groupExecutor);</span><br><span class="line">        serverTioConfig.setHeartbeatTimeout(<span class="number">0L</span>);</span><br><span class="line">        serverTioConfig.setTioUuid(tioUuid);</span><br><span class="line">        serverTioConfig.setReadBufferSize(<span class="number">30720</span>);</span><br><span class="line">        tioServer = new TioServer(<span class="keyword">this</span>.serverTioConfig);</span><br><span class="line">        WebMsgHandler.<span class="keyword">init</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> void start() throws IOException &#123;</span><br><span class="line">        tioServer.start(<span class="keyword">this</span>.wesServerConfig.getBindIp(), <span class="keyword">this</span>.wesServerConfig.getBindPort());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="WesMsgHandler-java"><a href="#WesMsgHandler-java" class="headerlink" title="WesMsgHandler.java"></a>WesMsgHandler.java</h2><p>实现:org.tio.websocket.server.handler.IWsMsgHandler</p>
<figure class="highlight aspectj"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  websocket事件的监听</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WesMsgHandler</span> <span class="keyword">implements</span> <span class="title">IWsMsgHandler</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> MineService mineService;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> FriendOrGroupService friendOrGroupService;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(WesMsgHandler.class);</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 握手时走这个方法，业务可以在这里获取cookie，request参数等</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function">HttpResponse <span class="title">handshake</span><span class="params">(HttpRequest httpRequest, HttpResponse httpResponse, ChannelContext channelContext)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">return</span> <span class="title">handshakeUser</span><span class="params">(httpRequest,httpResponse,channelContext)</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">onAfterHandshaked</span><span class="params">(HttpRequest httpRequest, HttpResponse httpResponse, ChannelContext channelContext)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function">Object <span class="title">onBytes</span><span class="params">(WsRequest wsRequest, <span class="keyword">byte</span>[] bytes, ChannelContext channelContext)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"暂不支持字节消息解析"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 离线or关闭</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> wsRequest</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> bytes</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> channelContext</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function">Object <span class="title">onClose</span><span class="params">(WsRequest wsRequest, <span class="keyword">byte</span>[] bytes, ChannelContext channelContext)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        Tio.remove(channelContext,<span class="string">"onClose"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function">Object <span class="title">onText</span><span class="params">(WsRequest wsRequest, String s, ChannelContext channelContext)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="function">MineService <span class="title">getMineService</span><span class="params">()</span></span>&#123;</span><br><span class="line">        mineService= SpringContextUtil.getBean(MineService.class);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> mineService;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function">FriendOrGroupService <span class="title">getFriendOrGroupService</span><span class="params">()</span></span>&#123;</span><br><span class="line">        friendOrGroupService= SpringContextUtil.getBean(FriendOrGroupService.class);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> friendOrGroupService;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 握手成功后的处理</span></span><br><span class="line"><span class="comment">     * 将用户信息绑定到当前的上下文channelContext中</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="function">HttpResponse <span class="title">handshakeUser</span><span class="params">( HttpRequest httpRequest,HttpResponse httpResponse, ChannelContext channelContext)</span> <span class="keyword">throws</span>  Exception </span>&#123;</span><br><span class="line">        MineService mineService = getMineService();</span><br><span class="line">        FriendOrGroupService friendOrGroupService = getFriendOrGroupService();</span><br><span class="line">        <span class="comment">//获得缓存</span></span><br><span class="line">        String userid=UserUtils.getImid();</span><br><span class="line">        <span class="comment">//根据登录人的id获取当前登录人的信息</span></span><br><span class="line">        Mine mine= mineService.get(userid);</span><br><span class="line">        <span class="comment">//将当前登录人的信息保存到layim需要的格式里面</span></span><br><span class="line">        String userId = mine.getId();</span><br><span class="line">        channelContext.setAttribute(userId, mine);</span><br><span class="line">        <span class="comment">//绑定用户ID</span></span><br><span class="line">        Tio.bindUser(channelContext, userId);</span><br><span class="line">        <span class="comment">//清除缓存</span></span><br><span class="line">        UserUtils.removeImid();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> httpResponse;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h2 id="WesServerAioHandler-java"><a href="#WesServerAioHandler-java" class="headerlink" title="WesServerAioHandler.java"></a>WesServerAioHandler.java</h2><p>实现:org.tio.core.intf.AioHandler.ServerAioHandler</p>
<figure class="highlight processing"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  消息处理</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> class WesServerAioHandler implements ServerAioHandler &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Logger <span class="built_in">log</span> = LoggerFactory.getLogger(WsServerAioHandler.class);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> WesServerConfig wesServerConfig;</span><br><span class="line">    <span class="keyword">private</span> WesMsgHandler wesMsgHandler;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> WesServerAioHandler(WesServerConfig wesServerConfig, WesMsgHandler wesMsgHandler) &#123;</span><br><span class="line">        <span class="keyword">this</span>.wesServerConfig = wesServerConfig;</span><br><span class="line">        <span class="keyword">this</span>.wesMsgHandler = wesMsgHandler;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/***</span></span><br><span class="line"><span class="comment">     *服务端消息解码</span></span><br><span class="line"><span class="comment">     * 将消息的返回值进行封装</span></span><br><span class="line"><span class="comment">     * @param buffer</span></span><br><span class="line"><span class="comment">     * @param limit</span></span><br><span class="line"><span class="comment">     * @param position</span></span><br><span class="line"><span class="comment">     * @param readableLength</span></span><br><span class="line"><span class="comment">     * @param channelContext</span></span><br><span class="line"><span class="comment">     * @return</span></span><br><span class="line"><span class="comment">     * @throws AioDecodeException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    @Override</span><br><span class="line">    <span class="keyword">public</span> WsRequest decode(ByteBuffer buffer, <span class="built_in">int</span> limit, <span class="built_in">int</span> position, <span class="built_in">int</span> readableLength, ChannelContext channelContext) <span class="keyword">throws</span> AioDecodeException &#123;</span><br><span class="line">        WsSessionContext wsSessionContext = (WsSessionContext)channelContext.getAttribute();</span><br><span class="line">        <span class="keyword">if</span> (!wsSessionContext.isHandshaked()) &#123;</span><br><span class="line">            HttpRequest request = HttpRequestDecoder.decode(buffer, limit, position, readableLength, channelContext, wesServerConfig);</span><br><span class="line">            <span class="keyword">if</span> (request == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                HttpResponse httpResponse = updateWebSocketProtocol(request, channelContext);</span><br><span class="line">                <span class="keyword">if</span> (httpResponse == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> AioDecodeException(<span class="string">"http协议升级到websocket协议失败"</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    wsSessionContext.setHandshakeRequest(request);</span><br><span class="line">                    wsSessionContext.setHandshakeResponse(httpResponse);</span><br><span class="line">                    WsRequest wsRequestPacket = <span class="keyword">new</span> WsRequest();</span><br><span class="line">                    wsRequestPacket.setHandShake(<span class="keyword">true</span>);</span><br><span class="line">                    <span class="built_in">log</span>.info(<span class="string">"握手成功"</span>);</span><br><span class="line">                    <span class="keyword">return</span> wsRequestPacket;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            WsRequest websocketPacket = WsServerDecoder.decode(buffer, channelContext);</span><br><span class="line">            <span class="keyword">return</span> websocketPacket;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 编码：把业务消息包编码为可以发送的ByteBuffer</span></span><br><span class="line"><span class="comment">     * 总的消息结构：消息头 + 消息体</span></span><br><span class="line"><span class="comment">     * 消息头结构：    4个字节，存储消息体的长度</span></span><br><span class="line"><span class="comment">     * 消息体结构：   对象的json串的byte[]</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    @Override</span><br><span class="line">    <span class="keyword">public</span> ByteBuffer encode(Packet packet, TioConfig tioConfig, ChannelContext channelContext) &#123;</span><br><span class="line">        WsResponse wsResponse = (WsResponse)packet;</span><br><span class="line">        <span class="keyword">if</span> (wsResponse.isHandShake()) &#123;</span><br><span class="line">            WsSessionContext imSessionContext = (WsSessionContext)channelContext.getAttribute();</span><br><span class="line">            HttpResponse handshakeResponse = imSessionContext.getHandshakeResponse();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> HttpResponseEncoder.encode(handshakeResponse, tioConfig, channelContext);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (UnsupportedEncodingException var8) &#123;</span><br><span class="line">                <span class="built_in">log</span>.error(var8.toString(), var8);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            ByteBuffer byteBuffer = WsServerEncoder.encode(wsResponse, tioConfig, channelContext);</span><br><span class="line">            <span class="keyword">return</span> byteBuffer;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> WsServerConfig getHttpConfig() &#123;</span><br><span class="line">        <span class="keyword">return</span> wesServerConfig;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 进行消息的处理以及转发</span></span><br><span class="line"><span class="comment">     * @param websocketPacket</span></span><br><span class="line"><span class="comment">     * @param bytes</span></span><br><span class="line"><span class="comment">     * @param opcode</span></span><br><span class="line"><span class="comment">     * @param channelContext</span></span><br><span class="line"><span class="comment">     * @return</span></span><br><span class="line"><span class="comment">     * @throws Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> WsResponse handler(WsRequest websocketPacket, <span class="built_in">byte</span>[] bytes, Opcode opcode, ChannelContext channelContext) <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        WsResponse wsResponse = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (opcode == Opcode.TEXT) &#123;</span><br><span class="line">            <span class="keyword">if</span> (bytes != <span class="keyword">null</span> &amp;&amp; bytes.length != <span class="number">0</span>) &#123;</span><br><span class="line"></span><br><span class="line">                <span class="comment">//接收到的消息包</span></span><br><span class="line">                <span class="keyword">String</span> <span class="built_in">text</span> = <span class="keyword">new</span> <span class="keyword">String</span>(bytes, wesServerConfig.getCharset());</span><br><span class="line">                <span class="keyword">JSONObject</span> jsonObject = JSON.parseObject(<span class="built_in">text</span>);</span><br><span class="line">                <span class="comment">//获得消息类型</span></span><br><span class="line">                MsgType property = Json.toBean(<span class="built_in">text</span>, MsgType.class);</span><br><span class="line">                <span class="comment">//解析数据消息</span></span><br><span class="line">                <span class="built_in">log</span>.info(<span class="string">"消息类型"</span>,property.getMsgtype());</span><br><span class="line">                MsgHandler msgHandler = WebMsgHandler.getMsg(property.getMsgtype());</span><br><span class="line">                <span class="built_in">boolean</span> unknown = msgHandler == <span class="keyword">null</span>;</span><br><span class="line">                <span class="keyword">if</span>(!unknown) &#123;</span><br><span class="line">                    <span class="comment">//根据消息类型进行消息的处理</span></span><br><span class="line">                    msgHandler.handler(websocketPacket, channelContext);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">Object</span> retObj = wesMsgHandler.onText(websocketPacket, <span class="built_in">text</span>, channelContext);</span><br><span class="line">                <span class="keyword">String</span> methodName = <span class="string">"onText"</span>;</span><br><span class="line">                wsResponse = <span class="keyword">this</span>.processRetObj(retObj, methodName, channelContext);</span><br><span class="line">                <span class="keyword">return</span> wsResponse;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                Tio.remove(channelContext, <span class="string">"错误的websocket包，body为空"</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">Object</span> retObj;</span><br><span class="line">            <span class="keyword">String</span> methodName;</span><br><span class="line">            <span class="keyword">if</span> (opcode == Opcode.BINARY) &#123;</span><br><span class="line">                <span class="keyword">if</span> (bytes != <span class="keyword">null</span> &amp;&amp; bytes.length != <span class="number">0</span>) &#123;</span><br><span class="line">                    retObj = wesMsgHandler.onBytes(websocketPacket, bytes, channelContext);</span><br><span class="line">                    methodName = <span class="string">"onBytes"</span>;</span><br><span class="line">                    wsResponse = <span class="keyword">this</span>.processRetObj(retObj, methodName, channelContext);</span><br><span class="line">                    <span class="keyword">return</span> wsResponse;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    Tio.remove(channelContext, <span class="string">"错误的websocket包，body为空"</span>);</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (opcode != Opcode.PING &amp;&amp; opcode != Opcode.PONG) &#123;</span><br><span class="line">                <span class="keyword">if</span> (opcode == Opcode.CLOSE) &#123;</span><br><span class="line">                    <span class="keyword">String</span> <span class="built_in">text</span> = ByteUtil.toText(bytes);</span><br><span class="line">                    retObj = wesMsgHandler.onClose(websocketPacket, bytes, channelContext);</span><br><span class="line">                    methodName = <span class="string">"onClose"</span>;</span><br><span class="line">                    wsResponse = <span class="keyword">this</span>.processRetObj(retObj, methodName, channelContext);</span><br><span class="line">                    <span class="keyword">return</span> wsResponse;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    Tio.remove(channelContext, <span class="string">"错误的websocket包，错误的Opcode"</span>);</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="built_in">log</span>.info(<span class="string">"收到"</span> + opcode);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> handler(Packet packet, ChannelContext channelContext) <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        WsRequest wsRequest = (WsRequest)packet;</span><br><span class="line">        <span class="keyword">if</span> (wsRequest.isHandShake()) &#123;</span><br><span class="line">            WsSessionContext wsSessionContext = (WsSessionContext)channelContext.getAttribute();</span><br><span class="line">            HttpRequest request = wsSessionContext.getHandshakeRequest();</span><br><span class="line">            HttpResponse httpResponse = wsSessionContext.getHandshakeResponse();</span><br><span class="line">            HttpResponse r = wesMsgHandler.handshake(request, httpResponse, channelContext);</span><br><span class="line">            <span class="keyword">if</span> (r == <span class="keyword">null</span>) &#123;</span><br><span class="line">                Tio.remove(channelContext, <span class="string">"业务层不同意握手"</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                wsSessionContext.setHandshakeResponse(r);</span><br><span class="line">                WsResponse wsResponse = <span class="keyword">new</span> WsResponse();</span><br><span class="line">                wsResponse.setHandShake(<span class="keyword">true</span>);</span><br><span class="line">                Tio.send(channelContext, wsResponse);</span><br><span class="line">                wsSessionContext.setHandshaked(<span class="keyword">true</span>);</span><br><span class="line">                wesMsgHandler.onAfterHandshaked(request, httpResponse, channelContext);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">log</span>.info(<span class="string">"进行消息的处理"</span>);</span><br><span class="line">            WsResponse wsResponse = <span class="keyword">this</span>.handler(wsRequest, wsRequest.getBody(), wsRequest.getWsOpcode(), channelContext);</span><br><span class="line">            <span class="keyword">if</span> (wsResponse != <span class="keyword">null</span>) &#123;</span><br><span class="line">                Tio.send(channelContext, wsResponse);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> WsResponse processRetObj(<span class="keyword">Object</span> obj, <span class="keyword">String</span> methodName, ChannelContext channelContext) <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        WsResponse wsResponse = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (obj == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (obj <span class="keyword">instanceof</span> <span class="keyword">String</span>) &#123;</span><br><span class="line">            <span class="keyword">String</span> <span class="built_in">str</span> = (<span class="keyword">String</span>)obj;</span><br><span class="line">            wsResponse = WsResponse.fromText(<span class="built_in">str</span>, wesServerConfig.getCharset());</span><br><span class="line">            <span class="keyword">return</span> wsResponse;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (obj <span class="keyword">instanceof</span> <span class="built_in">byte</span>[]) &#123;</span><br><span class="line">            wsResponse = WsResponse.fromBytes((<span class="built_in">byte</span>[])((<span class="built_in">byte</span>[])obj));</span><br><span class="line">            <span class="keyword">return</span> wsResponse;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (obj <span class="keyword">instanceof</span> WsResponse) &#123;</span><br><span class="line">            <span class="keyword">return</span> (WsResponse)obj;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (obj <span class="keyword">instanceof</span> ByteBuffer) &#123;</span><br><span class="line">            <span class="built_in">byte</span>[] bs = ((ByteBuffer)obj).array();</span><br><span class="line">            wsResponse = WsResponse.fromBytes(bs);</span><br><span class="line">            <span class="keyword">return</span> wsResponse;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">log</span>.error(<span class="string">"&#123;&#125; &#123;&#125;.&#123;&#125;()方法，只允许返回byte[]、ByteBuffer、WsResponse或null，但是程序返回了&#123;&#125;"</span>, <span class="keyword">new</span> <span class="keyword">Object</span>[]&#123;channelContext, <span class="keyword">this</span>.getClass().getName(), methodName, obj.getClass().getName()&#125;);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> setHttpConfig(WesServerConfig httpConfig) &#123;</span><br><span class="line">        wesServerConfig = httpConfig;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> HttpResponse updateWebSocketProtocol(HttpRequest request, ChannelContext channelContext) &#123;</span><br><span class="line">        Map&lt;<span class="keyword">String</span>, <span class="keyword">String</span>&gt; headers = request.getHeaders();</span><br><span class="line">        <span class="keyword">String</span> Sec_WebSocket_Key = (<span class="keyword">String</span>)headers.<span class="built_in">get</span>(<span class="string">"sec-websocket-key"</span>);</span><br><span class="line">        <span class="keyword">if</span> (StrUtil.isNotBlank(Sec_WebSocket_Key)) &#123;</span><br><span class="line">            <span class="keyword">String</span> Sec_WebSocket_Key_Magic = Sec_WebSocket_Key + <span class="string">"258EAFA5-E914-47DA-95CA-C5AB0DC85B11"</span>;</span><br><span class="line">            <span class="built_in">byte</span>[] key_array = SHA1Util.SHA1(Sec_WebSocket_Key_Magic);</span><br><span class="line">            <span class="keyword">String</span> acceptKey = BASE64Util.byteArrayToBase64(key_array);</span><br><span class="line">            HttpResponse httpResponse = <span class="keyword">new</span> HttpResponse(request);</span><br><span class="line">            httpResponse.setStatus(HttpResponseStatus.C101);</span><br><span class="line">            Map&lt;HeaderName, HeaderValue&gt; respHeaders = <span class="keyword">new</span> <span class="keyword">HashMap</span>();</span><br><span class="line">            respHeaders.put(HeaderName.Connection, HeaderValue.Connection.Upgrade);</span><br><span class="line">            respHeaders.put(HeaderName.Upgrade, HeaderValue.Upgrade.WebSocket);</span><br><span class="line">            respHeaders.put(HeaderName.Sec_WebSocket_Accept, HeaderValue.from(acceptKey));</span><br><span class="line">            httpResponse.addHeaders(respHeaders);</span><br><span class="line">            <span class="keyword">return</span> httpResponse;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="WesServerAioListener-java"><a href="#WesServerAioListener-java" class="headerlink" title="WesServerAioListener.java"></a>WesServerAioListener.java</h2><p>继承:org.tio.websocket.server.WsServerAioListener</p>
<figure class="highlight processing"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 事件监听</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="keyword">public</span> class WesServerAioListener extends WsServerAioListener &#123;</span><br><span class="line">     <span class="keyword">private</span> <span class="keyword">static</span> Logger <span class="built_in">log</span> = LoggerFactory.getLogger(WesServerAioListener.class);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">     @Override</span><br><span class="line">     <span class="keyword">public</span> <span class="keyword">void</span> onAfterConnected(ChannelContext channelContext, <span class="built_in">boolean</span> isConnected, <span class="built_in">boolean</span> isReconnect) <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">         <span class="keyword">super</span>.onAfterConnected(channelContext, isConnected, isReconnect);</span><br><span class="line">         <span class="keyword">if</span> (<span class="built_in">log</span>.isInfoEnabled()) &#123;</span><br><span class="line">             <span class="built_in">log</span>.info(<span class="string">"onAfterConnected\r\n&#123;&#125;"</span>, channelContext);</span><br><span class="line">         &#125;</span><br><span class="line"></span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     @Override</span><br><span class="line">     <span class="keyword">public</span> <span class="keyword">void</span> onAfterSent(ChannelContext channelContext, Packet packet, <span class="built_in">boolean</span> isSentSuccess) <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">         <span class="keyword">super</span>.onAfterSent(channelContext, packet, isSentSuccess);</span><br><span class="line">         <span class="keyword">if</span> (<span class="built_in">log</span>.isInfoEnabled()) &#123;</span><br><span class="line">             <span class="built_in">log</span>.info(<span class="string">"onAfterSent\r\n&#123;&#125;\r\n&#123;&#125;"</span>, packet.logstr(), channelContext);</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     @Override</span><br><span class="line">     <span class="keyword">public</span> <span class="keyword">void</span> onBeforeClose(ChannelContext channelContext, Throwable throwable, <span class="keyword">String</span> remark, <span class="built_in">boolean</span> isRemove) <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">         <span class="keyword">super</span>.onBeforeClose(channelContext, throwable, remark, isRemove);</span><br><span class="line">         <span class="keyword">if</span> (<span class="built_in">log</span>.isInfoEnabled()) &#123;</span><br><span class="line">             <span class="built_in">log</span>.info(<span class="string">"onBeforeClose\r\n&#123;&#125;"</span>, channelContext);</span><br><span class="line">         &#125;</span><br><span class="line"></span><br><span class="line">         WsSessionContext wsSessionContext = (WsSessionContext) channelContext.<span class="built_in">get</span>();</span><br><span class="line"></span><br><span class="line">         <span class="keyword">if</span> (wsSessionContext != <span class="keyword">null</span> &amp;&amp; wsSessionContext.isHandshaked()) &#123;</span><br><span class="line"></span><br><span class="line">             <span class="built_in">int</span> count = Tio.getAll(channelContext.tioConfig).getObj().<span class="built_in">size</span>();</span><br><span class="line"></span><br><span class="line">             <span class="keyword">String</span> msg = channelContext.getClientNode().toString() + <span class="string">" 离开了，现在共有【"</span> + count + <span class="string">"】人在线"</span>;</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     @Override</span><br><span class="line">     <span class="keyword">public</span> <span class="keyword">void</span> onAfterDecoded(ChannelContext channelContext, Packet packet, <span class="built_in">int</span> packetSize) <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">         <span class="keyword">super</span>.onAfterDecoded(channelContext, packet, packetSize);</span><br><span class="line">         <span class="keyword">if</span> (<span class="built_in">log</span>.isInfoEnabled()) &#123;</span><br><span class="line">             <span class="built_in">log</span>.info(<span class="string">"onAfterDecoded\r\n&#123;&#125;\r\n&#123;&#125;"</span>, packet.logstr(), channelContext);</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     @Override</span><br><span class="line">     <span class="keyword">public</span> <span class="keyword">void</span> onAfterReceivedBytes(ChannelContext channelContext, <span class="built_in">int</span> receivedBytes) <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">         <span class="keyword">super</span>.onAfterReceivedBytes(channelContext, receivedBytes);</span><br><span class="line">         <span class="keyword">if</span> (<span class="built_in">log</span>.isInfoEnabled()) &#123;</span><br><span class="line">             <span class="built_in">log</span>.info(<span class="string">"onAfterReceivedBytes\r\n&#123;&#125;"</span>, channelContext);</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     @Override</span><br><span class="line">     <span class="keyword">public</span> <span class="keyword">void</span> onAfterHandled(ChannelContext channelContext, Packet packet, <span class="keyword">long</span> cost) <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">         <span class="keyword">super</span>.onAfterHandled(channelContext, packet, cost);</span><br><span class="line">         <span class="keyword">if</span> (<span class="built_in">log</span>.isInfoEnabled()) &#123;</span><br><span class="line">             <span class="built_in">log</span>.info(<span class="string">"onAfterHandled\r\n&#123;&#125;\r\n&#123;&#125;"</span>, packet.logstr(), channelContext);</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<h2 id="WebSocketProperties-java-端口和网址的配置"><a href="#WebSocketProperties-java-端口和网址的配置" class="headerlink" title="WebSocketProperties.java(端口和网址的配置)"></a>WebSocketProperties.java(端口和网址的配置)</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @author 端口和网址的配置</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line">@Component</span><br><span class="line">@ConfigurationProperties(prefix = <span class="string">"websocket"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebSocketProperties</span> &#123;</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 端口</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> port;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * ip地址</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String ip;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getPort</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> port;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPort</span><span class="params">(<span class="keyword">int</span> port)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.port = port;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getIp</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ip;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setIp</span><span class="params">(String ip)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.ip = ip;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h1><p>WebSocketProperties类的配置一些配置是在application.yml文件中定义的</p>
<figure class="highlight dts"><table><tr><td class="code"><pre><span class="line"><span class="symbol">websocket:</span></span><br><span class="line"><span class="symbol">  ip:</span> <span class="number">192.168</span>.xx.xxx <span class="meta">#服务器的IP地址</span></span><br><span class="line"><span class="symbol">  port:</span> <span class="number">8089</span></span><br></pre></td></tr></table></figure>

<h1 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h1><p>启动项目后出现如下图内容,证明服务端配置成功<br><img src="/blog/im/t-io(01).jpg" alt><br>由于部分内容待完善,源码暂时无法提供,等功能完善后会提供源码。<br>此篇内容仅仅只是记录自己在完成该功能的时候的一些过程，以及自己的思路。其中也遇到一些问题，通过网上查找了相关一些资料，如有不对的地方或者待完善的地方，请多多指教。</p>
<h1 id="参考内容"><a href="#参考内容" class="headerlink" title="参考内容"></a>参考内容</h1>]]></content>
      <categories>
        <category>IM</category>
      </categories>
      <tags>
        <tag>IM</tag>
      </tags>
  </entry>
  <entry>
    <title>常见的四种限流算法</title>
    <url>/SpringBoot/rateLimiter_algorithm.html</url>
    <content><![CDATA[ <br>
<a id="more"></a>

 <div class="note info"><p>近期处理了关于限流相关的问题,了解到有四种限流的算法,以下的代码使用的是Redis缓存,将此次的使用进行一个记录,以下是相关的代码:</p></div>

 <!-- more -->

<h1 id="限流的方式"><a href="#限流的方式" class="headerlink" title="限流的方式"></a>限流的方式</h1><h2 id="1-固定窗口算法-计数器"><a href="#1-固定窗口算法-计数器" class="headerlink" title="1.固定窗口算法(计数器)"></a>1.固定窗口算法(计数器)</h2><blockquote>
<p><strong>介绍</strong>:</p>
<ul>
<li>固定窗口又称固定窗口（又称计数器算法，Fixed Window）限流算法，是最简单的限流算法，通过在单位时间内维护的计数器来控制该时间单位内的最大访问量。</li>
</ul>
</blockquote>
<blockquote>
<p><strong>优点</strong>:</p>
<ul>
<li>固定窗口算法非常简单，易于实现和理解</li>
</ul>
</blockquote>
<blockquote>
<p><strong>缺点</strong>:</p>
<ul>
<li>存在明显的临界问题,当两个窗口交界处，瞬时流量可能为2n,如图所示:限流阀值为2个请求,单位时间窗口是1s,在单位时间内的前0.7-1s和1-1.4s，</li>
<li>分别并发2个请求,虽然在时间窗口期间都没有超过阀值，但是如果算0.7-1.4s,则并发数为4个，已经超过单位时间1s不超过2阀值的定义</li>
</ul>
</blockquote>
<p><strong>原理图:</strong><br><img src="/blog/java/img_11.png" alt="img_11.png"></p>
<p><strong>产生的问题:</strong><br><img src="/blog/java/img_12.png" alt="img_12.png"></p>
<h3 id="固定窗口算法代码"><a href="#固定窗口算法代码" class="headerlink" title="固定窗口算法代码:"></a>固定窗口算法代码:</h3><figure class="highlight axapta"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 固定窗口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">boolean</span> windowRate(RateLimiter rateLimiter, RateLimiterData rateLimiterData,String combineKey)&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取当前时间</span></span><br><span class="line">    <span class="keyword">long</span> currentTime = System.currentTimeMillis();</span><br><span class="line">    <span class="comment">// 判断是否在窗口期</span></span><br><span class="line">    <span class="keyword">if</span> (currentTime - rateLimiterData.getStartTime() &gt; TimeUnit.SECONDS.toMillis(rateLimiter.time())) &#123;</span><br><span class="line">        <span class="comment">//重置计数器</span></span><br><span class="line">        rateLimiterData.setRequestsMax(<span class="number">0</span>);</span><br><span class="line">        rateLimiterData.setStartTime(currentTime);</span><br><span class="line">        log.warn(<span class="string">"startTime:"</span>+rateLimiterData.getStartTime());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 最大请求数量大于计数器数量</span></span><br><span class="line">    <span class="keyword">if</span> (rateLimiter.<span class="keyword">count</span>() &gt; rateLimiterData.getRequestsMax() ) &#123;</span><br><span class="line">        <span class="comment">// 计数器自增</span></span><br><span class="line">        Integer <span class="keyword">count</span>=rateLimiterData.getRequestsMax();</span><br><span class="line"></span><br><span class="line">        rateLimiterData.setRequestsMax(<span class="keyword">count</span>+<span class="number">1</span>);</span><br><span class="line">        log.warn(<span class="string">"requestsMax:"</span>+rateLimiterData.getRequestsMax());</span><br><span class="line">        redisCache.setCacheObject(combineKey, rateLimiterData,<span class="number">20</span>,TimeUnit.SECONDS);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="2-滑动窗口算法"><a href="#2-滑动窗口算法" class="headerlink" title="2.滑动窗口算法"></a>2.滑动窗口算法</h2><blockquote>
<p><strong>介绍</strong>:</p>
<ul>
<li>为了防止瞬时流量，可以把固定窗口近一步划分成多个格子，每次向后移动一小格，而不是固定窗口大小，可以解决固定窗口临界值的问题,但是无法避免。这就是滑动窗口（Sliding Window）。</li>
</ul>
</blockquote>
<blockquote>
<p><strong>优点</strong>:</p>
<ul>
<li>可以消除计数器算法跨周期时的流量高峰。周期内的间隔划分越多，流量越平稳。</li>
</ul>
</blockquote>
<blockquote>
<p><strong>缺点</strong>:</p>
<ul>
<li>无法缓存多余的请求,需要合理调整时间窗口大小,流量的数量达到阈值时会瞬间掐断流量，会导致流量不够平滑.</li>
</ul>
</blockquote>
<p><strong>原理图:</strong><br><img src="/blog/java/img_13.png" alt="img_13.png"></p>
<div class="note info"><p>第一次的请求发起时间为:14:30:00 窗口时间为:14:30:00-14:30:02<br>第二次的请求发起时间为:14:30:01 窗口时间为:14:30:00-14:30:02<br>第三次的请求发起时间为:14:30:03 窗口时间为:14:30:02-14:30:04<br>第四次的请求发起时间为:14:30:05 窗口时间为:14:30:04-14:30:06</p></div>

<div class="note info"><p>滑动窗口相比较固定窗口是如何减少临界值的影响:<br>从图上可以看到时间创建是一种向右滑动的方式前进, 滑动窗口限流能够显著减少临界问题产生的影响,但是不能消除掉。<br>窗口每次向前滑动一个单元格,当请求到达时，只要窗口中所有单元格的计数总和不超过阈值都可以放行, 假如2s秒限流4个 那么就是也就是滑动窗口（单位时间）被划分为4个小周期。每格表示0.5S。每过0.5s时间窗口就会往右滑动一格。而且每个小周期，都有自己独立的计数器<br>具体的示例以及固定窗口和滑动窗口的区别:<br>14:30:00-14:30:02<br>滑动窗口一:0-0.5<br>滑动窗口二0.5-1<br>滑动窗口三:1-1.5<br>滑动窗口四:1.5-2<br>此时分别在1.8s来了5个请求,滑动窗口三已经限流,2.6s又来了5个请求,如果是固定算法的话会不限流,<br>但是过了1s会向右移动两个周期,当前的时间窗口单位2.5-3s,2.6处于这个时间段之内,这个区域的数量已经超过限定.就会触发限流。<br>滑动算法的周期划分越多,那么滚动的就会越平滑,限流的统计数量则越准确;</p></div>
<p><strong>问题:</strong><br> 但是临界值的问题无法消除,只是缩小了范围而已;</p>
<h3 id="滑动窗口算法代码"><a href="#滑动窗口算法代码" class="headerlink" title="滑动窗口算法代码:"></a>滑动窗口算法代码:</h3><figure class="highlight lasso"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="built_in">boolean</span>  slidingWindowRateState(RateLimiter rateLimiter,<span class="built_in">String</span> combineKey)&#123;</span><br><span class="line">       TreeMap&lt;Long, <span class="built_in">Integer</span>&gt; counters = <span class="literal">new</span> TreeMap&lt;&gt;();</span><br><span class="line">       counters=redisCache.getCacheObject(combineKey);</span><br><span class="line">       <span class="keyword">if</span>(counters==<span class="built_in">null</span>)&#123;</span><br><span class="line">           counters=<span class="literal">new</span> TreeMap&lt;&gt;();</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="built_in">boolean</span> state=slidingWindowRate(rateLimiter,counters,combineKey);</span><br><span class="line"></span><br><span class="line">       <span class="keyword">return</span> state;</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 滑动窗口</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">public</span> <span class="built_in">boolean</span>  slidingWindowRate(RateLimiter rateLimiter, TreeMap&lt;Long, <span class="built_in">Integer</span>&gt; counters,<span class="built_in">String</span> combineKey)&#123;</span><br><span class="line">       <span class="comment">// 获取当前时间</span></span><br><span class="line">       long currentTime = System.currentTimeMillis();</span><br><span class="line">       <span class="comment">//窗口的开始时间戳</span></span><br><span class="line">       long slideTime=currentTime<span class="params">-TimeUnit.SECONDS.toMillis</span>(rateLimiter.time());</span><br><span class="line">       <span class="comment">//当前窗口总请求数</span></span><br><span class="line">       int requestsCount = <span class="number">0</span>;</span><br><span class="line">       <span class="comment">//遍历存储的计数器</span></span><br><span class="line">       Iterator&lt;<span class="built_in">Map</span>.Entry&lt;Long, <span class="built_in">Integer</span>&gt;&gt; iterator = counters.entrySet().iterator();</span><br><span class="line">       <span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">           <span class="built_in">Map</span>.Entry&lt;Long, <span class="built_in">Integer</span>&gt; entry = iterator.next();</span><br><span class="line">           <span class="comment">// 删除过期的子窗口计数器</span></span><br><span class="line">           <span class="keyword">if</span> (entry.getKey() &lt; slideTime) &#123;</span><br><span class="line">               iterator.remove();</span><br><span class="line">           &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">               <span class="comment">//当前窗口时间的所有计数器进行累加</span></span><br><span class="line">               requestsCount = requestsCount + entry.getValue();</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">if</span> (requestsCount &gt;= rateLimiter.count()) &#123;</span><br><span class="line">           <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">       &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">           <span class="comment">//计数器增加1</span></span><br><span class="line">           counters.merge(currentTime, <span class="number">1</span>, <span class="built_in">Integer</span><span class="type">::sum</span>);</span><br><span class="line">           redisCache.setCacheObject(combineKey, counters,<span class="number">20</span>,TimeUnit.SECONDS);</span><br><span class="line">           <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<h2 id="3-漏桶算法"><a href="#3-漏桶算法" class="headerlink" title="3.漏桶算法"></a>3.漏桶算法</h2><blockquote>
<p><strong>介绍</strong>:</p>
<ul>
<li>漏桶限流算法（Leaky Bucket Algorithm）是一种流量控制算法，用于控制流入网络的数据速率，以防止网络拥塞。它的思想是将数据包看作是水滴，漏桶看作是一个固定容量的水桶，数据包像水滴一样从桶的顶部流入桶中，并通过桶底的一个小孔以一定的速度流出，从而限制了数据包的流量。</li>
</ul>
</blockquote>
<blockquote>
<p><strong>优点</strong>:</p>
<ul>
<li>令牌桶算法是一种流量控制机制，非常适合于处理突发流量，同时保证一定程度的平滑流动。它的工作原理类似于一个实际的水桶，其中水桶代表令牌桶，水流代表令牌。令牌以恒定的速率填充到桶中，直到达到桶的容量上限，多余的&gt; 令牌会被丢弃。</li>
<li>可以平滑限制请求的处理速度，避免瞬间请求过多导致系统崩溃或者雪崩。</li>
<li>可以控制请求的处理速度，使得系统可以适应不同的流量需求，避免过载或者过度闲置。</li>
<li>可以通过调整桶的大小和漏出速率来满足不同的限流需求，可以灵活地适应不同的场景。</li>
</ul>
</blockquote>
<blockquote>
<p><strong>缺点</strong>:</p>
<ul>
<li>短时间内有突发的大流量时，漏桶可能处理不了这些请求,还有就是同时放行多个请求的时候会导致业务处理压力比较大。</li>
</ul>
</blockquote>
<p><strong>原理图:</strong><br><img src="/blog/java/img_15.png" alt="img_15.png"><br><strong>问题:</strong><br>因为速率是固定的无法处理瞬时利流量,不能很快处理请求</p>
<h3 id="漏桶算法代码"><a href="#漏桶算法代码" class="headerlink" title="漏桶算法代码:"></a>漏桶算法代码:</h3><figure class="highlight processing"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 漏桶</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">public</span> <span class="built_in">boolean</span> leakyBucket(RateLimiter rateLimiter, RateLimiterData rateLimiterData,<span class="keyword">String</span> combineKey)&#123;</span><br><span class="line">      <span class="comment">//漏水速率，单位:个/秒</span></span><br><span class="line">      <span class="built_in">int</span> rate = (<span class="built_in">int</span>) Math.<span class="built_in">ceil</span>( rateLimiter.count() / rateLimiter.time());</span><br><span class="line">      rateLimiterData=redisCache.getCacheObject(combineKey);</span><br><span class="line">      <span class="keyword">long</span> requestsTime = System.currentTimeMillis();</span><br><span class="line">          <span class="comment">// 时间间隔=本次请求的时间和上次请求的时间</span></span><br><span class="line">          <span class="keyword">if</span>(rateLimiterData.getStartTime()==<span class="number">0</span>)&#123;</span><br><span class="line">              rateLimiterData.setStartTime(requestsTime);</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">long</span> leakDuration = requestsTime - rateLimiterData.getStartTime();</span><br><span class="line">              <span class="comment">// 计算漏出的水量</span></span><br><span class="line">              <span class="keyword">long</span> leakWater = leakDuration / TimeUnit.SECONDS.toMillis(<span class="number">1</span>) * rate;</span><br><span class="line">              <span class="keyword">if</span>(leakWater&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                  <span class="comment">// 漏桶漏出水后,更新桶里面的数量</span></span><br><span class="line">                  <span class="built_in">int</span> waterNum = (<span class="built_in">int</span>)Math.<span class="built_in">max</span>(<span class="number">0</span>, rateLimiterData.getRequestsMax() - leakWater);</span><br><span class="line">                  rateLimiterData.setRequestsMax(waterNum);</span><br><span class="line">                  rateLimiterData.setStartTime(requestsTime);</span><br><span class="line">              &#125;</span><br><span class="line"></span><br><span class="line">          <span class="comment">// 判断桶中的水数量大于请求的数量,大于则添加水</span></span><br><span class="line">          <span class="keyword">if</span> (rateLimiter.count()&gt;rateLimiterData.getRequestsMax()) &#123;</span><br><span class="line">              rateLimiterData.setRequestsMax(rateLimiterData.getRequestsMax()+rateLimiter.deduction());</span><br><span class="line">              redisCache.setCacheObject(combineKey, rateLimiterData,<span class="number">20</span>,TimeUnit.SECONDS);</span><br><span class="line">              <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">          &#125;</span><br><span class="line">           <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<h2 id="4-令牌桶算法"><a href="#4-令牌桶算法" class="headerlink" title="4.令牌桶算法"></a>4.令牌桶算法</h2><blockquote>
<p><strong>介绍:</strong></p>
<ul>
<li>令牌桶算法是一种常用的限流算法，可以用于限制单位时间内请求的数量。该算法维护一个固定容量的令牌桶，每秒钟会向令牌桶中放入一定数量的令牌。当有请求到来时，如果令牌桶中有足够的令牌，则请求被允许通过并从令牌桶中消耗一个令牌，否则请求被拒绝。</li>
</ul>
</blockquote>
<blockquote>
<p><strong>优点:</strong></p>
<ul>
<li>稳定性高：令牌桶算法可以控制请求的处理速度，可以使系统的负载变得稳定。</li>
<li>精度高：令牌桶算法可以根据实际情况动态调整生成令牌的速率，可以实现较高精度的限流。</li>
<li>弹性好：令牌桶算法可以处理突发流量，可以在短时间内提供更多的处理能力，以处理突发流量。</li>
</ul>
</blockquote>
<blockquote>
<p><strong>缺点:</strong></p>
<ul>
<li>实现复杂：令牌桶算法的实现较为复杂。对短时请求难以处理：在短时间内有大量请求到来时，可能会导致令牌桶中的令牌被快速消耗完，从而限流。这种情况下，可以考虑使用漏桶算法。</li>
<li>时间精度要求高：令牌桶算法要求时间精度较高，因为是根据时间来生成令牌的数量,如果系统时间出现错误，会导致限流效果不理想。</li>
</ul>
</blockquote>
<p>原理图:<br><img src="/blog/java/img_14.png" alt="img_14.png"></p>
<h3 id="令牌桶算法代码"><a href="#令牌桶算法代码" class="headerlink" title="令牌桶算法代码:"></a>令牌桶算法代码:</h3><figure class="highlight aspectj"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 令牌桶</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> rateLimiter</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> rateLimiterData</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> combineKey</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">public</span> <span class="function"><span class="keyword">boolean</span> <span class="title">tokenBucket</span><span class="params">(RateLimiter rateLimiter, RateLimiterData rateLimiterData,String combineKey)</span></span>&#123;</span><br><span class="line">       <span class="comment">//令牌生成的速率，单位:个/秒</span></span><br><span class="line">       <span class="keyword">int</span> rate = (<span class="keyword">int</span>) Math.ceil( rateLimiter.count() / rateLimiter.time());</span><br><span class="line">       rateLimiterData=redisCache.getCacheObject(combineKey);</span><br><span class="line">       <span class="comment">//请求时间</span></span><br><span class="line">       <span class="keyword">long</span> requestsTime = System.currentTimeMillis();</span><br><span class="line">           <span class="keyword">if</span>(rateLimiterData.getStartTime()==<span class="number">0</span>)&#123;</span><br><span class="line">               rateLimiterData.setRequestsMax(rateLimiter.count()-rateLimiter.deduction());</span><br><span class="line">               rateLimiterData.setStartTime(requestsTime);</span><br><span class="line">               redisCache.setCacheObject(combineKey, rateLimiterData,<span class="number">20</span>,TimeUnit.SECONDS);</span><br><span class="line">           &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">               <span class="comment">// 时间间隔=本次请求的时间和上次请求的时间</span></span><br><span class="line">               <span class="keyword">long</span> residueTime = requestsTime - rateLimiterData.getStartTime();</span><br><span class="line">               <span class="comment">// 计算令牌产生的数量</span></span><br><span class="line">               <span class="keyword">int</span> tokenNum = (<span class="keyword">int</span>) (residueTime/ TimeUnit.SECONDS.toMillis(<span class="number">1</span>) * rate);</span><br><span class="line">               <span class="comment">//总数量=剩余的数量+生成的数量</span></span><br><span class="line">               Integer generateToken= Math.abs(rateLimiterData.getRequestsMax() + tokenNum);</span><br><span class="line">               <span class="comment">//最后剩余的数量</span></span><br><span class="line">               <span class="keyword">int</span> residueNum = Math.min(rateLimiterData.getRequestsMax(), generateToken);</span><br><span class="line">               <span class="comment">//剩余数量</span></span><br><span class="line">               rateLimiterData.setRequestsMax(residueNum);</span><br><span class="line">               rateLimiterData.setStartTime(requestsTime);</span><br><span class="line">               <span class="comment">//判断剩余的令牌数量是否大于等于扣减的数量</span></span><br><span class="line">               <span class="keyword">if</span> (rateLimiterData.getRequestsMax() &gt;= rateLimiter.deduction()) &#123;</span><br><span class="line">                   rateLimiterData.setRequestsMax(rateLimiterData.getRequestsMax()-rateLimiter.deduction());</span><br><span class="line">                   redisCache.setCacheObject(combineKey, rateLimiterData,<span class="number">20</span>,TimeUnit.SECONDS);</span><br><span class="line">                   <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<h1 id="公共的参数"><a href="#公共的参数" class="headerlink" title="公共的参数"></a>公共的参数</h1><h2 id="RateLimiterAspect-java"><a href="#RateLimiterAspect-java" class="headerlink" title="RateLimiterAspect.java"></a>RateLimiterAspect.java</h2><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="comment"><span class="markdown">/**</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet"> * </span>限流</span></span></span><br><span class="line"><span class="comment"><span class="markdown"> */</span></span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">RateLimiterAspect</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    private RedisCache redisCache;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before</span>(<span class="string">"@annotation(rateLimiter)"</span>)</span><br><span class="line">    public <span class="keyword">void</span> doBefore(JoinPoint point, RateLimiter rateLimiter) throws Throwable &#123;</span><br><span class="line">        <span class="comment">//厂商信息</span></span><br><span class="line">        LimitResultType limitResultType = rateLimiter.limitResultType();</span><br><span class="line">        <span class="comment">//返回值类型</span></span><br><span class="line">        <span class="built_in">String</span> resultType = rateLimiter.resultType();</span><br><span class="line">        <span class="built_in">String</span> luaScript = buildScript();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获得key</span></span><br><span class="line">        <span class="built_in">String</span> combineKey = getCombineKey(rateLimiter, point);</span><br><span class="line">        boolean state = <span class="keyword">false</span>;</span><br><span class="line">        <span class="comment"><span class="markdown">/<span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">**开始**</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span>/</span></span></span><br><span class="line">        RateLimiterData rateLimiterData = <span class="keyword">new</span> RateLimiterData();</span><br><span class="line">        rateLimiterData = redisCache.getCacheObject(combineKey);</span><br><span class="line">        <span class="keyword">if</span> (rateLimiterData == <span class="keyword">null</span>) &#123;</span><br><span class="line">            RateLimiterData rateLimiterData1 = <span class="keyword">new</span> RateLimiterData();</span><br><span class="line">            rateLimiterData1.setRequestsMax(<span class="number">0</span>);</span><br><span class="line">            rateLimiterData1.setStartTime(<span class="number">0</span>);</span><br><span class="line">            rateLimiterData = rateLimiterData1;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//固定窗口</span></span><br><span class="line">        state = windowRate(rateLimiter, rateLimiterData, combineKey);</span><br><span class="line">        <span class="comment">//漏桶</span></span><br><span class="line">        state = leakyBucket(rateLimiter, rateLimiterData, combineKey);</span><br><span class="line">        <span class="comment">//令牌</span></span><br><span class="line">        state = tokenBucket(rateLimiter, rateLimiterData, combineKey);</span><br><span class="line">        <span class="comment"><span class="markdown">/<span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">**结束**</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span>/</span></span></span><br><span class="line">        <span class="comment">// 滑动窗口</span></span><br><span class="line">        <span class="comment">// state=slidingWindowRateState(rateLimiter,combineKey);</span></span><br><span class="line">        log.warn(<span class="string">"状态:"</span> + state);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (!state) &#123;</span><br><span class="line">                <span class="comment">//Xml格式返回</span></span><br><span class="line">                <span class="keyword">if</span> (<span class="string">"0"</span>.equals(resultType)) &#123;</span><br><span class="line">                    log.warn(<span class="string">"访问过于频繁，请稍候再试"</span>);</span><br><span class="line">                    <span class="comment">//院感</span></span><br><span class="line">                    <span class="keyword">if</span> (limitResultType.getCode().equals(LimitResultType.NAME.getCode())) &#123;</span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> XmlRRException(LimitResultType.NAME, <span class="string">"访问过于频繁，请稍候再试"</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">//LIS</span></span><br><span class="line">                    <span class="keyword">if</span> (limitResultType.getCode().equals(LimitResultType.NAME_PACS.getCode())) &#123;</span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> XmlRRException(LimitResultType.NAME_PACS, ResultCodeEnum.SERVER_FAIL, <span class="string">"访问过于频繁，请稍候再试"</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (XmlRRException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> e;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">"服务器限流异常，请稍候再试"</span>);</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"服务器限流异常，请稍候再试"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<h2 id="RateLimiterData-java"><a href="#RateLimiterData-java" class="headerlink" title="RateLimiterData.java"></a>RateLimiterData.java</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 限流的参数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">@Data</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RateLimiterData</span> &#123;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 请求数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span>   <span class="keyword">int</span> requestsMax = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 请求时间</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> startTime =  <span class="number">0L</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="RateLimiter-java"><a href="#RateLimiter-java" class="headerlink" title="RateLimiter.java"></a>RateLimiter.java</h2><figure class="highlight cs"><table><tr><td class="code"><pre><span class="line">@Target(ElementType.METHOD)</span><br><span class="line">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="line">@Documented</span><br><span class="line"><span class="keyword">public</span> @<span class="keyword">interface</span> <span class="title">RateLimiter</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 限流key</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">String <span class="title">key</span>(<span class="params"></span>) <span class="keyword">default</span> "rate_limit:"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 限流时间,单位秒</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">time</span>(<span class="params"></span>) <span class="keyword">default</span> 60</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 限流次数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">count</span>(<span class="params"></span>) <span class="keyword">default</span> 60</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 扣减数量</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">deduction</span>(<span class="params"></span>) <span class="keyword">default</span> 1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回类型 0 为xml 1为 json</span></span><br><span class="line"><span class="comment">     * @return</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">String <span class="title">resultType</span>(<span class="params"></span>) <span class="keyword">default</span> "0"</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 限流类型</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">LimitType <span class="title">limitType</span>(<span class="params"></span>) <span class="keyword">default</span> LimitType.DEFAULT</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 厂商返回类型</span></span><br><span class="line"><span class="comment">     * @return</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">LimitResultType <span class="title">limitResultType</span>(<span class="params"></span>) <span class="keyword">default</span> LimitResultType.NAME_DEFAULT</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h1><blockquote>
<ul>
<li>固定窗口算法:实现简单，性能高，有明显的临界问题，瞬时流量可达到阈值的2倍。</li>
<li>滑动窗口算法:消除了临界问题，但是当流量到达阈值时会瞬间掐断流量，导致流量不够平滑。</li>
<li>漏桶算法:想要达到限流的目的，又不会掐断流量，使得流量更加平滑,但是因为是固定速率流出水,无法处理瞬时利流量,不能很快处理请求。</li>
<li>令牌算法:处理突发流量，同时保证一定程度的平滑流动。</li>
</ul>
</blockquote>
<hr>
<p>此次以上就是限流的四种算法,具体使用那种算法需要根据自身的业务进行选择,如果是分布式的话推荐使用redis+Lua脚本来实现市面上也有其他的限流工具，<br>如:基于令牌桶实现的限流组件Guava,基于滑动窗口实现的分布式服务架构的流量控制框架Sentinel。</p>
]]></content>
      <categories>
        <category>Spring Boot</category>
      </categories>
      <tags>
        <tag>Spring Boot</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring boot+Mybatis动态多数据源切换</title>
    <url>/SpringBoot/springboot_dynamic.html</url>
    <content><![CDATA[ <br>
<a id="more"></a>

<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>记录自己开发过程的解决方法和实现思路:<br>最近由于关系的原因需要使用多数据源切换进行不同数据库的数据展示和操作，所以进行了研究，并记录整个过程<br>我所使用的是Mysql5.7版本Spring boot版本为2.1.6。</p>
<h1 id="实现的原理："><a href="#实现的原理：" class="headerlink" title="实现的原理："></a>实现的原理：</h1><p>使用注解标识要使用的数据源，然后继承AbstractRoutingDataSource再利用AOP在执行方法前切换数据源，数据源是使用的spring提供的多数据源类<del>（org.springframework.jdbc.datasource.lookup.AbstractRoutingDataSource）</del></p>
<hr>
<h2 id="对多数据源实现的核心类AbstractRoutingDataSource部分内容解析"><a href="#对多数据源实现的核心类AbstractRoutingDataSource部分内容解析" class="headerlink" title="对多数据源实现的核心类AbstractRoutingDataSource部分内容解析"></a>对多数据源实现的核心类AbstractRoutingDataSource部分内容解析</h2><p><img src="/blog/java/DataSource1.png" alt="DataSource1.png"><br><img src="/blog/java/DataSource2.png" alt="DataSource2.png"></p>
<p>以上为AbstractRoutingDataSource部分源代码，<br>其中主要使用为以下方法</p>
<ol>
<li>setTargetDataSources(注入目标数据源)</li>
<li>setDefaultTargetDataSource(注入默认的数据源)</li>
<li>determineCurrentLookupKey(是一个抽象方法，它由具体的子类实现。这个方法的目的是确定当前线程应该使用的数据源的标识。在实际应用中，这个方法通常通过访问线程本地变量或其他上下文信息来获取标识)</li>
<li>setTargetDataSources方法–需要切换的数据源，参数为Map,key是determineCurrentLookupKey方法的返回值，value是数据源实例</li>
<li>setDefaultTargetDataSource方法设置默认使用的数据源，就是没有指定数据源的情况下使用的数据源，参数是一个数据源实例</li>
<li>需要进行实现的抽象方法determineCurrentLookupKey()，该方法返回需要使用的DataSource的key值，然后根据这个key从resolvedDataSources这个map里取出对应的DataSource，如果找不到，则用默认的resolvedDefaultDataSource。</li>
</ol>
<h2 id="目录结构如图所示"><a href="#目录结构如图所示" class="headerlink" title="目录结构如图所示:"></a>目录结构如图所示:</h2><p>![datasource.png]/blog/java/datasource.png)</p>
<h1 id="主要类的说明："><a href="#主要类的说明：" class="headerlink" title="主要类的说明："></a>主要类的说明：</h1><p>配置文件以及相关类的说明</p>
<ol>
<li>数据库配置文件：application.yml;</li>
<li>数据源注解类：DataSource.java;</li>
<li>数据源AOP类：DataSourceAspect.java;</li>
<li>数据源Bean配置类：DataSourceBean.java;</li>
<li>数据库配置类：DataSourceConfig.java;</li>
<li>数据源工具:DataSourceUtil.java;</li>
<li>多数据源类型:DataSourceType.java;</li>
<li>实现AOP动态切换:DynamicDataSource.java;</li>
<li>定义上下文数据源:JdbcContextHolder.java;<h2 id="启动项目之前需要将自带的数据源进行排除"><a href="#启动项目之前需要将自带的数据源进行排除" class="headerlink" title="启动项目之前需要将自带的数据源进行排除:"></a>启动项目之前需要将自带的数据源进行排除:</h2><img src="/blog/java/Application.png" alt="Application.pag"></li>
</ol>
<hr>
<h2 id="数据库配置文件-application-yml"><a href="#数据库配置文件-application-yml" class="headerlink" title="数据库配置文件:application.yml"></a>数据库配置文件:application.yml</h2><p><img src="/blog/java/image-application.png" alt="image-application.png"></p>
<h1 id="具体的代码如下："><a href="#具体的代码如下：" class="headerlink" title="具体的代码如下："></a>具体的代码如下：</h1><div class="note success"><h2 id="数据源注解类-DataSource-java"><a href="#数据源注解类-DataSource-java" class="headerlink" title="数据源注解类:DataSource.java"></a>数据源注解类:DataSource.java</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">import</span> <span class="selector-tag">java</span><span class="selector-class">.lang</span><span class="selector-class">.annotation</span><span class="selector-class">.ElementType</span>;</span><br><span class="line"><span class="selector-tag">import</span> <span class="selector-tag">java</span><span class="selector-class">.lang</span><span class="selector-class">.annotation</span><span class="selector-class">.Retention</span>;</span><br><span class="line"><span class="selector-tag">import</span> <span class="selector-tag">java</span><span class="selector-class">.lang</span><span class="selector-class">.annotation</span><span class="selector-class">.RetentionPolicy</span>;</span><br><span class="line"><span class="selector-tag">import</span> <span class="selector-tag">java</span><span class="selector-class">.lang</span><span class="selector-class">.annotation</span><span class="selector-class">.Target</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 数据源注解类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">@<span class="keyword">Retention</span>(<span class="keyword">RetentionPolicy</span>.<span class="keyword">RUNTIME</span>)</span><br><span class="line">@<span class="keyword">Target</span>(&#123;<span class="selector-tag">ElementType</span><span class="selector-class">.METHOD</span>&#125;)</span><br><span class="line"><span class="selector-tag">public</span> @<span class="keyword">interface</span> DataSource &#123;</span><br><span class="line">    <span class="selector-tag">DataSourceType</span> <span class="selector-tag">value</span>() <span class="selector-tag">default</span> <span class="selector-tag">DataSourceType</span><span class="selector-class">.Master</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></div>






<div class="note success"><h2 id="数据源AOP类-DataSourceAspect-java"><a href="#数据源AOP类-DataSourceAspect-java" class="headerlink" title="数据源AOP类:DataSourceAspect.java"></a>数据源AOP类:DataSourceAspect.java</h2><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.JoinPoint;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.<span class="keyword">annotation</span>.After;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.<span class="keyword">annotation</span>.Aspect;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.<span class="keyword">annotation</span>.Before;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.<span class="keyword">annotation</span>.Pointcut;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.reflect.MethodSignature;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.<span class="keyword">annotation</span>.Order;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * AOP根据注解给上下文赋值</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">//声明此类为aop</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="comment">//加载顺序:动态切换数据源的时候，如果事务在前，数据源切换在后，会导致数据源切换失效，所以就用到了Order（排序）这个关键字</span></span><br><span class="line"><span class="comment">// Order值越小，优先级越高！</span></span><br><span class="line"><span class="meta">@Order(1)</span></span><br><span class="line"><span class="comment">//注解表明一个类会作为组件类，并告知Spring要为这个类创建bean</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DataSourceAspect</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Logger logger = LoggerFactory.getLogger(<span class="keyword">this</span>.getClass());</span><br><span class="line"></span><br><span class="line">    <span class="comment">//切点</span></span><br><span class="line">    <span class="meta">@Pointcut(<span class="meta-string">"@annotation(com.xiaoming.demo.config.datasource.DataSource)"</span>)</span></span><br><span class="line">    <span class="keyword">public</span> void aspect()&#123;</span><br><span class="line">        System.<span class="keyword">out</span>.println(<span class="string">"aspect"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 前置通知, 在方法执行之前执行</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> joinPoint</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Before(<span class="meta-string">"aspect()"</span>)</span></span><br><span class="line">    <span class="keyword">private</span> void before(JoinPoint joinPoint)&#123;</span><br><span class="line">        Object target = joinPoint.getTarget();</span><br><span class="line">        String method = joinPoint.getSignature().getName();</span><br><span class="line">        Class&lt;?&gt; classz = target.getClass();</span><br><span class="line">        Class&lt;?&gt;[] parameterTypes = ((MethodSignature) joinPoint.getSignature()).getMethod().getParameterTypes();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Method m = classz.getMethod(method,parameterTypes);</span><br><span class="line">            <span class="keyword">if</span> (m != <span class="literal">null</span> &amp;&amp; m.isAnnotationPresent(DataSource.<span class="keyword">class</span>))&#123;</span><br><span class="line">                DataSource <span class="keyword">data</span> = m.getAnnotation(DataSource.<span class="keyword">class</span>);</span><br><span class="line">                JdbcContextHolder.putDataSource(<span class="keyword">data</span>.value().getName());</span><br><span class="line">                logger.debug(<span class="string">"===============上下文赋值完成:"</span>+<span class="keyword">data</span>.value().getName());</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                JdbcContextHolder.putDataSource(DataSourceType.Master.getName());</span><br><span class="line">                logger.debug(<span class="string">"===============使用默认数据源:"</span>+DataSourceType.Master.getName());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 后置通知, 在方法执行之后执行</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> point</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@After(<span class="meta-string">"@annotation(dataSource)"</span>)</span></span><br><span class="line">    <span class="keyword">public</span> void afterSwitchDS(JoinPoint point,DataSource dataSource) &#123;</span><br><span class="line">        logger.info(String.format(<span class="string">"当前数据源  %s  执行清理方法"</span>, dataSource.value().getName()));</span><br><span class="line">        JdbcContextHolder.clearDatabaseSource();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>




<div class="note success"><h2 id="数据源Bean配置-DataSourceBean-java"><a href="#数据源Bean配置-DataSourceBean-java" class="headerlink" title="数据源Bean配置:DataSourceBean.java"></a>数据源Bean配置:DataSourceBean.java</h2><figure class="highlight lasso"><table><tr><td class="code"><pre><span class="line">  </span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.ConfigurationProperties;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.<span class="built_in">Map</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 数据源实体类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line">@Component</span><br><span class="line">@ConfigurationProperties(prefix = <span class="string">"spring.datasource"</span>) <span class="comment">//application.yml中对应属性的前缀</span></span><br><span class="line"><span class="keyword">public</span> class DataSourceBean &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    主数据源配置</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">Map</span>&lt;<span class="built_in">String</span>,<span class="built_in">String</span>&gt; master;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *第二数据源配置</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">Map</span>&lt;<span class="built_in">String</span>,<span class="built_in">String</span>&gt; slave;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">Map</span>&lt;<span class="built_in">String</span>, <span class="built_in">String</span>&gt; getMaster() &#123;</span><br><span class="line">        <span class="keyword">return</span> master;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="literal">void</span> setMaster(<span class="built_in">Map</span>&lt;<span class="built_in">String</span>, <span class="built_in">String</span>&gt; master) &#123;</span><br><span class="line">        this.master = master;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">Map</span>&lt;<span class="built_in">String</span>, <span class="built_in">String</span>&gt; getSlave() &#123;</span><br><span class="line">        <span class="keyword">return</span> slave;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="literal">void</span> setSlave(<span class="built_in">Map</span>&lt;<span class="built_in">String</span>, <span class="built_in">String</span>&gt; slave) &#123;</span><br><span class="line">        this.slave = slave;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">  </span><br></pre></td></tr></table></figure></div>





<div class="note success"><h2 id="数据库配置类-DataSourceConfig-java"><a href="#数据库配置类-DataSourceConfig-java" class="headerlink" title="数据库配置类:DataSourceConfig.java"></a>数据库配置类:DataSourceConfig.java</h2><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.druid.support.http.StatViewServlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.druid.support.http.WebStatFilter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.web.servlet.FilterRegistrationBean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.web.servlet.ServletRegistrationBean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Primary;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"><span class="keyword">import</span> javax.sql.DataSource;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.<span class="built_in">List</span>;</span><br><span class="line"><span class="keyword">import</span> java.util.<span class="built_in">Map</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="markdown">/**</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet"> * </span>数据库配置</span></span></span><br><span class="line"><span class="comment"><span class="markdown"> */</span></span></span><br><span class="line"><span class="meta">@SuppressWarnings</span>(<span class="string">"AlibabaRemoveCommentedCode"</span>)</span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">DataSourceConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    private Logger logger = LoggerFactory.getLogger(DataSourceConfig.<span class="keyword">class</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    private DataSourceBean dataSourceBean;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span>(name = <span class="string">"dynamicDataSource"</span>)</span><br><span class="line">    <span class="meta">@Primary</span>  <span class="comment">//优先使用，多数据源</span></span><br><span class="line">    public DataSource dataSource()&#123;</span><br><span class="line">        DynamicDataSource dynamicDataSource = <span class="keyword">new</span> DynamicDataSource();</span><br><span class="line">        <span class="comment">//配置多个数据源</span></span><br><span class="line">        <span class="built_in">Map</span>&lt;<span class="built_in">Object</span>,<span class="built_in">Object</span>&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="built_in">List</span>&lt;<span class="built_in">String</span>&gt; fields = DataSourceUtil.getClassFields(DataSourceBean.<span class="keyword">class</span>);</span><br><span class="line">        <span class="built_in">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">String</span> field:fields)&#123;</span><br><span class="line">            <span class="built_in">Map</span>&lt;<span class="built_in">String</span>,<span class="built_in">String</span>&gt; config = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                config = (<span class="built_in">Map</span>&lt;<span class="built_in">String</span>, <span class="built_in">String</span>&gt;) DataSourceUtil.getFieldValueByName(field,dataSourceBean);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (config == <span class="keyword">null</span>)&#123;</span><br><span class="line">                logger.error(<span class="string">"数据源配置失败:"</span>+field);</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                DataSource dataSource = DataSourceUtil.getDataSource(config);</span><br><span class="line">                <span class="keyword">if</span> (i == <span class="number">0</span>)&#123;</span><br><span class="line">                    logger.debug(<span class="string">"设置默认数据源："</span>+field);</span><br><span class="line">                    dynamicDataSource.setDefaultTargetDataSource(dataSource);</span><br><span class="line">                &#125;</span><br><span class="line">                map.put(field,DataSourceUtil.getDataSource(config));</span><br><span class="line">                logger.debug(<span class="string">"链接数据库："</span>+field);</span><br><span class="line">                i++;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                logger.error(<span class="string">"druid configuration initialization filter"</span>, e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        logger.debug(<span class="string">"共配置了"</span>+i+<span class="string">"个数据源"</span>);</span><br><span class="line">        dynamicDataSource.setTargetDataSources(map);</span><br><span class="line">        <span class="keyword">return</span> dynamicDataSource;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span>(name=<span class="string">"druidServlet"</span>)</span><br><span class="line">    public ServletRegistrationBean druidServlet() &#123;</span><br><span class="line">        ServletRegistrationBean reg = <span class="keyword">new</span> ServletRegistrationBean();</span><br><span class="line">        reg.setServlet(<span class="keyword">new</span> StatViewServlet());</span><br><span class="line">        reg.addUrlMappings(<span class="string">"/druid/*"</span>);</span><br><span class="line">        reg.addInitParameter(<span class="string">"allow"</span>, <span class="string">""</span>); <span class="comment">//白名单</span></span><br><span class="line">        <span class="keyword">return</span> reg;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span>(name = <span class="string">"filterRegistrationBean"</span>)</span><br><span class="line">    public FilterRegistrationBean filterRegistrationBean() &#123;</span><br><span class="line">        FilterRegistrationBean filterRegistrationBean = <span class="keyword">new</span> FilterRegistrationBean();</span><br><span class="line">        filterRegistrationBean.setFilter(<span class="keyword">new</span> WebStatFilter());</span><br><span class="line">        filterRegistrationBean.addUrlPatterns(<span class="string">"/*"</span>);</span><br><span class="line">        filterRegistrationBean.addInitParameter(<span class="string">"exclusions"</span>, <span class="string">"*.js,*.gif,*.jpg,*.png,*.css,*.ico,/druid/*"</span>);</span><br><span class="line">        filterRegistrationBean.addInitParameter(<span class="string">"profileEnable"</span>, <span class="string">"true"</span>);</span><br><span class="line">        filterRegistrationBean.addInitParameter(<span class="string">"principalCookieName"</span>,<span class="string">"USER_COOKIE"</span>);</span><br><span class="line">        filterRegistrationBean.addInitParameter(<span class="string">"principalSessionName"</span>,<span class="string">"USER_SESSION"</span>);</span><br><span class="line">        filterRegistrationBean.addInitParameter(<span class="string">"DruidWebStatFilter"</span>,<span class="string">"/*"</span>);</span><br><span class="line">        <span class="keyword">return</span> filterRegistrationBean;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>



<div class="note success"><h2 id="数据源工具-DataSourceUtil-java"><a href="#数据源工具-DataSourceUtil-java" class="headerlink" title="数据源工具:DataSourceUtil.java"></a>数据源工具:DataSourceUtil.java</h2><figure class="highlight cs"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">import com.alibaba.druid.pool.DruidDataSource;</span><br><span class="line"></span><br><span class="line">import javax.sql.DataSource;</span><br><span class="line">import java.lang.reflect.Field;</span><br><span class="line">import java.lang.reflect.Method;</span><br><span class="line">import java.sql.SQLException;</span><br><span class="line">import java.util.ArrayList;</span><br><span class="line">import java.util.List;</span><br><span class="line">import java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 数据源工具</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">DataSourceUtil</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取指定类的成员变量</span></span><br><span class="line"><span class="comment">     * @param clazz</span></span><br><span class="line"><span class="comment">     * @return 成员变量名的List</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;String&gt; <span class="title">getClassFields</span>(<span class="params">Class clazz</span>)</span>&#123;</span><br><span class="line">        List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        Field[] fields = clazz.getDeclaredFields();</span><br><span class="line">        <span class="keyword">for</span> (Field field : fields)&#123;</span><br><span class="line">            list.<span class="keyword">add</span>(field.getName());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 依据成员变量获取值</span></span><br><span class="line"><span class="comment">     * @param fieldName 变量名</span></span><br><span class="line"><span class="comment">     * @param o 已注入的实体</span></span><br><span class="line"><span class="comment">     * @return Object</span></span><br><span class="line"><span class="comment">     * @throws Exception 抛出异常</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">getFieldValueByName</span>(<span class="params">String fieldName, Object o</span>) throws Exception</span>&#123;</span><br><span class="line">        String firstLetter = fieldName.substring(<span class="number">0</span>, <span class="number">1</span>).toUpperCase();</span><br><span class="line">        String getter = <span class="string">"get"</span> + firstLetter + fieldName.substring(<span class="number">1</span>);</span><br><span class="line">        Method method = o.getClass().getMethod(getter, <span class="keyword">new</span> Class[] &#123;&#125;);</span><br><span class="line">        Object <span class="keyword">value</span> = method.invoke(o, <span class="keyword">new</span> Object[] &#123;&#125;);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">value</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 依据数据配置 获取datasource 对象</span></span><br><span class="line"><span class="comment">     * @param params Map 数据配置</span></span><br><span class="line"><span class="comment">     * @return 返回datasource</span></span><br><span class="line"><span class="comment">     * @throws SQLException 抛出Sql 异常</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> DataSource <span class="title">getDataSource</span>(<span class="params">Map&lt;String,String&gt; <span class="keyword">params</span></span>) throws SQLException</span> &#123;</span><br><span class="line">        DruidDataSource datasource = <span class="keyword">new</span> DruidDataSource();</span><br><span class="line">        datasource.setUrl(<span class="keyword">params</span>.<span class="keyword">get</span>(<span class="string">"url"</span>));</span><br><span class="line">        datasource.setUsername(<span class="keyword">params</span>.<span class="keyword">get</span>(<span class="string">"username"</span>));</span><br><span class="line">        datasource.setPassword(<span class="keyword">params</span>.<span class="keyword">get</span>(<span class="string">"password"</span>));</span><br><span class="line">        datasource.setDriverClassName(<span class="keyword">params</span>.<span class="keyword">get</span>(<span class="string">"driverClassName"</span>));</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">params</span>.containsKey(<span class="string">"initialSize"</span>)) &#123;</span><br><span class="line">            datasource.setInitialSize(Integer.parseInt(<span class="keyword">params</span>.<span class="keyword">get</span>(<span class="string">"initialSize"</span>)));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">params</span>.containsKey(<span class="string">"minIdle"</span>)) &#123;</span><br><span class="line">            datasource.setMinIdle(Integer.parseInt(<span class="keyword">params</span>.<span class="keyword">get</span>(<span class="string">"minIdle"</span>)));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">params</span>.containsKey(<span class="string">"maxActive"</span>)) &#123;</span><br><span class="line">            datasource.setMaxActive(Integer.parseInt(<span class="keyword">params</span>.<span class="keyword">get</span>(<span class="string">"maxActive"</span>)));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">params</span>.containsKey(<span class="string">"maxWait"</span>))&#123;</span><br><span class="line">            datasource.setMaxWait(Long.parseLong(<span class="keyword">params</span>.<span class="keyword">get</span>(<span class="string">"maxWait"</span>)));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">params</span>.containsKey(<span class="string">"timeBetweenEvictionRunsMillis"</span>))&#123;</span><br><span class="line">            datasource.setTimeBetweenEvictionRunsMillis(Long.parseLong(<span class="keyword">params</span>.<span class="keyword">get</span>(<span class="string">"timeBetweenEvictionRunsMillis"</span>)));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">params</span>.containsKey(<span class="string">"minEvictableIdleTimeMillis"</span>))&#123;</span><br><span class="line">            datasource.setMinEvictableIdleTimeMillis(Long.parseLong(<span class="keyword">params</span>.<span class="keyword">get</span>(<span class="string">"minEvictableIdleTimeMillis"</span>)));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">params</span>.containsKey(<span class="string">"validationQuery"</span>))&#123;</span><br><span class="line">            datasource.setValidationQuery(<span class="keyword">params</span>.<span class="keyword">get</span>(<span class="string">"validationQuery"</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">params</span>.containsKey(<span class="string">"testWhileIdle"</span>))&#123;</span><br><span class="line">            datasource.setTestWhileIdle(Boolean.parseBoolean(<span class="keyword">params</span>.<span class="keyword">get</span>(<span class="string">"testWhileIdle"</span>)));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">params</span>.containsKey(<span class="string">"testOnBorrow"</span>))&#123;</span><br><span class="line">            datasource.setTestOnBorrow(Boolean.parseBoolean(<span class="keyword">params</span>.<span class="keyword">get</span>(<span class="string">"testOnBorrow"</span>)));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">params</span>.containsKey(<span class="string">"testOnReturn"</span>))&#123;</span><br><span class="line">            datasource.setTestOnBorrow(Boolean.parseBoolean(<span class="keyword">params</span>.<span class="keyword">get</span>(<span class="string">"testOnReturn"</span>)));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">params</span>.containsKey(<span class="string">"poolPreparedStatements"</span>))&#123;</span><br><span class="line">            datasource.setPoolPreparedStatements(Boolean.parseBoolean(<span class="keyword">params</span>.<span class="keyword">get</span>(<span class="string">"poolPreparedStatements"</span>)));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">params</span>.containsKey(<span class="string">"maxPoolPreparedStatementPerConnectionSize"</span>))&#123;</span><br><span class="line">            datasource.setMaxPoolPreparedStatementPerConnectionSize(</span><br><span class="line">                    Integer.parseInt(<span class="keyword">params</span>.<span class="keyword">get</span>(<span class="string">"maxPoolPreparedStatementPerConnectionSize"</span>)));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">params</span>.containsKey(<span class="string">"filters"</span>))&#123;</span><br><span class="line">            datasource.setFilters(<span class="keyword">params</span>.<span class="keyword">get</span>(<span class="string">"filters"</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">params</span>.containsKey(<span class="string">"connectionProperties"</span>))&#123;</span><br><span class="line">            datasource.setConnectionProperties(<span class="keyword">params</span>.<span class="keyword">get</span>(<span class="string">"connectionProperties"</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> datasource;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>



<div class="note success"><h2 id="多数据源类型-DataSourceType-java"><a href="#多数据源类型-DataSourceType-java" class="headerlink" title="多数据源类型:DataSourceType.java"></a>多数据源类型:DataSourceType.java</h2><figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 多数据源类型</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> DataSourceType &#123;</span><br><span class="line">    Master(<span class="string">"master"</span>),</span><br><span class="line">    Slave(<span class="string">"slave"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">String</span> name;</span><br><span class="line"></span><br><span class="line">    DataSourceType(<span class="keyword">String</span> name) &#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">String</span> getName() &#123;</span><br><span class="line">        <span class="built_in">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> setName(<span class="keyword">String</span> name) &#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>



<div class="note success"><h2 id="实现AOP动态切换-DynamicDataSource-java"><a href="#实现AOP动态切换-DynamicDataSource-java" class="headerlink" title="实现AOP动态切换:DynamicDataSource.java"></a>实现AOP动态切换:DynamicDataSource.java</h2><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.jdbc.datasource.lookup.<span class="type">AbstractRoutingDataSource</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * AbstractRoutingDataSource实现类DynamicDataSource</span></span><br><span class="line"><span class="comment"> * 实现AOP动态切换的关键</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">DynamicDataSource</span> <span class="keyword">extends</span> <span class="title">AbstractRoutingDataSource</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="type">Object</span> determineCurrentLookupKey() &#123;</span><br><span class="line">        <span class="type">String</span> dbName = <span class="type">JdbcContextHolder</span>.getDataSource();</span><br><span class="line">        <span class="keyword">if</span> (dbName == <span class="literal">null</span> )&#123;</span><br><span class="line">            dbName =  <span class="type">DataSourceType</span>.<span class="type">Master</span>.getName();</span><br><span class="line">        &#125;</span><br><span class="line">        logger.debug(<span class="string">"数据源为："</span>+dbName);</span><br><span class="line">        <span class="keyword">return</span> dbName;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>


<div class="note success"><h2 id="定义上下文数据源-JdbcContextHolder-java"><a href="#定义上下文数据源-JdbcContextHolder-java" class="headerlink" title="定义上下文数据源:JdbcContextHolder.java"></a>定义上下文数据源:JdbcContextHolder.java</h2><figure class="highlight"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 通过ThreadLocal定义上下文数据源标识</span><br><span class="line"> */</span><br><span class="line">public class JdbcContextHolder &#123;</span><br><span class="line"></span><br><span class="line">    // ThreadLocal每个线程都独有的保存其线程所属的变量值</span><br><span class="line">    private final static ThreadLocal&lt;String&gt; local = new ThreadLocal&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    //赋值</span><br><span class="line">    public static void putDataSource(String name)&#123;</span><br><span class="line">        <span class="attribute">local.set(name);</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //取值</span><br><span class="line">    public static String getDataSource()&#123;</span><br><span class="line">        return local.get();</span><br><span class="line">    &#125;</span><br><span class="line">    //清除</span><br><span class="line">    public static void clearDatabaseSource() &#123;</span><br><span class="line">        <span class="attribute">local.remove();</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>


<p>数据源配置已经完成，如果在代码中进行使用如图<br><img src="/blog/java/Service.png" alt="Service.png"><br>数据源的切换我选择在Service层进行，如果在controller进行切换的话，单一不灵活，而选择在Service层进行，只需要在controller里面注入多个service实现即可，如果开启了事务的话，需要在事务执行之前将数据进行切换，否则会出现数据源切换失败，原因:事务本身也是通过AOP配置的，因为它先走了事务切面，在事务还未结束的时候去切换数据源的话会出错的，设置一下切换数据源的AOP的优先级，确保在事务执行之前就已经切换数据源。进行测试，没有发现问题。<br>数据源动态切换已经完成。</p>
<h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>此篇内容仅仅只是记录自己在完成该功能的时候的一些过程，以及自己的思路。其中也遇到一些问题，通过网上查找了相关一些资料，如有不对的地方或者待完善的地方，请多多指教。</p>
<h2 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h2><p>如果有多个数据源，需要同时执行DML的时候，此时如果出现异常的话，事务该如何保证数据源都能回滚？</p>
]]></content>
      <categories>
        <category>Spring Boot</category>
      </categories>
      <tags>
        <tag>Spring Boot</tag>
      </tags>
  </entry>
</search>
